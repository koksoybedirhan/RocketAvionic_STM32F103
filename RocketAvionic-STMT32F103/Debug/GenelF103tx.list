
GenelF103tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b75c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800b870  0800b870  0001b870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde8  0800bde8  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bde8  0800bde8  0001bde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdf0  0800bdf0  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdf4  0800bdf4  0001bdf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800bdf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000250  0800c044  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  0800c044  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011305  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286a  00000000  00000000  0003157a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00033de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00034f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c2a  00000000  00000000  00035f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a45  00000000  00000000  0004fb92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fcbb  00000000  00000000  000635d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3292  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e98  00000000  00000000  000f32e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000250 	.word	0x20000250
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b854 	.word	0x0800b854

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000254 	.word	0x20000254
 800014c:	0800b854 	.word	0x0800b854

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bba:	2afd      	cmp	r2, #253	; 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	; 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	; 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__gesf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295
 8000e0c:	e006      	b.n	8000e1c <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__lesf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpsf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpsf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e32:	d011      	beq.n	8000e58 <__cmpsf2+0x40>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3a:	bf18      	it	ne
 8000e3c:	ea90 0f01 	teqne	r0, r1
 8000e40:	bf58      	it	pl
 8000e42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e46:	bf88      	it	hi
 8000e48:	17c8      	asrhi	r0, r1, #31
 8000e4a:	bf38      	it	cc
 8000e4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e50:	bf18      	it	ne
 8000e52:	f040 0001 	orrne.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	d102      	bne.n	8000e64 <__cmpsf2+0x4c>
 8000e5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e62:	d105      	bne.n	8000e70 <__cmpsf2+0x58>
 8000e64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e68:	d1e4      	bne.n	8000e34 <__cmpsf2+0x1c>
 8000e6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6e:	d0e1      	beq.n	8000e34 <__cmpsf2+0x1c>
 8000e70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_cfrcmple>:
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	e7ff      	b.n	8000e80 <__aeabi_cfcmpeq>

08000e80 <__aeabi_cfcmpeq>:
 8000e80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e82:	f7ff ffc9 	bl	8000e18 <__cmpsf2>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf48      	it	mi
 8000e8a:	f110 0f00 	cmnmi.w	r0, #0
 8000e8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e90 <__aeabi_fcmpeq>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff fff4 	bl	8000e80 <__aeabi_cfcmpeq>
 8000e98:	bf0c      	ite	eq
 8000e9a:	2001      	moveq	r0, #1
 8000e9c:	2000      	movne	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffea 	bl	8000e80 <__aeabi_cfcmpeq>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmple>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffe0 	bl	8000e80 <__aeabi_cfcmpeq>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpge>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffd2 	bl	8000e78 <__aeabi_cfrcmple>
 8000ed4:	bf94      	ite	ls
 8000ed6:	2001      	movls	r0, #1
 8000ed8:	2000      	movhi	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmpgt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffc8 	bl	8000e78 <__aeabi_cfrcmple>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_ldivmod>:
 8000ef4:	b97b      	cbnz	r3, 8000f16 <__aeabi_ldivmod+0x22>
 8000ef6:	b972      	cbnz	r2, 8000f16 <__aeabi_ldivmod+0x22>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bfbe      	ittt	lt
 8000efc:	2000      	movlt	r0, #0
 8000efe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f02:	e006      	blt.n	8000f12 <__aeabi_ldivmod+0x1e>
 8000f04:	bf08      	it	eq
 8000f06:	2800      	cmpeq	r0, #0
 8000f08:	bf1c      	itt	ne
 8000f0a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f0e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f12:	f000 b9e1 	b.w	80012d8 <__aeabi_idiv0>
 8000f16:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f1a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f1e:	2900      	cmp	r1, #0
 8000f20:	db09      	blt.n	8000f36 <__aeabi_ldivmod+0x42>
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db1a      	blt.n	8000f5c <__aeabi_ldivmod+0x68>
 8000f26:	f000 f86d 	bl	8001004 <__udivmoddi4>
 8000f2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f32:	b004      	add	sp, #16
 8000f34:	4770      	bx	lr
 8000f36:	4240      	negs	r0, r0
 8000f38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db1b      	blt.n	8000f78 <__aeabi_ldivmod+0x84>
 8000f40:	f000 f860 	bl	8001004 <__udivmoddi4>
 8000f44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4c:	b004      	add	sp, #16
 8000f4e:	4240      	negs	r0, r0
 8000f50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f54:	4252      	negs	r2, r2
 8000f56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5a:	4770      	bx	lr
 8000f5c:	4252      	negs	r2, r2
 8000f5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f62:	f000 f84f 	bl	8001004 <__udivmoddi4>
 8000f66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6e:	b004      	add	sp, #16
 8000f70:	4240      	negs	r0, r0
 8000f72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f76:	4770      	bx	lr
 8000f78:	4252      	negs	r2, r2
 8000f7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f7e:	f000 f841 	bl	8001004 <__udivmoddi4>
 8000f82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f8a:	b004      	add	sp, #16
 8000f8c:	4252      	negs	r2, r2
 8000f8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f92:	4770      	bx	lr

08000f94 <__aeabi_d2lz>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	4605      	mov	r5, r0
 8000f98:	460c      	mov	r4, r1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4628      	mov	r0, r5
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	f7ff fd0b 	bl	80009bc <__aeabi_dcmplt>
 8000fa6:	b928      	cbnz	r0, 8000fb4 <__aeabi_d2lz+0x20>
 8000fa8:	4628      	mov	r0, r5
 8000faa:	4621      	mov	r1, r4
 8000fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fb0:	f000 b80a 	b.w	8000fc8 <__aeabi_d2ulz>
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000fba:	f000 f805 	bl	8000fc8 <__aeabi_d2ulz>
 8000fbe:	4240      	negs	r0, r0
 8000fc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc4:	bd38      	pop	{r3, r4, r5, pc}
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_d2ulz>:
 8000fc8:	b5d0      	push	{r4, r6, r7, lr}
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <__aeabi_d2ulz+0x34>)
 8000fce:	4606      	mov	r6, r0
 8000fd0:	460f      	mov	r7, r1
 8000fd2:	f7ff fa81 	bl	80004d8 <__aeabi_dmul>
 8000fd6:	f7ff fd57 	bl	8000a88 <__aeabi_d2uiz>
 8000fda:	4604      	mov	r4, r0
 8000fdc:	f7ff fa02 	bl	80003e4 <__aeabi_ui2d>
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <__aeabi_d2ulz+0x38>)
 8000fe4:	f7ff fa78 	bl	80004d8 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4630      	mov	r0, r6
 8000fee:	4639      	mov	r1, r7
 8000ff0:	f7ff f8ba 	bl	8000168 <__aeabi_dsub>
 8000ff4:	f7ff fd48 	bl	8000a88 <__aeabi_d2uiz>
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	bdd0      	pop	{r4, r6, r7, pc}
 8000ffc:	3df00000 	.word	0x3df00000
 8001000:	41f00000 	.word	0x41f00000

08001004 <__udivmoddi4>:
 8001004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001008:	9e08      	ldr	r6, [sp, #32]
 800100a:	460d      	mov	r5, r1
 800100c:	4604      	mov	r4, r0
 800100e:	4688      	mov	r8, r1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d14d      	bne.n	80010b0 <__udivmoddi4+0xac>
 8001014:	428a      	cmp	r2, r1
 8001016:	4694      	mov	ip, r2
 8001018:	d968      	bls.n	80010ec <__udivmoddi4+0xe8>
 800101a:	fab2 f282 	clz	r2, r2
 800101e:	b152      	cbz	r2, 8001036 <__udivmoddi4+0x32>
 8001020:	fa01 f302 	lsl.w	r3, r1, r2
 8001024:	f1c2 0120 	rsb	r1, r2, #32
 8001028:	fa20 f101 	lsr.w	r1, r0, r1
 800102c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001030:	ea41 0803 	orr.w	r8, r1, r3
 8001034:	4094      	lsls	r4, r2
 8001036:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800103a:	fbb8 f7f1 	udiv	r7, r8, r1
 800103e:	fa1f fe8c 	uxth.w	lr, ip
 8001042:	fb01 8817 	mls	r8, r1, r7, r8
 8001046:	fb07 f00e 	mul.w	r0, r7, lr
 800104a:	0c23      	lsrs	r3, r4, #16
 800104c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001050:	4298      	cmp	r0, r3
 8001052:	d90a      	bls.n	800106a <__udivmoddi4+0x66>
 8001054:	eb1c 0303 	adds.w	r3, ip, r3
 8001058:	f107 35ff 	add.w	r5, r7, #4294967295
 800105c:	f080 811e 	bcs.w	800129c <__udivmoddi4+0x298>
 8001060:	4298      	cmp	r0, r3
 8001062:	f240 811b 	bls.w	800129c <__udivmoddi4+0x298>
 8001066:	3f02      	subs	r7, #2
 8001068:	4463      	add	r3, ip
 800106a:	1a1b      	subs	r3, r3, r0
 800106c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001070:	fb01 3310 	mls	r3, r1, r0, r3
 8001074:	fb00 fe0e 	mul.w	lr, r0, lr
 8001078:	b2a4      	uxth	r4, r4
 800107a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800107e:	45a6      	cmp	lr, r4
 8001080:	d90a      	bls.n	8001098 <__udivmoddi4+0x94>
 8001082:	eb1c 0404 	adds.w	r4, ip, r4
 8001086:	f100 33ff 	add.w	r3, r0, #4294967295
 800108a:	f080 8109 	bcs.w	80012a0 <__udivmoddi4+0x29c>
 800108e:	45a6      	cmp	lr, r4
 8001090:	f240 8106 	bls.w	80012a0 <__udivmoddi4+0x29c>
 8001094:	4464      	add	r4, ip
 8001096:	3802      	subs	r0, #2
 8001098:	2100      	movs	r1, #0
 800109a:	eba4 040e 	sub.w	r4, r4, lr
 800109e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80010a2:	b11e      	cbz	r6, 80010ac <__udivmoddi4+0xa8>
 80010a4:	2300      	movs	r3, #0
 80010a6:	40d4      	lsrs	r4, r2
 80010a8:	e9c6 4300 	strd	r4, r3, [r6]
 80010ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b0:	428b      	cmp	r3, r1
 80010b2:	d908      	bls.n	80010c6 <__udivmoddi4+0xc2>
 80010b4:	2e00      	cmp	r6, #0
 80010b6:	f000 80ee 	beq.w	8001296 <__udivmoddi4+0x292>
 80010ba:	2100      	movs	r1, #0
 80010bc:	e9c6 0500 	strd	r0, r5, [r6]
 80010c0:	4608      	mov	r0, r1
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	fab3 f183 	clz	r1, r3
 80010ca:	2900      	cmp	r1, #0
 80010cc:	d14a      	bne.n	8001164 <__udivmoddi4+0x160>
 80010ce:	42ab      	cmp	r3, r5
 80010d0:	d302      	bcc.n	80010d8 <__udivmoddi4+0xd4>
 80010d2:	4282      	cmp	r2, r0
 80010d4:	f200 80fc 	bhi.w	80012d0 <__udivmoddi4+0x2cc>
 80010d8:	1a84      	subs	r4, r0, r2
 80010da:	eb65 0303 	sbc.w	r3, r5, r3
 80010de:	2001      	movs	r0, #1
 80010e0:	4698      	mov	r8, r3
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d0e2      	beq.n	80010ac <__udivmoddi4+0xa8>
 80010e6:	e9c6 4800 	strd	r4, r8, [r6]
 80010ea:	e7df      	b.n	80010ac <__udivmoddi4+0xa8>
 80010ec:	b902      	cbnz	r2, 80010f0 <__udivmoddi4+0xec>
 80010ee:	deff      	udf	#255	; 0xff
 80010f0:	fab2 f282 	clz	r2, r2
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	f040 8091 	bne.w	800121c <__udivmoddi4+0x218>
 80010fa:	eba1 000c 	sub.w	r0, r1, ip
 80010fe:	2101      	movs	r1, #1
 8001100:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001104:	fa1f fe8c 	uxth.w	lr, ip
 8001108:	fbb0 f3f7 	udiv	r3, r0, r7
 800110c:	fb07 0013 	mls	r0, r7, r3, r0
 8001110:	0c25      	lsrs	r5, r4, #16
 8001112:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001116:	fb0e f003 	mul.w	r0, lr, r3
 800111a:	42a8      	cmp	r0, r5
 800111c:	d908      	bls.n	8001130 <__udivmoddi4+0x12c>
 800111e:	eb1c 0505 	adds.w	r5, ip, r5
 8001122:	f103 38ff 	add.w	r8, r3, #4294967295
 8001126:	d202      	bcs.n	800112e <__udivmoddi4+0x12a>
 8001128:	42a8      	cmp	r0, r5
 800112a:	f200 80ce 	bhi.w	80012ca <__udivmoddi4+0x2c6>
 800112e:	4643      	mov	r3, r8
 8001130:	1a2d      	subs	r5, r5, r0
 8001132:	fbb5 f0f7 	udiv	r0, r5, r7
 8001136:	fb07 5510 	mls	r5, r7, r0, r5
 800113a:	fb0e fe00 	mul.w	lr, lr, r0
 800113e:	b2a4      	uxth	r4, r4
 8001140:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001144:	45a6      	cmp	lr, r4
 8001146:	d908      	bls.n	800115a <__udivmoddi4+0x156>
 8001148:	eb1c 0404 	adds.w	r4, ip, r4
 800114c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001150:	d202      	bcs.n	8001158 <__udivmoddi4+0x154>
 8001152:	45a6      	cmp	lr, r4
 8001154:	f200 80b6 	bhi.w	80012c4 <__udivmoddi4+0x2c0>
 8001158:	4628      	mov	r0, r5
 800115a:	eba4 040e 	sub.w	r4, r4, lr
 800115e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001162:	e79e      	b.n	80010a2 <__udivmoddi4+0x9e>
 8001164:	f1c1 0720 	rsb	r7, r1, #32
 8001168:	408b      	lsls	r3, r1
 800116a:	fa22 fc07 	lsr.w	ip, r2, r7
 800116e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001172:	fa25 fa07 	lsr.w	sl, r5, r7
 8001176:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800117a:	fbba f8f9 	udiv	r8, sl, r9
 800117e:	fa20 f307 	lsr.w	r3, r0, r7
 8001182:	fb09 aa18 	mls	sl, r9, r8, sl
 8001186:	408d      	lsls	r5, r1
 8001188:	fa1f fe8c 	uxth.w	lr, ip
 800118c:	431d      	orrs	r5, r3
 800118e:	fa00 f301 	lsl.w	r3, r0, r1
 8001192:	fb08 f00e 	mul.w	r0, r8, lr
 8001196:	0c2c      	lsrs	r4, r5, #16
 8001198:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800119c:	42a0      	cmp	r0, r4
 800119e:	fa02 f201 	lsl.w	r2, r2, r1
 80011a2:	d90b      	bls.n	80011bc <__udivmoddi4+0x1b8>
 80011a4:	eb1c 0404 	adds.w	r4, ip, r4
 80011a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80011ac:	f080 8088 	bcs.w	80012c0 <__udivmoddi4+0x2bc>
 80011b0:	42a0      	cmp	r0, r4
 80011b2:	f240 8085 	bls.w	80012c0 <__udivmoddi4+0x2bc>
 80011b6:	f1a8 0802 	sub.w	r8, r8, #2
 80011ba:	4464      	add	r4, ip
 80011bc:	1a24      	subs	r4, r4, r0
 80011be:	fbb4 f0f9 	udiv	r0, r4, r9
 80011c2:	fb09 4410 	mls	r4, r9, r0, r4
 80011c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ca:	b2ad      	uxth	r5, r5
 80011cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011d0:	45a6      	cmp	lr, r4
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x1e2>
 80011d4:	eb1c 0404 	adds.w	r4, ip, r4
 80011d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011dc:	d26c      	bcs.n	80012b8 <__udivmoddi4+0x2b4>
 80011de:	45a6      	cmp	lr, r4
 80011e0:	d96a      	bls.n	80012b8 <__udivmoddi4+0x2b4>
 80011e2:	3802      	subs	r0, #2
 80011e4:	4464      	add	r4, ip
 80011e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011ea:	fba0 9502 	umull	r9, r5, r0, r2
 80011ee:	eba4 040e 	sub.w	r4, r4, lr
 80011f2:	42ac      	cmp	r4, r5
 80011f4:	46c8      	mov	r8, r9
 80011f6:	46ae      	mov	lr, r5
 80011f8:	d356      	bcc.n	80012a8 <__udivmoddi4+0x2a4>
 80011fa:	d053      	beq.n	80012a4 <__udivmoddi4+0x2a0>
 80011fc:	2e00      	cmp	r6, #0
 80011fe:	d069      	beq.n	80012d4 <__udivmoddi4+0x2d0>
 8001200:	ebb3 0208 	subs.w	r2, r3, r8
 8001204:	eb64 040e 	sbc.w	r4, r4, lr
 8001208:	fa22 f301 	lsr.w	r3, r2, r1
 800120c:	fa04 f707 	lsl.w	r7, r4, r7
 8001210:	431f      	orrs	r7, r3
 8001212:	40cc      	lsrs	r4, r1
 8001214:	e9c6 7400 	strd	r7, r4, [r6]
 8001218:	2100      	movs	r1, #0
 800121a:	e747      	b.n	80010ac <__udivmoddi4+0xa8>
 800121c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001220:	f1c2 0120 	rsb	r1, r2, #32
 8001224:	fa25 f301 	lsr.w	r3, r5, r1
 8001228:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800122c:	fa20 f101 	lsr.w	r1, r0, r1
 8001230:	4095      	lsls	r5, r2
 8001232:	430d      	orrs	r5, r1
 8001234:	fbb3 f1f7 	udiv	r1, r3, r7
 8001238:	fb07 3311 	mls	r3, r7, r1, r3
 800123c:	fa1f fe8c 	uxth.w	lr, ip
 8001240:	0c28      	lsrs	r0, r5, #16
 8001242:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001246:	fb01 f30e 	mul.w	r3, r1, lr
 800124a:	4283      	cmp	r3, r0
 800124c:	fa04 f402 	lsl.w	r4, r4, r2
 8001250:	d908      	bls.n	8001264 <__udivmoddi4+0x260>
 8001252:	eb1c 0000 	adds.w	r0, ip, r0
 8001256:	f101 38ff 	add.w	r8, r1, #4294967295
 800125a:	d22f      	bcs.n	80012bc <__udivmoddi4+0x2b8>
 800125c:	4283      	cmp	r3, r0
 800125e:	d92d      	bls.n	80012bc <__udivmoddi4+0x2b8>
 8001260:	3902      	subs	r1, #2
 8001262:	4460      	add	r0, ip
 8001264:	1ac0      	subs	r0, r0, r3
 8001266:	fbb0 f3f7 	udiv	r3, r0, r7
 800126a:	fb07 0013 	mls	r0, r7, r3, r0
 800126e:	b2ad      	uxth	r5, r5
 8001270:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001274:	fb03 f00e 	mul.w	r0, r3, lr
 8001278:	42a8      	cmp	r0, r5
 800127a:	d908      	bls.n	800128e <__udivmoddi4+0x28a>
 800127c:	eb1c 0505 	adds.w	r5, ip, r5
 8001280:	f103 38ff 	add.w	r8, r3, #4294967295
 8001284:	d216      	bcs.n	80012b4 <__udivmoddi4+0x2b0>
 8001286:	42a8      	cmp	r0, r5
 8001288:	d914      	bls.n	80012b4 <__udivmoddi4+0x2b0>
 800128a:	3b02      	subs	r3, #2
 800128c:	4465      	add	r5, ip
 800128e:	1a28      	subs	r0, r5, r0
 8001290:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001294:	e738      	b.n	8001108 <__udivmoddi4+0x104>
 8001296:	4631      	mov	r1, r6
 8001298:	4630      	mov	r0, r6
 800129a:	e707      	b.n	80010ac <__udivmoddi4+0xa8>
 800129c:	462f      	mov	r7, r5
 800129e:	e6e4      	b.n	800106a <__udivmoddi4+0x66>
 80012a0:	4618      	mov	r0, r3
 80012a2:	e6f9      	b.n	8001098 <__udivmoddi4+0x94>
 80012a4:	454b      	cmp	r3, r9
 80012a6:	d2a9      	bcs.n	80011fc <__udivmoddi4+0x1f8>
 80012a8:	ebb9 0802 	subs.w	r8, r9, r2
 80012ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012b0:	3801      	subs	r0, #1
 80012b2:	e7a3      	b.n	80011fc <__udivmoddi4+0x1f8>
 80012b4:	4643      	mov	r3, r8
 80012b6:	e7ea      	b.n	800128e <__udivmoddi4+0x28a>
 80012b8:	4628      	mov	r0, r5
 80012ba:	e794      	b.n	80011e6 <__udivmoddi4+0x1e2>
 80012bc:	4641      	mov	r1, r8
 80012be:	e7d1      	b.n	8001264 <__udivmoddi4+0x260>
 80012c0:	46d0      	mov	r8, sl
 80012c2:	e77b      	b.n	80011bc <__udivmoddi4+0x1b8>
 80012c4:	4464      	add	r4, ip
 80012c6:	3802      	subs	r0, #2
 80012c8:	e747      	b.n	800115a <__udivmoddi4+0x156>
 80012ca:	3b02      	subs	r3, #2
 80012cc:	4465      	add	r5, ip
 80012ce:	e72f      	b.n	8001130 <__udivmoddi4+0x12c>
 80012d0:	4608      	mov	r0, r1
 80012d2:	e706      	b.n	80010e2 <__udivmoddi4+0xde>
 80012d4:	4631      	mov	r1, r6
 80012d6:	e6e9      	b.n	80010ac <__udivmoddi4+0xa8>

080012d8 <__aeabi_idiv0>:
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <TrimRead>:
float SeaLevel = 1013.25;

//Read the Trimming parameters saved in the NVM ROM of the device
//This function came from datasheet page 24
void TrimRead(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af04      	add	r7, sp, #16
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	2319      	movs	r3, #25
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	4b69      	ldr	r3, [pc, #420]	; (8001494 <TrimRead+0x1b8>)
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	2288      	movs	r2, #136	; 0x88
 80012f4:	21ec      	movs	r1, #236	; 0xec
 80012f6:	4868      	ldr	r0, [pc, #416]	; (8001498 <TrimRead+0x1bc>)
 80012f8:	f003 ff8c 	bl	8005214 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80012fc:	4b67      	ldr	r3, [pc, #412]	; (800149c <TrimRead+0x1c0>)
 80012fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001302:	9202      	str	r2, [sp, #8]
 8001304:	2207      	movs	r2, #7
 8001306:	9201      	str	r2, [sp, #4]
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22e1      	movs	r2, #225	; 0xe1
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4861      	ldr	r0, [pc, #388]	; (8001498 <TrimRead+0x1bc>)
 8001312:	f003 ff7f 	bl	8005214 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001316:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <TrimRead+0x1b8>)
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <TrimRead+0x1b8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <TrimRead+0x1c4>)
 800132c:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <TrimRead+0x1b8>)
 8001330:	78db      	ldrb	r3, [r3, #3]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	4b57      	ldr	r3, [pc, #348]	; (8001494 <TrimRead+0x1b8>)
 8001338:	789b      	ldrb	r3, [r3, #2]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <TrimRead+0x1c8>)
 8001342:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001344:	4b53      	ldr	r3, [pc, #332]	; (8001494 <TrimRead+0x1b8>)
 8001346:	795b      	ldrb	r3, [r3, #5]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b51      	ldr	r3, [pc, #324]	; (8001494 <TrimRead+0x1b8>)
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21a      	sxth	r2, r3
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <TrimRead+0x1cc>)
 8001358:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800135a:	4b4e      	ldr	r3, [pc, #312]	; (8001494 <TrimRead+0x1b8>)
 800135c:	79db      	ldrb	r3, [r3, #7]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21a      	sxth	r2, r3
 8001362:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <TrimRead+0x1b8>)
 8001364:	795b      	ldrb	r3, [r3, #5]
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21b      	sxth	r3, r3
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <TrimRead+0x1d0>)
 8001370:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001372:	4b48      	ldr	r3, [pc, #288]	; (8001494 <TrimRead+0x1b8>)
 8001374:	7a5b      	ldrb	r3, [r3, #9]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <TrimRead+0x1b8>)
 800137c:	799b      	ldrb	r3, [r3, #6]
 800137e:	b21b      	sxth	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <TrimRead+0x1d4>)
 8001386:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001388:	4b42      	ldr	r3, [pc, #264]	; (8001494 <TrimRead+0x1b8>)
 800138a:	7adb      	ldrb	r3, [r3, #11]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21a      	sxth	r2, r3
 8001390:	4b40      	ldr	r3, [pc, #256]	; (8001494 <TrimRead+0x1b8>)
 8001392:	7a9b      	ldrb	r3, [r3, #10]
 8001394:	b21b      	sxth	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b21a      	sxth	r2, r3
 800139a:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <TrimRead+0x1d8>)
 800139c:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <TrimRead+0x1b8>)
 80013a0:	7b5b      	ldrb	r3, [r3, #13]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <TrimRead+0x1b8>)
 80013a8:	7b1b      	ldrb	r3, [r3, #12]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <TrimRead+0x1dc>)
 80013b2:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80013b4:	4b37      	ldr	r3, [pc, #220]	; (8001494 <TrimRead+0x1b8>)
 80013b6:	7bdb      	ldrb	r3, [r3, #15]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <TrimRead+0x1b8>)
 80013be:	7b9b      	ldrb	r3, [r3, #14]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <TrimRead+0x1e0>)
 80013c8:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80013ca:	4b32      	ldr	r3, [pc, #200]	; (8001494 <TrimRead+0x1b8>)
 80013cc:	7c5b      	ldrb	r3, [r3, #17]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <TrimRead+0x1b8>)
 80013d4:	7c1b      	ldrb	r3, [r3, #16]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <TrimRead+0x1e4>)
 80013de:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <TrimRead+0x1b8>)
 80013e2:	7cdb      	ldrb	r3, [r3, #19]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <TrimRead+0x1b8>)
 80013ea:	7c9b      	ldrb	r3, [r3, #18]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <TrimRead+0x1e8>)
 80013f4:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <TrimRead+0x1b8>)
 80013f8:	7d5b      	ldrb	r3, [r3, #21]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <TrimRead+0x1b8>)
 8001400:	7d1b      	ldrb	r3, [r3, #20]
 8001402:	b21b      	sxth	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b21a      	sxth	r2, r3
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <TrimRead+0x1ec>)
 800140a:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <TrimRead+0x1b8>)
 800140e:	7ddb      	ldrb	r3, [r3, #23]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <TrimRead+0x1b8>)
 8001416:	7d9b      	ldrb	r3, [r3, #22]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <TrimRead+0x1f0>)
 8001420:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <TrimRead+0x1b8>)
 8001424:	7e1b      	ldrb	r3, [r3, #24]
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <TrimRead+0x1f4>)
 800142a:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <TrimRead+0x1b8>)
 800142e:	7e9b      	ldrb	r3, [r3, #26]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21a      	sxth	r2, r3
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <TrimRead+0x1b8>)
 8001436:	7e5b      	ldrb	r3, [r3, #25]
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b21a      	sxth	r2, r3
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <TrimRead+0x1f8>)
 8001440:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <TrimRead+0x1b8>)
 8001444:	7edb      	ldrb	r3, [r3, #27]
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <TrimRead+0x1fc>)
 800144a:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <TrimRead+0x1b8>)
 800144e:	7f1b      	ldrb	r3, [r3, #28]
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	b21a      	sxth	r2, r3
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <TrimRead+0x1b8>)
 8001456:	7f5b      	ldrb	r3, [r3, #29]
 8001458:	b21b      	sxth	r3, r3
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b21a      	sxth	r2, r3
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <TrimRead+0x200>)
 8001466:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <TrimRead+0x1b8>)
 800146a:	7f9b      	ldrb	r3, [r3, #30]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	b21a      	sxth	r2, r3
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <TrimRead+0x1b8>)
 8001472:	7f5b      	ldrb	r3, [r3, #29]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <TrimRead+0x204>)
 8001480:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <TrimRead+0x1b8>)
 8001484:	7fdb      	ldrb	r3, [r3, #31]
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <TrimRead+0x208>)
 800148a:	801a      	strh	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000270 	.word	0x20000270
 8001498:	2000036c 	.word	0x2000036c
 800149c:	20000289 	.word	0x20000289
 80014a0:	20000290 	.word	0x20000290
 80014a4:	20000298 	.word	0x20000298
 80014a8:	2000029a 	.word	0x2000029a
 80014ac:	20000292 	.word	0x20000292
 80014b0:	2000029c 	.word	0x2000029c
 80014b4:	2000029e 	.word	0x2000029e
 80014b8:	200002a0 	.word	0x200002a0
 80014bc:	200002a2 	.word	0x200002a2
 80014c0:	200002a4 	.word	0x200002a4
 80014c4:	200002a6 	.word	0x200002a6
 80014c8:	200002a8 	.word	0x200002a8
 80014cc:	200002aa 	.word	0x200002aa
 80014d0:	20000294 	.word	0x20000294
 80014d4:	200002ac 	.word	0x200002ac
 80014d8:	20000296 	.word	0x20000296
 80014dc:	200002ae 	.word	0x200002ae
 80014e0:	200002b0 	.word	0x200002b0
 80014e4:	200002b2 	.word	0x200002b2

080014e8 <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af04      	add	r7, sp, #16
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	4603      	mov	r3, r0
 80014fc:	71bb      	strb	r3, [r7, #6]
 80014fe:	460b      	mov	r3, r1
 8001500:	717b      	strb	r3, [r7, #5]
 8001502:	4613      	mov	r3, r2
 8001504:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001506:	f7ff fee9 	bl	80012dc <TrimRead>

	uint8_t datatowrite = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001512:	23b6      	movs	r3, #182	; 0xb6
 8001514:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	2301      	movs	r3, #1
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	f107 030f 	add.w	r3, r7, #15
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	22e0      	movs	r2, #224	; 0xe0
 800152a:	21ec      	movs	r1, #236	; 0xec
 800152c:	4858      	ldr	r0, [pc, #352]	; (8001690 <BME280_Config+0x1a8>)
 800152e:	f003 fd77 	bl	8005020 <HAL_I2C_Mem_Write>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <BME280_Config+0x56>
	{
		return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	e0a3      	b.n	8001686 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800153e:	2064      	movs	r0, #100	; 0x64
 8001540:	f003 f8dc 	bl	80046fc <HAL_Delay>

	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001544:	797b      	ldrb	r3, [r7, #5]
 8001546:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154c:	9302      	str	r3, [sp, #8]
 800154e:	2301      	movs	r3, #1
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	f107 030f 	add.w	r3, r7, #15
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	22f2      	movs	r2, #242	; 0xf2
 800155c:	21ec      	movs	r1, #236	; 0xec
 800155e:	484c      	ldr	r0, [pc, #304]	; (8001690 <BME280_Config+0x1a8>)
 8001560:	f003 fd5e 	bl	8005020 <HAL_I2C_Mem_Write>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <BME280_Config+0x88>
	{
		return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	e08a      	b.n	8001686 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001570:	2064      	movs	r0, #100	; 0x64
 8001572:	f003 f8c3 	bl	80046fc <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2301      	movs	r3, #1
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	f107 030e 	add.w	r3, r7, #14
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	22f2      	movs	r2, #242	; 0xf2
 800158a:	21ec      	movs	r1, #236	; 0xec
 800158c:	4840      	ldr	r0, [pc, #256]	; (8001690 <BME280_Config+0x1a8>)
 800158e:	f003 fe41 	bl	8005214 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001592:	7bba      	ldrb	r2, [r7, #14]
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	429a      	cmp	r2, r3
 8001598:	d002      	beq.n	80015a0 <BME280_Config+0xb8>
	{
		return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	e072      	b.n	8001686 <BME280_Config+0x19e>
	}

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80015a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a4:	015b      	lsls	r3, r3, #5
 80015a6:	b25a      	sxtb	r2, r3
 80015a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80015b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	2301      	movs	r3, #1
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	f107 030f 	add.w	r3, r7, #15
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2301      	movs	r3, #1
 80015ca:	22f5      	movs	r2, #245	; 0xf5
 80015cc:	21ec      	movs	r1, #236	; 0xec
 80015ce:	4830      	ldr	r0, [pc, #192]	; (8001690 <BME280_Config+0x1a8>)
 80015d0:	f003 fd26 	bl	8005020 <HAL_I2C_Mem_Write>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <BME280_Config+0xf8>
	{
		return -1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e052      	b.n	8001686 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	f003 f88b 	bl	80046fc <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	f107 030e 	add.w	r3, r7, #14
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2301      	movs	r3, #1
 80015f8:	22f5      	movs	r2, #245	; 0xf5
 80015fa:	21ec      	movs	r1, #236	; 0xec
 80015fc:	4824      	ldr	r0, [pc, #144]	; (8001690 <BME280_Config+0x1a8>)
 80015fe:	f003 fe09 	bl	8005214 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001602:	7bba      	ldrb	r2, [r7, #14]
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	429a      	cmp	r2, r3
 8001608:	d002      	beq.n	8001610 <BME280_Config+0x128>
	{
		return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e03a      	b.n	8001686 <BME280_Config+0x19e>
	}
	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	015b      	lsls	r3, r3, #5
 8001614:	b25a      	sxtb	r2, r3
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	b25b      	sxtb	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b25a      	sxtb	r2, r3
 8001620:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001624:	4313      	orrs	r3, r2
 8001626:	b25b      	sxtb	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800162c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	2301      	movs	r3, #1
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	f107 030f 	add.w	r3, r7, #15
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	22f4      	movs	r2, #244	; 0xf4
 8001640:	21ec      	movs	r1, #236	; 0xec
 8001642:	4813      	ldr	r0, [pc, #76]	; (8001690 <BME280_Config+0x1a8>)
 8001644:	f003 fcec 	bl	8005020 <HAL_I2C_Mem_Write>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <BME280_Config+0x16c>
	{
		return -1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	e018      	b.n	8001686 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001654:	2064      	movs	r0, #100	; 0x64
 8001656:	f003 f851 	bl	80046fc <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	2301      	movs	r3, #1
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	f107 030e 	add.w	r3, r7, #14
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2301      	movs	r3, #1
 800166c:	22f4      	movs	r2, #244	; 0xf4
 800166e:	21ec      	movs	r1, #236	; 0xec
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <BME280_Config+0x1a8>)
 8001672:	f003 fdcf 	bl	8005214 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001676:	7bba      	ldrb	r2, [r7, #14]
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	429a      	cmp	r2, r3
 800167c:	d002      	beq.n	8001684 <BME280_Config+0x19c>
	{
		return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e000      	b.n	8001686 <BME280_Config+0x19e>
	}
	return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	bf00      	nop
 8001690:	2000036c 	.word	0x2000036c

08001694 <BMEReadRaw>:

int BMEReadRaw(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	2301      	movs	r3, #1
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <BMEReadRaw+0x8c>)
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	22d0      	movs	r2, #208	; 0xd0
 80016ac:	21ec      	movs	r1, #236	; 0xec
 80016ae:	481d      	ldr	r0, [pc, #116]	; (8001724 <BMEReadRaw+0x90>)
 80016b0:	f003 fdb0 	bl	8005214 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <BMEReadRaw+0x8c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b60      	cmp	r3, #96	; 0x60
 80016ba:	d12a      	bne.n	8001712 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	2308      	movs	r3, #8
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	463b      	mov	r3, r7
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	22f7      	movs	r2, #247	; 0xf7
 80016ce:	21ec      	movs	r1, #236	; 0xec
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <BMEReadRaw+0x90>)
 80016d2:	f003 fd9f 	bl	8005214 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80016d6:	783b      	ldrb	r3, [r7, #0]
 80016d8:	031a      	lsls	r2, r3, #12
 80016da:	787b      	ldrb	r3, [r7, #1]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	4313      	orrs	r3, r2
 80016e0:	78ba      	ldrb	r2, [r7, #2]
 80016e2:	0912      	lsrs	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	4313      	orrs	r3, r2
 80016e8:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <BMEReadRaw+0x94>)
 80016ea:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	031a      	lsls	r2, r3, #12
 80016f0:	793b      	ldrb	r3, [r7, #4]
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4313      	orrs	r3, r2
 80016f6:	797a      	ldrb	r2, [r7, #5]
 80016f8:	0912      	lsrs	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	4313      	orrs	r3, r2
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <BMEReadRaw+0x98>)
 8001700:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001702:	79bb      	ldrb	r3, [r7, #6]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	4313      	orrs	r3, r2
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <BMEReadRaw+0x9c>)
 800170c:	6013      	str	r3, [r2, #0]

		return 0;
 800170e:	2300      	movs	r3, #0
 8001710:	e001      	b.n	8001716 <BMEReadRaw+0x82>
	}
	else return -1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000026c 	.word	0x2000026c
 8001724:	2000036c 	.word	0x2000036c
 8001728:	200002b8 	.word	0x200002b8
 800172c:	200002b4 	.word	0x200002b4
 8001730:	200002bc 	.word	0x200002bc

08001734 <BME280_compensate_T_int32>:
	HAL_Delay (100);
}

int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	10da      	asrs	r2, r3, #3
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <BME280_compensate_T_int32+0x70>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <BME280_compensate_T_int32+0x74>)
 800174a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	12db      	asrs	r3, r3, #11
 8001754:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	111b      	asrs	r3, r3, #4
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <BME280_compensate_T_int32+0x70>)
 800175c:	8812      	ldrh	r2, [r2, #0]
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	1112      	asrs	r2, r2, #4
 8001764:	490f      	ldr	r1, [pc, #60]	; (80017a4 <BME280_compensate_T_int32+0x70>)
 8001766:	8809      	ldrh	r1, [r1, #0]
 8001768:	1a52      	subs	r2, r2, r1
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	131b      	asrs	r3, r3, #12
 8001770:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <BME280_compensate_T_int32+0x78>)
 8001772:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	139b      	asrs	r3, r3, #14
 800177c:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <BME280_compensate_T_int32+0x7c>)
 8001786:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <BME280_compensate_T_int32+0x7c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	3380      	adds	r3, #128	; 0x80
 8001794:	121b      	asrs	r3, r3, #8
 8001796:	60fb      	str	r3, [r7, #12]
	return T;
 8001798:	68fb      	ldr	r3, [r7, #12]
}
 800179a:	4618      	mov	r0, r3
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000290 	.word	0x20000290
 80017a8:	20000298 	.word	0x20000298
 80017ac:	2000029a 	.word	0x2000029a
 80017b0:	200002c8 	.word	0x200002c8

080017b4 <BME280_compensate_P_int64>:

uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80017b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b8:	b0ca      	sub	sp, #296	; 0x128
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80017c0:	4bae      	ldr	r3, [pc, #696]	; (8001a7c <BME280_compensate_P_int64+0x2c8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	17da      	asrs	r2, r3, #31
 80017c6:	461c      	mov	r4, r3
 80017c8:	4615      	mov	r5, r2
 80017ca:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80017ce:	f145 3bff 	adc.w	fp, r5, #4294967295
 80017d2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80017d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80017da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017de:	fb03 f102 	mul.w	r1, r3, r2
 80017e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80017e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	18ca      	adds	r2, r1, r3
 80017f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017f4:	fba3 8903 	umull	r8, r9, r3, r3
 80017f8:	eb02 0309 	add.w	r3, r2, r9
 80017fc:	4699      	mov	r9, r3
 80017fe:	4ba0      	ldr	r3, [pc, #640]	; (8001a80 <BME280_compensate_P_int64+0x2cc>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	b21b      	sxth	r3, r3
 8001806:	17da      	asrs	r2, r3, #31
 8001808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800180c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001810:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001814:	4603      	mov	r3, r0
 8001816:	fb03 f209 	mul.w	r2, r3, r9
 800181a:	460b      	mov	r3, r1
 800181c:	fb08 f303 	mul.w	r3, r8, r3
 8001820:	4413      	add	r3, r2
 8001822:	4602      	mov	r2, r0
 8001824:	fba8 2102 	umull	r2, r1, r8, r2
 8001828:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800182c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001830:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001834:	4413      	add	r3, r2
 8001836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800183a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800183e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001842:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001846:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <BME280_compensate_P_int64+0x2d0>)
 8001848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184c:	b21b      	sxth	r3, r3
 800184e:	17da      	asrs	r2, r3, #31
 8001850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001854:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001858:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800185c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001860:	462a      	mov	r2, r5
 8001862:	fb02 f203 	mul.w	r2, r2, r3
 8001866:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800186a:	4621      	mov	r1, r4
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	441a      	add	r2, r3
 8001872:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001876:	4621      	mov	r1, r4
 8001878:	fba3 3101 	umull	r3, r1, r3, r1
 800187c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001880:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001888:	18d3      	adds	r3, r2, r3
 800188a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800188e:	f04f 0000 	mov.w	r0, #0
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800189a:	462b      	mov	r3, r5
 800189c:	0459      	lsls	r1, r3, #17
 800189e:	4622      	mov	r2, r4
 80018a0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80018a4:	4623      	mov	r3, r4
 80018a6:	0458      	lsls	r0, r3, #17
 80018a8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018ac:	1814      	adds	r4, r2, r0
 80018ae:	643c      	str	r4, [r7, #64]	; 0x40
 80018b0:	414b      	adcs	r3, r1
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
 80018b4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80018b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80018bc:	4b72      	ldr	r3, [pc, #456]	; (8001a88 <BME280_compensate_P_int64+0x2d4>)
 80018be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	17da      	asrs	r2, r3, #31
 80018c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018ca:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80018ce:	f04f 0000 	mov.w	r0, #0
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018da:	00d9      	lsls	r1, r3, #3
 80018dc:	2000      	movs	r0, #0
 80018de:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018e2:	1814      	adds	r4, r2, r0
 80018e4:	63bc      	str	r4, [r7, #56]	; 0x38
 80018e6:	414b      	adcs	r3, r1
 80018e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ea:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80018ee:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80018f2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80018f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018fa:	fb03 f102 	mul.w	r1, r3, r2
 80018fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001902:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	18ca      	adds	r2, r1, r3
 800190c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001910:	fba3 3103 	umull	r3, r1, r3, r3
 8001914:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800191c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001920:	18d3      	adds	r3, r2, r3
 8001922:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001926:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <BME280_compensate_P_int64+0x2d8>)
 8001928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192c:	b21b      	sxth	r3, r3
 800192e:	17da      	asrs	r2, r3, #31
 8001930:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001934:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001938:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800193c:	4622      	mov	r2, r4
 800193e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001942:	4641      	mov	r1, r8
 8001944:	fb01 f202 	mul.w	r2, r1, r2
 8001948:	464d      	mov	r5, r9
 800194a:	4618      	mov	r0, r3
 800194c:	4621      	mov	r1, r4
 800194e:	4603      	mov	r3, r0
 8001950:	fb03 f305 	mul.w	r3, r3, r5
 8001954:	4413      	add	r3, r2
 8001956:	4602      	mov	r2, r0
 8001958:	4641      	mov	r1, r8
 800195a:	fba2 2101 	umull	r2, r1, r2, r1
 800195e:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001962:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001966:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800196a:	4413      	add	r3, r2
 800196c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800197c:	4623      	mov	r3, r4
 800197e:	0a18      	lsrs	r0, r3, #8
 8001980:	462a      	mov	r2, r5
 8001982:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001986:	462b      	mov	r3, r5
 8001988:	1219      	asrs	r1, r3, #8
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <BME280_compensate_P_int64+0x2dc>)
 800198c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001990:	b21b      	sxth	r3, r3
 8001992:	17da      	asrs	r2, r3, #31
 8001994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001998:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800199c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019a0:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80019a4:	464a      	mov	r2, r9
 80019a6:	fb02 f203 	mul.w	r2, r2, r3
 80019aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019ae:	4644      	mov	r4, r8
 80019b0:	fb04 f303 	mul.w	r3, r4, r3
 80019b4:	441a      	add	r2, r3
 80019b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019ba:	4644      	mov	r4, r8
 80019bc:	fba3 3404 	umull	r3, r4, r3, r4
 80019c0:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 80019c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80019c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80019cc:	18d3      	adds	r3, r2, r3
 80019ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80019de:	464c      	mov	r4, r9
 80019e0:	0323      	lsls	r3, r4, #12
 80019e2:	46c4      	mov	ip, r8
 80019e4:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80019e8:	4644      	mov	r4, r8
 80019ea:	0322      	lsls	r2, r4, #12
 80019ec:	1884      	adds	r4, r0, r2
 80019ee:	633c      	str	r4, [r7, #48]	; 0x30
 80019f0:	eb41 0303 	adc.w	r3, r1, r3
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
 80019f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80019fa:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80019fe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a02:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001a06:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001a0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <BME280_compensate_P_int64+0x2e0>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a1a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a1e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001a22:	4622      	mov	r2, r4
 8001a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001a28:	4641      	mov	r1, r8
 8001a2a:	fb01 f202 	mul.w	r2, r1, r2
 8001a2e:	464d      	mov	r5, r9
 8001a30:	4618      	mov	r0, r3
 8001a32:	4621      	mov	r1, r4
 8001a34:	4603      	mov	r3, r0
 8001a36:	fb03 f305 	mul.w	r3, r3, r5
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	4641      	mov	r1, r8
 8001a40:	fba2 2101 	umull	r2, r1, r2, r1
 8001a44:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001a48:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001a4c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001a50:	4413      	add	r3, r2
 8001a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001a62:	4629      	mov	r1, r5
 8001a64:	104a      	asrs	r2, r1, #1
 8001a66:	4629      	mov	r1, r5
 8001a68:	17cb      	asrs	r3, r1, #31
 8001a6a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 8001a6e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a72:	4313      	orrs	r3, r2
 8001a74:	d110      	bne.n	8001a98 <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 8001a76:	2300      	movs	r3, #0
 8001a78:	e152      	b.n	8001d20 <BME280_compensate_P_int64+0x56c>
 8001a7a:	bf00      	nop
 8001a7c:	200002c8 	.word	0x200002c8
 8001a80:	200002a4 	.word	0x200002a4
 8001a84:	200002a2 	.word	0x200002a2
 8001a88:	200002a0 	.word	0x200002a0
 8001a8c:	2000029e 	.word	0x2000029e
 8001a90:	2000029c 	.word	0x2000029c
 8001a94:	20000292 	.word	0x20000292
	}
	p = 1048576-adc_P;
 8001a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a9c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001aa0:	17da      	asrs	r2, r3, #31
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aa6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001aaa:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001aae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ab2:	105b      	asrs	r3, r3, #1
 8001ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ab8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001abc:	07db      	lsls	r3, r3, #31
 8001abe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ac2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ac6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001aca:	4604      	mov	r4, r0
 8001acc:	1aa4      	subs	r4, r4, r2
 8001ace:	67bc      	str	r4, [r7, #120]	; 0x78
 8001ad0:	eb61 0303 	sbc.w	r3, r1, r3
 8001ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ad6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ada:	4622      	mov	r2, r4
 8001adc:	462b      	mov	r3, r5
 8001ade:	1891      	adds	r1, r2, r2
 8001ae0:	6239      	str	r1, [r7, #32]
 8001ae2:	415b      	adcs	r3, r3
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001aea:	4621      	mov	r1, r4
 8001aec:	1851      	adds	r1, r2, r1
 8001aee:	61b9      	str	r1, [r7, #24]
 8001af0:	4629      	mov	r1, r5
 8001af2:	414b      	adcs	r3, r1
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b02:	4649      	mov	r1, r9
 8001b04:	018b      	lsls	r3, r1, #6
 8001b06:	4641      	mov	r1, r8
 8001b08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b0c:	4641      	mov	r1, r8
 8001b0e:	018a      	lsls	r2, r1, #6
 8001b10:	4641      	mov	r1, r8
 8001b12:	1889      	adds	r1, r1, r2
 8001b14:	6139      	str	r1, [r7, #16]
 8001b16:	4649      	mov	r1, r9
 8001b18:	eb43 0101 	adc.w	r1, r3, r1
 8001b1c:	6179      	str	r1, [r7, #20]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b2a:	4649      	mov	r1, r9
 8001b2c:	008b      	lsls	r3, r1, #2
 8001b2e:	46c4      	mov	ip, r8
 8001b30:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b34:	4641      	mov	r1, r8
 8001b36:	008a      	lsls	r2, r1, #2
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4622      	mov	r2, r4
 8001b40:	189b      	adds	r3, r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	460b      	mov	r3, r1
 8001b46:	462a      	mov	r2, r5
 8001b48:	eb42 0303 	adc.w	r3, r2, r3
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	008b      	lsls	r3, r1, #2
 8001b5e:	46c4      	mov	ip, r8
 8001b60:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b64:	4641      	mov	r1, r8
 8001b66:	008a      	lsls	r2, r1, #2
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4622      	mov	r2, r4
 8001b70:	189b      	adds	r3, r3, r2
 8001b72:	673b      	str	r3, [r7, #112]	; 0x70
 8001b74:	462b      	mov	r3, r5
 8001b76:	460a      	mov	r2, r1
 8001b78:	eb42 0303 	adc.w	r3, r2, r3
 8001b7c:	677b      	str	r3, [r7, #116]	; 0x74
 8001b7e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001b82:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b86:	f7ff f9b5 	bl	8000ef4 <__aeabi_ldivmod>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001b92:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <BME280_compensate_P_int64+0x578>)
 8001b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	17da      	asrs	r2, r3, #31
 8001b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ba0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ba4:	f04f 0000 	mov.w	r0, #0
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	0b50      	lsrs	r0, r2, #13
 8001bae:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bb2:	1359      	asrs	r1, r3, #13
 8001bb4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001bb8:	462b      	mov	r3, r5
 8001bba:	fb00 f203 	mul.w	r2, r0, r3
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	fb03 f301 	mul.w	r3, r3, r1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	fba2 2100 	umull	r2, r1, r2, r0
 8001bcc:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001bd0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001bd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001bd8:	4413      	add	r3, r2
 8001bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001bde:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	0b50      	lsrs	r0, r2, #13
 8001bec:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bf0:	1359      	asrs	r1, r3, #13
 8001bf2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	fb00 f203 	mul.w	r2, r0, r3
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	fb03 f301 	mul.w	r3, r3, r1
 8001c02:	4413      	add	r3, r2
 8001c04:	4622      	mov	r2, r4
 8001c06:	fba2 2100 	umull	r2, r1, r2, r0
 8001c0a:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001c0e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001c12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001c16:	4413      	add	r3, r2
 8001c18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001c28:	4621      	mov	r1, r4
 8001c2a:	0e4a      	lsrs	r2, r1, #25
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	460c      	mov	r4, r1
 8001c32:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001c36:	164b      	asrs	r3, r1, #25
 8001c38:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001c3c:	4b3c      	ldr	r3, [pc, #240]	; (8001d30 <BME280_compensate_P_int64+0x57c>)
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	17da      	asrs	r2, r3, #31
 8001c46:	663b      	str	r3, [r7, #96]	; 0x60
 8001c48:	667a      	str	r2, [r7, #100]	; 0x64
 8001c4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c4e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c52:	462a      	mov	r2, r5
 8001c54:	fb02 f203 	mul.w	r2, r2, r3
 8001c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001c68:	4621      	mov	r1, r4
 8001c6a:	fba2 2101 	umull	r2, r1, r2, r1
 8001c6e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001c72:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001c76:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	0cca      	lsrs	r2, r1, #19
 8001c90:	4620      	mov	r0, r4
 8001c92:	4629      	mov	r1, r5
 8001c94:	460c      	mov	r4, r1
 8001c96:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001c9a:	14cb      	asrs	r3, r1, #19
 8001c9c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001ca0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001ca4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ca8:	1884      	adds	r4, r0, r2
 8001caa:	65bc      	str	r4, [r7, #88]	; 0x58
 8001cac:	eb41 0303 	adc.w	r3, r1, r3
 8001cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cb2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001cb6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001cba:	4621      	mov	r1, r4
 8001cbc:	1889      	adds	r1, r1, r2
 8001cbe:	6539      	str	r1, [r7, #80]	; 0x50
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	eb43 0101 	adc.w	r1, r3, r1
 8001cc6:	6579      	str	r1, [r7, #84]	; 0x54
 8001cc8:	f04f 0000 	mov.w	r0, #0
 8001ccc:	f04f 0100 	mov.w	r1, #0
 8001cd0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	0a18      	lsrs	r0, r3, #8
 8001cd8:	462a      	mov	r2, r5
 8001cda:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001cde:	462b      	mov	r3, r5
 8001ce0:	1219      	asrs	r1, r3, #8
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <BME280_compensate_P_int64+0x580>)
 8001ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	17da      	asrs	r2, r3, #31
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001cfc:	464c      	mov	r4, r9
 8001cfe:	0123      	lsls	r3, r4, #4
 8001d00:	46c4      	mov	ip, r8
 8001d02:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001d06:	4644      	mov	r4, r8
 8001d08:	0122      	lsls	r2, r4, #4
 8001d0a:	1884      	adds	r4, r0, r2
 8001d0c:	603c      	str	r4, [r7, #0]
 8001d0e:	eb41 0303 	adc.w	r3, r1, r3
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d18:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001d1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001d26:	46bd      	mov	sp, r7
 8001d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d2c:	200002aa 	.word	0x200002aa
 8001d30:	200002a8 	.word	0x200002a8
 8001d34:	200002a6 	.word	0x200002a6

08001d38 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of â€œ47445â€ represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <bme280_compensate_H_int32+0xbc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001d48:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	039a      	lsls	r2, r3, #14
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <bme280_compensate_H_int32+0xc0>)
 8001d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d54:	051b      	lsls	r3, r3, #20
 8001d56:	1ad2      	subs	r2, r2, r3
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <bme280_compensate_H_int32+0xc4>)
 8001d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001d68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001d6c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001d6e:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <bme280_compensate_H_int32+0xc8>)
 8001d70:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d74:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001d7c:	1292      	asrs	r2, r2, #10
 8001d7e:	4921      	ldr	r1, [pc, #132]	; (8001e04 <bme280_compensate_H_int32+0xcc>)
 8001d80:	8809      	ldrh	r1, [r1, #0]
 8001d82:	4608      	mov	r0, r1
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	fb00 f101 	mul.w	r1, r0, r1
 8001d8a:	12c9      	asrs	r1, r1, #11
 8001d8c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001d90:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001d94:	1292      	asrs	r2, r2, #10
 8001d96:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001d9a:	491b      	ldr	r1, [pc, #108]	; (8001e08 <bme280_compensate_H_int32+0xd0>)
 8001d9c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001da0:	fb01 f202 	mul.w	r2, r1, r2
 8001da4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001da8:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	13db      	asrs	r3, r3, #15
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	13d2      	asrs	r2, r2, #15
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001dbe:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <bme280_compensate_H_int32+0xd4>)
 8001dc0:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001dc6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001dd4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ddc:	bfa8      	it	ge
 8001dde:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001de2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	131b      	asrs	r3, r3, #12
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	200002c8 	.word	0x200002c8
 8001df8:	200002ae 	.word	0x200002ae
 8001dfc:	200002b0 	.word	0x200002b0
 8001e00:	200002b2 	.word	0x200002b2
 8001e04:	20000296 	.word	0x20000296
 8001e08:	200002ac 	.word	0x200002ac
 8001e0c:	20000294 	.word	0x20000294

08001e10 <BME280_Pressure>:

//Pressure Measurment
double BME280_Pressure (void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001e14:	f7ff fc3e 	bl	8001694 <BMEReadRaw>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d121      	bne.n	8001e62 <BME280_Pressure+0x52>
	{
		  if (pRaw == 0x800000)
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <BME280_Pressure+0x70>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e26:	d104      	bne.n	8001e32 <BME280_Pressure+0x22>
		  {
			  Pressure = 0; // value in case temp measurement was disabled
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <BME280_Pressure+0x74>)
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e01b      	b.n	8001e6a <BME280_Pressure+0x5a>
		  }
		  else
		  {
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <BME280_Pressure+0x70>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fcbc 	bl	80017b4 <BME280_compensate_P_int64>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fad0 	bl	80003e4 <__aeabi_ui2d>
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <BME280_Pressure+0x78>)
 8001e4a:	f7fe fc6f 	bl	800072c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe37 	bl	8000ac8 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <BME280_Pressure+0x74>)
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e003      	b.n	8001e6a <BME280_Pressure+0x5a>
		  }
	}
	else
	{
		Pressure = 0;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <BME280_Pressure+0x74>)
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
	}
	return Pressure;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <BME280_Pressure+0x74>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fada 	bl	8000428 <__aeabi_f2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
}
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200002b8 	.word	0x200002b8
 8001e84:	2000049c 	.word	0x2000049c
 8001e88:	40700000 	.word	0x40700000

08001e8c <BME280_Humidity>:

//Humidity Measurment
double BME280_Humidity (void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001e90:	f7ff fc00 	bl	8001694 <BMEReadRaw>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d121      	bne.n	8001ede <BME280_Humidity+0x52>
	{
		if (hRaw == 0x8000)
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <BME280_Humidity+0x70>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea2:	d104      	bne.n	8001eae <BME280_Humidity+0x22>
		{
			Humidity = 0; // value in case temp measurement was disabled
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <BME280_Humidity+0x74>)
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e01b      	b.n	8001ee6 <BME280_Humidity+0x5a>
		}
		else
		{
			Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <BME280_Humidity+0x70>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff40 	bl	8001d38 <bme280_compensate_H_int32>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fa92 	bl	80003e4 <__aeabi_ui2d>
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <BME280_Humidity+0x78>)
 8001ec6:	f7fe fc31 	bl	800072c <__aeabi_ddiv>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fdf9 	bl	8000ac8 <__aeabi_d2f>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <BME280_Humidity+0x74>)
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e003      	b.n	8001ee6 <BME280_Humidity+0x5a>
		}
	}
	else
	{
		Humidity = 0;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <BME280_Humidity+0x74>)
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
	}

	return Humidity;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <BME280_Humidity+0x74>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fa9c 	bl	8000428 <__aeabi_f2d>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
}
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200002bc 	.word	0x200002bc
 8001f00:	200004a0 	.word	0x200004a0
 8001f04:	40900000 	.word	0x40900000

08001f08 <BME280_Temperature>:

//Temperature Measurment
double BME280_Temperature(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001f0c:	f7ff fbc2 	bl	8001694 <BMEReadRaw>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d121      	bne.n	8001f5a <BME280_Temperature+0x52>
	{
		if (tRaw == 0x800000)
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <BME280_Temperature+0x70>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f1e:	d104      	bne.n	8001f2a <BME280_Temperature+0x22>
		{
			Temperature = 0; // value in case temp measurement was disabled
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <BME280_Temperature+0x74>)
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e01b      	b.n	8001f62 <BME280_Temperature+0x5a>
		}
		else
		{
			Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <BME280_Temperature+0x70>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fc00 	bl	8001734 <BME280_compensate_T_int32>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fa64 	bl	8000404 <__aeabi_i2d>
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <BME280_Temperature+0x78>)
 8001f42:	f7fe fbf3 	bl	800072c <__aeabi_ddiv>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fdbb 	bl	8000ac8 <__aeabi_d2f>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <BME280_Temperature+0x74>)
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e003      	b.n	8001f62 <BME280_Temperature+0x5a>
		}
	}
	else
	{
		Temperature = 0;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <BME280_Temperature+0x74>)
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
	}
	return Temperature;
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <BME280_Temperature+0x74>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fa5e 	bl	8000428 <__aeabi_f2d>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
}
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200002b4 	.word	0x200002b4
 8001f7c:	20000498 	.word	0x20000498
 8001f80:	40590000 	.word	0x40590000
 8001f84:	00000000 	.word	0x00000000

08001f88 <BME280_Altitude>:

float BME280_Altitude(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	PressValue = BME280_Pressure();
 8001f8c:	f7ff ff40 	bl	8001e10 <BME280_Pressure>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fd96 	bl	8000ac8 <__aeabi_d2f>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4a22      	ldr	r2, [pc, #136]	; (8002028 <BME280_Altitude+0xa0>)
 8001fa0:	6013      	str	r3, [r2, #0]
	PressValue = PressValue/100;
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <BME280_Altitude+0xa0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4921      	ldr	r1, [pc, #132]	; (800202c <BME280_Altitude+0xa4>)
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fe91 	bl	8000cd0 <__aeabi_fdiv>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <BME280_Altitude+0xa0>)
 8001fb4:	601a      	str	r2, [r3, #0]
	Altitude = 44330*(1.0-pow(PressValue/SeaLevel, 0.19029495718));
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <BME280_Altitude+0xa0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <BME280_Altitude+0xa8>)
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fe85 	bl	8000cd0 <__aeabi_fdiv>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa2d 	bl	8000428 <__aeabi_f2d>
 8001fce:	a312      	add	r3, pc, #72	; (adr r3, 8002018 <BME280_Altitude+0x90>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f008 fafa 	bl	800a5cc <pow>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	f04f 0000 	mov.w	r0, #0
 8001fe0:	4914      	ldr	r1, [pc, #80]	; (8002034 <BME280_Altitude+0xac>)
 8001fe2:	f7fe f8c1 	bl	8000168 <__aeabi_dsub>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	a30c      	add	r3, pc, #48	; (adr r3, 8002020 <BME280_Altitude+0x98>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fa70 	bl	80004d8 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fd62 	bl	8000ac8 <__aeabi_d2f>
 8002004:	4603      	mov	r3, r0
 8002006:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <BME280_Altitude+0xb0>)
 8002008:	6013      	str	r3, [r2, #0]
	return Altitude;
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <BME280_Altitude+0xb0>)
 800200c:	681b      	ldr	r3, [r3, #0]
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	f3af 8000 	nop.w
 8002018:	ccd745e4 	.word	0xccd745e4
 800201c:	3fc85b95 	.word	0x3fc85b95
 8002020:	00000000 	.word	0x00000000
 8002024:	40e5a540 	.word	0x40e5a540
 8002028:	200002c4 	.word	0x200002c4
 800202c:	42c80000 	.word	0x42c80000
 8002030:	20000000 	.word	0x20000000
 8002034:	3ff00000 	.word	0x3ff00000
 8002038:	200002c0 	.word	0x200002c0

0800203c <BME280_Kalman_Alt>:

float BME280_Kalman_Alt(double U0)
{
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	e9c7 0100 	strd	r0, r1, [r7]
	static double Q0 = 10; //initial estimated covariance
	static double P0 = 0; //initial error covariance (it must be 0)
	static double U0_hat = 0; //initial estimated state
	static double K0 = 0; //initial kalman gain

	U0 = BME280_Altitude();
 8002046:	f7ff ff9f 	bl	8001f88 <BME280_Altitude>
 800204a:	4603      	mov	r3, r0
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe f9eb 	bl	8000428 <__aeabi_f2d>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	e9c7 2300 	strd	r2, r3, [r7]
	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <BME280_Kalman_Alt+0x130>)
 800205c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002060:	4b43      	ldr	r3, [pc, #268]	; (8002170 <BME280_Kalman_Alt+0x134>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fa37 	bl	80004d8 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4614      	mov	r4, r2
 8002070:	461d      	mov	r5, r3
 8002072:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <BME280_Kalman_Alt+0x134>)
 8002074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002078:	4b3c      	ldr	r3, [pc, #240]	; (800216c <BME280_Kalman_Alt+0x130>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe fa2b 	bl	80004d8 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <BME280_Kalman_Alt+0x134>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe fa22 	bl	80004d8 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	4b35      	ldr	r3, [pc, #212]	; (8002174 <BME280_Kalman_Alt+0x138>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe f863 	bl	800016c <__adddf3>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4620      	mov	r0, r4
 80020ac:	4629      	mov	r1, r5
 80020ae:	f7fe fb3d 	bl	800072c <__aeabi_ddiv>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4930      	ldr	r1, [pc, #192]	; (8002178 <BME280_Kalman_Alt+0x13c>)
 80020b8:	e9c1 2300 	strd	r2, r3, [r1]
	U0_hat = U0_hat + K0 * (U0 - H0 * U0_hat);
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <BME280_Kalman_Alt+0x134>)
 80020be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020c2:	4b2e      	ldr	r3, [pc, #184]	; (800217c <BME280_Kalman_Alt+0x140>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe fa06 	bl	80004d8 <__aeabi_dmul>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020d4:	f7fe f848 	bl	8000168 <__aeabi_dsub>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <BME280_Kalman_Alt+0x13c>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	f7fe f9f7 	bl	80004d8 <__aeabi_dmul>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <BME280_Kalman_Alt+0x140>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	f7fe f838 	bl	800016c <__adddf3>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	491e      	ldr	r1, [pc, #120]	; (800217c <BME280_Kalman_Alt+0x140>)
 8002102:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <BME280_Kalman_Alt+0x13c>)
 8002108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <BME280_Kalman_Alt+0x134>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	f7fe f9e1 	bl	80004d8 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	f04f 0000 	mov.w	r0, #0
 800211e:	4918      	ldr	r1, [pc, #96]	; (8002180 <BME280_Kalman_Alt+0x144>)
 8002120:	f7fe f822 	bl	8000168 <__aeabi_dsub>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <BME280_Kalman_Alt+0x130>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe f9d1 	bl	80004d8 <__aeabi_dmul>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <BME280_Kalman_Alt+0x148>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe f812 	bl	800016c <__adddf3>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <BME280_Kalman_Alt+0x130>)
 800214e:	e9c1 2300 	strd	r2, r3, [r1]
	return U0_hat;
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <BME280_Kalman_Alt+0x140>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fcb4 	bl	8000ac8 <__aeabi_d2f>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bdb0      	pop	{r4, r5, r7, pc}
 800216a:	bf00      	nop
 800216c:	200002d0 	.word	0x200002d0
 8002170:	0800b8c0 	.word	0x0800b8c0
 8002174:	0800b8c8 	.word	0x0800b8c8
 8002178:	200002d8 	.word	0x200002d8
 800217c:	200002e0 	.word	0x200002e0
 8002180:	3ff00000 	.word	0x3ff00000
 8002184:	20000008 	.word	0x20000008

08002188 <BME280_Kalman_Press>:

double BME280_Kalman_Press(double U1)
{
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	e9c7 0100 	strd	r0, r1, [r7]
	static double Q1 = 10; //initial estimated covariance
	static double P1 = 0; //initial error covariance (it must be 0)
	static double U1_hat = 100000; //initial estimated state
	static double K1 = 0; //initial kalman gain

	U1 = BME280_Pressure();
 8002192:	f7ff fe3d 	bl	8001e10 <BME280_Pressure>
 8002196:	e9c7 0100 	strd	r0, r1, [r7]
	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 800219a:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <BME280_Kalman_Press+0x11c>)
 800219c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a0:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <BME280_Kalman_Press+0x120>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe f997 	bl	80004d8 <__aeabi_dmul>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4614      	mov	r4, r2
 80021b0:	461d      	mov	r5, r3
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <BME280_Kalman_Press+0x120>)
 80021b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021b8:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <BME280_Kalman_Press+0x11c>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f7fe f98b 	bl	80004d8 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <BME280_Kalman_Press+0x120>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe f982 	bl	80004d8 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	4b33      	ldr	r3, [pc, #204]	; (80022ac <BME280_Kalman_Press+0x124>)
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	f7fd ffc3 	bl	800016c <__adddf3>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4620      	mov	r0, r4
 80021ec:	4629      	mov	r1, r5
 80021ee:	f7fe fa9d 	bl	800072c <__aeabi_ddiv>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	492e      	ldr	r1, [pc, #184]	; (80022b0 <BME280_Kalman_Press+0x128>)
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
	U1_hat = U1_hat + K1 * (U1 - H1 * U1_hat);
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <BME280_Kalman_Press+0x120>)
 80021fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002202:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <BME280_Kalman_Press+0x12c>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe f966 	bl	80004d8 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002214:	f7fd ffa8 	bl	8000168 <__aeabi_dsub>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <BME280_Kalman_Press+0x128>)
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	f7fe f957 	bl	80004d8 <__aeabi_dmul>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <BME280_Kalman_Press+0x12c>)
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	f7fd ff98 	bl	800016c <__adddf3>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	491c      	ldr	r1, [pc, #112]	; (80022b4 <BME280_Kalman_Press+0x12c>)
 8002242:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <BME280_Kalman_Press+0x128>)
 8002248:	e9d3 0100 	ldrd	r0, r1, [r3]
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <BME280_Kalman_Press+0x120>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f941 	bl	80004d8 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	f04f 0000 	mov.w	r0, #0
 800225e:	4916      	ldr	r1, [pc, #88]	; (80022b8 <BME280_Kalman_Press+0x130>)
 8002260:	f7fd ff82 	bl	8000168 <__aeabi_dsub>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <BME280_Kalman_Press+0x11c>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe f931 	bl	80004d8 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <BME280_Kalman_Press+0x134>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fd ff72 	bl	800016c <__adddf3>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4905      	ldr	r1, [pc, #20]	; (80022a4 <BME280_Kalman_Press+0x11c>)
 800228e:	e9c1 2300 	strd	r2, r3, [r1]
	return U1_hat;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <BME280_Kalman_Press+0x12c>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bdb0      	pop	{r4, r5, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200002e8 	.word	0x200002e8
 80022a8:	0800b8d0 	.word	0x0800b8d0
 80022ac:	0800b8d8 	.word	0x0800b8d8
 80022b0:	200002f0 	.word	0x200002f0
 80022b4:	20000010 	.word	0x20000010
 80022b8:	3ff00000 	.word	0x3ff00000
 80022bc:	20000018 	.word	0x20000018

080022c0 <BME280_Kalman_Hum>:

double BME280_Kalman_Hum(double U2)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	e9c7 0100 	strd	r0, r1, [r7]
	static double Q2 = 10; //initial estimated covariance
	static double P2 = 0; //initial error covariance (it must be 0)
	static double U2_hat = 50; //initial estimated state
	static double K2 = 0; //initial kalman gain

	U2 = BME280_Humidity();
 80022ca:	f7ff fddf 	bl	8001e8c <BME280_Humidity>
 80022ce:	e9c7 0100 	strd	r0, r1, [r7]
	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 80022d2:	4b42      	ldr	r3, [pc, #264]	; (80023dc <BME280_Kalman_Hum+0x11c>)
 80022d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d8:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <BME280_Kalman_Hum+0x120>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	f7fe f8fb 	bl	80004d8 <__aeabi_dmul>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4614      	mov	r4, r2
 80022e8:	461d      	mov	r5, r3
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <BME280_Kalman_Hum+0x120>)
 80022ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f0:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <BME280_Kalman_Hum+0x11c>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	f7fe f8ef 	bl	80004d8 <__aeabi_dmul>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <BME280_Kalman_Hum+0x120>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe f8e6 	bl	80004d8 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <BME280_Kalman_Hum+0x124>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fd ff27 	bl	800016c <__adddf3>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4620      	mov	r0, r4
 8002324:	4629      	mov	r1, r5
 8002326:	f7fe fa01 	bl	800072c <__aeabi_ddiv>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	492e      	ldr	r1, [pc, #184]	; (80023e8 <BME280_Kalman_Hum+0x128>)
 8002330:	e9c1 2300 	strd	r2, r3, [r1]
	U2_hat = U2_hat + K2 * (U2 - H2 * U2_hat);
 8002334:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <BME280_Kalman_Hum+0x120>)
 8002336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <BME280_Kalman_Hum+0x12c>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f8ca 	bl	80004d8 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800234c:	f7fd ff0c 	bl	8000168 <__aeabi_dsub>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <BME280_Kalman_Hum+0x128>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fe f8bb 	bl	80004d8 <__aeabi_dmul>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <BME280_Kalman_Hum+0x12c>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fd fefc 	bl	800016c <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	491c      	ldr	r1, [pc, #112]	; (80023ec <BME280_Kalman_Hum+0x12c>)
 800237a:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <BME280_Kalman_Hum+0x128>)
 8002380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <BME280_Kalman_Hum+0x120>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe f8a5 	bl	80004d8 <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	f04f 0000 	mov.w	r0, #0
 8002396:	4916      	ldr	r1, [pc, #88]	; (80023f0 <BME280_Kalman_Hum+0x130>)
 8002398:	f7fd fee6 	bl	8000168 <__aeabi_dsub>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <BME280_Kalman_Hum+0x11c>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe f895 	bl	80004d8 <__aeabi_dmul>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <BME280_Kalman_Hum+0x134>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fd fed6 	bl	800016c <__adddf3>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4905      	ldr	r1, [pc, #20]	; (80023dc <BME280_Kalman_Hum+0x11c>)
 80023c6:	e9c1 2300 	strd	r2, r3, [r1]
	return U2_hat;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <BME280_Kalman_Hum+0x12c>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdb0      	pop	{r4, r5, r7, pc}
 80023da:	bf00      	nop
 80023dc:	200002f8 	.word	0x200002f8
 80023e0:	0800b8e0 	.word	0x0800b8e0
 80023e4:	0800b8e8 	.word	0x0800b8e8
 80023e8:	20000300 	.word	0x20000300
 80023ec:	20000020 	.word	0x20000020
 80023f0:	3ff00000 	.word	0x3ff00000
 80023f4:	20000028 	.word	0x20000028

080023f8 <BME280_Kalman_Temp>:

double BME280_Kalman_Temp(double U3)
{
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	e9c7 0100 	strd	r0, r1, [r7]
	static double Q3 = 10; //initial estimated covariance
	static double P3 = 0; //initial error covariance (it must be 0)
	static double U3_hat = 25; //initial estimated state
	static double K3 = 0; //initial kalman gain

	U3 = BME280_Temperature();
 8002402:	f7ff fd81 	bl	8001f08 <BME280_Temperature>
 8002406:	e9c7 0100 	strd	r0, r1, [r7]
	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <BME280_Kalman_Temp+0x11c>)
 800240c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <BME280_Kalman_Temp+0x120>)
 8002412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002416:	f7fe f85f 	bl	80004d8 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4614      	mov	r4, r2
 8002420:	461d      	mov	r5, r3
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <BME280_Kalman_Temp+0x120>)
 8002424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <BME280_Kalman_Temp+0x11c>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	f7fe f853 	bl	80004d8 <__aeabi_dmul>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <BME280_Kalman_Temp+0x120>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f84a 	bl	80004d8 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	4b33      	ldr	r3, [pc, #204]	; (800251c <BME280_Kalman_Temp+0x124>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fd fe8b 	bl	800016c <__adddf3>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4620      	mov	r0, r4
 800245c:	4629      	mov	r1, r5
 800245e:	f7fe f965 	bl	800072c <__aeabi_ddiv>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	492e      	ldr	r1, [pc, #184]	; (8002520 <BME280_Kalman_Temp+0x128>)
 8002468:	e9c1 2300 	strd	r2, r3, [r1]
	U3_hat = U3_hat + K3 * (U3 - H3 * U3_hat);
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <BME280_Kalman_Temp+0x120>)
 800246e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002472:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <BME280_Kalman_Temp+0x12c>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f82e 	bl	80004d8 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002484:	f7fd fe70 	bl	8000168 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <BME280_Kalman_Temp+0x128>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe f81f 	bl	80004d8 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <BME280_Kalman_Temp+0x12c>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fd fe60 	bl	800016c <__adddf3>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	491c      	ldr	r1, [pc, #112]	; (8002524 <BME280_Kalman_Temp+0x12c>)
 80024b2:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <BME280_Kalman_Temp+0x128>)
 80024b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024bc:	4b16      	ldr	r3, [pc, #88]	; (8002518 <BME280_Kalman_Temp+0x120>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fe f809 	bl	80004d8 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	f04f 0000 	mov.w	r0, #0
 80024ce:	4916      	ldr	r1, [pc, #88]	; (8002528 <BME280_Kalman_Temp+0x130>)
 80024d0:	f7fd fe4a 	bl	8000168 <__aeabi_dsub>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <BME280_Kalman_Temp+0x11c>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fd fff9 	bl	80004d8 <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <BME280_Kalman_Temp+0x134>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fd fe3a 	bl	800016c <__adddf3>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4905      	ldr	r1, [pc, #20]	; (8002514 <BME280_Kalman_Temp+0x11c>)
 80024fe:	e9c1 2300 	strd	r2, r3, [r1]
	return U3_hat;
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <BME280_Kalman_Temp+0x12c>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bdb0      	pop	{r4, r5, r7, pc}
 8002512:	bf00      	nop
 8002514:	20000308 	.word	0x20000308
 8002518:	0800b8f0 	.word	0x0800b8f0
 800251c:	0800b8f8 	.word	0x0800b8f8
 8002520:	20000310 	.word	0x20000310
 8002524:	20000030 	.word	0x20000030
 8002528:	3ff00000 	.word	0x3ff00000
 800252c:	20000038 	.word	0x20000038

08002530 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3371      	adds	r3, #113	; 0x71
 8002548:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800254a:	e002      	b.n	8002552 <prv_parse_number+0x22>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <prv_parse_number+0x30>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b20      	cmp	r3, #32
 800255e:	d0f5      	beq.n	800254c <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b2d      	cmp	r3, #45	; 0x2d
 8002566:	d104      	bne.n	8002572 <prv_parse_number+0x42>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <prv_parse_number+0x44>
 8002572:	2300      	movs	r3, #0
 8002574:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8002576:	e00d      	b.n	8002594 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	461a      	mov	r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	3b30      	subs	r3, #48	; 0x30
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <prv_parse_number+0x7a>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b2f      	cmp	r3, #47	; 0x2f
 80025a0:	d903      	bls.n	80025aa <prv_parse_number+0x7a>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b39      	cmp	r3, #57	; 0x39
 80025a8:	d9e6      	bls.n	8002578 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <prv_parse_number+0x86>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	425b      	negs	r3, r3
 80025b4:	e000      	b.n	80025b8 <prv_parse_number+0x88>
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3371      	adds	r3, #113	; 0x71
 80025d6:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80025d8:	e002      	b.n	80025e0 <prv_parse_float_number+0x1e>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <prv_parse_float_number+0x2c>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d0f5      	beq.n	80025da <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80025ee:	2100      	movs	r1, #0
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f005 ff85 	bl	8008500 <strtod>
 80025f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80025fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002610:	2100      	movs	r1, #0
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ffd5 	bl	80025c2 <prv_parse_float_number>
 8002618:	e9c7 0106 	strd	r0, r1, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800261c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002620:	f7fe fa0a 	bl	8000a38 <__aeabi_d2iz>
 8002624:	4603      	mov	r3, r0
 8002626:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <prv_parse_lat_long+0x8c>)
 8002628:	fb82 1203 	smull	r1, r2, r2, r3
 800262c:	1152      	asrs	r2, r2, #5
 800262e:	17db      	asrs	r3, r3, #31
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd fee6 	bl	8000404 <__aeabi_i2d>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <prv_parse_lat_long+0x90>)
 8002646:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800264a:	f7fd ff45 	bl	80004d8 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002656:	f7fd fd87 	bl	8000168 <__aeabi_dsub>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <prv_parse_lat_long+0x94>)
 8002668:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800266c:	f7fe f85e 	bl	800072c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002678:	f7fd fd78 	bl	800016c <__adddf3>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8002684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	51eb851f 	.word	0x51eb851f
 8002698:	40590000 	.word	0x40590000
 800269c:	404e0000 	.word	0x404e0000

080026a0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80026a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80026b0:	2900      	cmp	r1, #0
 80026b2:	d169      	bne.n	8002788 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3371      	adds	r3, #113	; 0x71
 80026b8:	2206      	movs	r2, #6
 80026ba:	49b6      	ldr	r1, [pc, #728]	; (8002994 <prv_parse_term+0x2f4>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f005 f901 	bl	80078c4 <strncmp>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <prv_parse_term+0x3c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3371      	adds	r3, #113	; 0x71
 80026cc:	2206      	movs	r2, #6
 80026ce:	49b2      	ldr	r1, [pc, #712]	; (8002998 <prv_parse_term+0x2f8>)
 80026d0:	4618      	mov	r0, r3
 80026d2:	f005 f8f7 	bl	80078c4 <strncmp>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d104      	bne.n	80026e6 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80026e4:	e04e      	b.n	8002784 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3371      	adds	r3, #113	; 0x71
 80026ea:	2206      	movs	r2, #6
 80026ec:	49ab      	ldr	r1, [pc, #684]	; (800299c <prv_parse_term+0x2fc>)
 80026ee:	4618      	mov	r0, r3
 80026f0:	f005 f8e8 	bl	80078c4 <strncmp>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <prv_parse_term+0x6e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3371      	adds	r3, #113	; 0x71
 80026fe:	2206      	movs	r2, #6
 8002700:	49a7      	ldr	r1, [pc, #668]	; (80029a0 <prv_parse_term+0x300>)
 8002702:	4618      	mov	r0, r3
 8002704:	f005 f8de 	bl	80078c4 <strncmp>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002716:	e035      	b.n	8002784 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3371      	adds	r3, #113	; 0x71
 800271c:	2206      	movs	r2, #6
 800271e:	49a1      	ldr	r1, [pc, #644]	; (80029a4 <prv_parse_term+0x304>)
 8002720:	4618      	mov	r0, r3
 8002722:	f005 f8cf 	bl	80078c4 <strncmp>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d009      	beq.n	8002740 <prv_parse_term+0xa0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3371      	adds	r3, #113	; 0x71
 8002730:	2206      	movs	r2, #6
 8002732:	499d      	ldr	r1, [pc, #628]	; (80029a8 <prv_parse_term+0x308>)
 8002734:	4618      	mov	r0, r3
 8002736:	f005 f8c5 	bl	80078c4 <strncmp>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2203      	movs	r2, #3
 8002744:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002748:	e01c      	b.n	8002784 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3371      	adds	r3, #113	; 0x71
 800274e:	2206      	movs	r2, #6
 8002750:	4996      	ldr	r1, [pc, #600]	; (80029ac <prv_parse_term+0x30c>)
 8002752:	4618      	mov	r0, r3
 8002754:	f005 f8b6 	bl	80078c4 <strncmp>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <prv_parse_term+0xd2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3371      	adds	r3, #113	; 0x71
 8002762:	2206      	movs	r2, #6
 8002764:	4992      	ldr	r1, [pc, #584]	; (80029b0 <prv_parse_term+0x310>)
 8002766:	4618      	mov	r0, r3
 8002768:	f005 f8ac 	bl	80078c4 <strncmp>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d104      	bne.n	800277c <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2204      	movs	r2, #4
 8002776:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800277a:	e003      	b.n	8002784 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8002784:	2301      	movs	r3, #1
 8002786:	e21f      	b.n	8002bc8 <prv_parse_term+0x528>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800278e:	2900      	cmp	r1, #0
 8002790:	f000 8219 	beq.w	8002bc6 <prv_parse_term+0x526>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800279a:	2901      	cmp	r1, #1
 800279c:	f040 80c1 	bne.w	8002922 <prv_parse_term+0x282>
        switch (gh->p.term_num) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80027a6:	3b01      	subs	r3, #1
 80027a8:	2b0a      	cmp	r3, #10
 80027aa:	f200 81ff 	bhi.w	8002bac <prv_parse_term+0x50c>
 80027ae:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <prv_parse_term+0x114>)
 80027b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b4:	080027e1 	.word	0x080027e1
 80027b8:	0800285b 	.word	0x0800285b
 80027bc:	0800286d 	.word	0x0800286d
 80027c0:	08002897 	.word	0x08002897
 80027c4:	080028a9 	.word	0x080028a9
 80027c8:	080028d3 	.word	0x080028d3
 80027cc:	080028e7 	.word	0x080028e7
 80027d0:	08002bad 	.word	0x08002bad
 80027d4:	080028fb 	.word	0x080028fb
 80027d8:	08002bad 	.word	0x08002bad
 80027dc:	0800290f 	.word	0x0800290f
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80027e6:	3b30      	subs	r3, #48	; 0x30
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	0092      	lsls	r2, r2, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80027fa:	4413      	add	r3, r2
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	3b30      	subs	r3, #48	; 0x30
 8002800:	b2da      	uxtb	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800280e:	3b30      	subs	r3, #48	; 0x30
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	4413      	add	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002822:	4413      	add	r3, r2
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3b30      	subs	r3, #48	; 0x30
 8002828:	b2da      	uxtb	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002836:	3b30      	subs	r3, #48	; 0x30
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	0092      	lsls	r2, r2, #2
 800283e:	4413      	add	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800284a:	4413      	add	r3, r2
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3b30      	subs	r3, #48	; 0x30
 8002850:	b2da      	uxtb	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8002858:	e1b5      	b.n	8002bc6 <prv_parse_term+0x526>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fed4 	bl	8002608 <prv_parse_lat_long>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                break;
 800286a:	e1ac      	b.n	8002bc6 <prv_parse_term+0x526>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002872:	2b53      	cmp	r3, #83	; 0x53
 8002874:	d005      	beq.n	8002882 <prv_parse_term+0x1e2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800287c:	2b73      	cmp	r3, #115	; 0x73
 800287e:	f040 8197 	bne.w	8002bb0 <prv_parse_term+0x510>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002888:	4690      	mov	r8, r2
 800288a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8002894:	e18c      	b.n	8002bb0 <prv_parse_term+0x510>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff feb6 	bl	8002608 <prv_parse_lat_long>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 80028a6:	e18e      	b.n	8002bc6 <prv_parse_term+0x526>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80028ae:	2b57      	cmp	r3, #87	; 0x57
 80028b0:	d005      	beq.n	80028be <prv_parse_term+0x21e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80028b8:	2b77      	cmp	r3, #119	; 0x77
 80028ba:	f040 817b 	bne.w	8002bb4 <prv_parse_term+0x514>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80028c4:	4614      	mov	r4, r2
 80028c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 80028d0:	e170      	b.n	8002bb4 <prv_parse_term+0x514>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80028d2:	2100      	movs	r1, #0
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fe2b 	bl	8002530 <prv_parse_number>
 80028da:	4603      	mov	r3, r0
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 80028e4:	e16f      	b.n	8002bc6 <prv_parse_term+0x526>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80028e6:	2100      	movs	r1, #0
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fe21 	bl	8002530 <prv_parse_number>
 80028ee:	4603      	mov	r3, r0
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 80028f8:	e165      	b.n	8002bc6 <prv_parse_term+0x526>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80028fa:	2100      	movs	r1, #0
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fe60 	bl	80025c2 <prv_parse_float_number>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 800290c:	e15b      	b.n	8002bc6 <prv_parse_term+0x526>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800290e:	2100      	movs	r1, #0
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fe56 	bl	80025c2 <prv_parse_float_number>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                break;
 8002920:	e151      	b.n	8002bc6 <prv_parse_term+0x526>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002928:	2902      	cmp	r1, #2
 800292a:	d17d      	bne.n	8002a28 <prv_parse_term+0x388>
        switch (gh->p.term_num) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002932:	3b02      	subs	r3, #2
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d85b      	bhi.n	80029f0 <prv_parse_term+0x350>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <prv_parse_term+0x2a0>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002981 	.word	0x08002981
 8002944:	080029f1 	.word	0x080029f1
 8002948:	080029f1 	.word	0x080029f1
 800294c:	080029f1 	.word	0x080029f1
 8002950:	080029f1 	.word	0x080029f1
 8002954:	080029f1 	.word	0x080029f1
 8002958:	080029f1 	.word	0x080029f1
 800295c:	080029f1 	.word	0x080029f1
 8002960:	080029f1 	.word	0x080029f1
 8002964:	080029f1 	.word	0x080029f1
 8002968:	080029f1 	.word	0x080029f1
 800296c:	080029f1 	.word	0x080029f1
 8002970:	080029f1 	.word	0x080029f1
 8002974:	080029b5 	.word	0x080029b5
 8002978:	080029c9 	.word	0x080029c9
 800297c:	080029dd 	.word	0x080029dd
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002980:	2100      	movs	r1, #0
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff fdd4 	bl	8002530 <prv_parse_number>
 8002988:	4603      	mov	r3, r0
 800298a:	b2da      	uxtb	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8002992:	e118      	b.n	8002bc6 <prv_parse_term+0x526>
 8002994:	0800b870 	.word	0x0800b870
 8002998:	0800b878 	.word	0x0800b878
 800299c:	0800b880 	.word	0x0800b880
 80029a0:	0800b888 	.word	0x0800b888
 80029a4:	0800b890 	.word	0x0800b890
 80029a8:	0800b898 	.word	0x0800b898
 80029ac:	0800b8a0 	.word	0x0800b8a0
 80029b0:	0800b8a8 	.word	0x0800b8a8
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80029b4:	2100      	movs	r1, #0
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fe03 	bl	80025c2 <prv_parse_float_number>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 80029c6:	e0fe      	b.n	8002bc6 <prv_parse_term+0x526>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80029c8:	2100      	movs	r1, #0
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fdf9 	bl	80025c2 <prv_parse_float_number>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                break;
 80029da:	e0f4      	b.n	8002bc6 <prv_parse_term+0x526>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80029dc:	2100      	movs	r1, #0
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fdef 	bl	80025c2 <prv_parse_float_number>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 80029ee:	e0ea      	b.n	8002bc6 <prv_parse_term+0x526>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	f240 80de 	bls.w	8002bb8 <prv_parse_term+0x518>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002a02:	2b0e      	cmp	r3, #14
 8002a04:	f200 80d8 	bhi.w	8002bb8 <prv_parse_term+0x518>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fd90 	bl	8002530 <prv_parse_number>
 8002a10:	4602      	mov	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002a18:	3b03      	subs	r3, #3
 8002a1a:	b2d1      	uxtb	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	460a      	mov	r2, r1
 8002a22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8002a26:	e0c7      	b.n	8002bb8 <prv_parse_term+0x518>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002a2e:	2903      	cmp	r1, #3
 8002a30:	d11b      	bne.n	8002a6a <prv_parse_term+0x3ca>
        switch (gh->p.term_num) {
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d002      	beq.n	8002a42 <prv_parse_term+0x3a2>
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d00a      	beq.n	8002a56 <prv_parse_term+0x3b6>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8002a40:	e0c1      	b.n	8002bc6 <prv_parse_term+0x526>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8002a42:	2100      	movs	r1, #0
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fd73 	bl	8002530 <prv_parse_number>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8002a54:	e0b7      	b.n	8002bc6 <prv_parse_term+0x526>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8002a56:	2100      	movs	r1, #0
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff fd69 	bl	8002530 <prv_parse_number>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002a68:	e0ad      	b.n	8002bc6 <prv_parse_term+0x526>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002a70:	2904      	cmp	r1, #4
 8002a72:	f040 80a3 	bne.w	8002bbc <prv_parse_term+0x51c>
        switch (gh->p.term_num) {
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002a7c:	3902      	subs	r1, #2
 8002a7e:	2909      	cmp	r1, #9
 8002a80:	f200 809e 	bhi.w	8002bc0 <prv_parse_term+0x520>
 8002a84:	a001      	add	r0, pc, #4	; (adr r0, 8002a8c <prv_parse_term+0x3ec>)
 8002a86:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002ab5 	.word	0x08002ab5
 8002a90:	08002bc1 	.word	0x08002bc1
 8002a94:	08002bc1 	.word	0x08002bc1
 8002a98:	08002bc1 	.word	0x08002bc1
 8002a9c:	08002bc1 	.word	0x08002bc1
 8002aa0:	08002acf 	.word	0x08002acf
 8002aa4:	08002ae3 	.word	0x08002ae3
 8002aa8:	08002af7 	.word	0x08002af7
 8002aac:	08002b71 	.word	0x08002b71
 8002ab0:	08002b85 	.word	0x08002b85
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aba:	2b41      	cmp	r3, #65	; 0x41
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002acc:	e07b      	b.n	8002bc6 <prv_parse_term+0x526>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fd76 	bl	80025c2 <prv_parse_float_number>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 8002ae0:	e071      	b.n	8002bc6 <prv_parse_term+0x526>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fd6c 	bl	80025c2 <prv_parse_float_number>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 8002af4:	e067      	b.n	8002bc6 <prv_parse_term+0x526>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002afc:	3b30      	subs	r3, #48	; 0x30
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b10:	4413      	add	r3, r2
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	3b30      	subs	r3, #48	; 0x30
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002b24:	3b30      	subs	r3, #48	; 0x30
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b38:	4413      	add	r3, r2
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3b30      	subs	r3, #48	; 0x30
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002b4c:	3b30      	subs	r3, #48	; 0x30
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	0092      	lsls	r2, r2, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002b60:	4413      	add	r3, r2
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3b30      	subs	r3, #48	; 0x30
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8002b6e:	e02a      	b.n	8002bc6 <prv_parse_term+0x526>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8002b70:	2100      	movs	r1, #0
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fd25 	bl	80025c2 <prv_parse_float_number>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                break;
 8002b82:	e020      	b.n	8002bc6 <prv_parse_term+0x526>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002b8a:	2957      	cmp	r1, #87	; 0x57
 8002b8c:	d004      	beq.n	8002b98 <prv_parse_term+0x4f8>
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002b94:	2977      	cmp	r1, #119	; 0x77
 8002b96:	d115      	bne.n	8002bc4 <prv_parse_term+0x524>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002baa:	e00b      	b.n	8002bc4 <prv_parse_term+0x524>
                break;
 8002bac:	bf00      	nop
 8002bae:	e00a      	b.n	8002bc6 <prv_parse_term+0x526>
                break;
 8002bb0:	bf00      	nop
 8002bb2:	e008      	b.n	8002bc6 <prv_parse_term+0x526>
                break;
 8002bb4:	bf00      	nop
 8002bb6:	e006      	b.n	8002bc6 <prv_parse_term+0x526>
                break;
 8002bb8:	bf00      	nop
 8002bba:	e004      	b.n	8002bc6 <prv_parse_term+0x526>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8002bbc:	bf00      	nop
 8002bbe:	e002      	b.n	8002bc6 <prv_parse_term+0x526>
                break;
 8002bc0:	bf00      	nop
 8002bc2:	e000      	b.n	8002bc6 <prv_parse_term+0x526>
                break;
 8002bc4:	bf00      	nop
    return 1;
 8002bc6:	2301      	movs	r3, #1
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bd2:	bf00      	nop

08002bd4 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002be2:	2b2f      	cmp	r3, #47	; 0x2f
 8002be4:	d90d      	bls.n	8002c02 <prv_check_crc+0x2e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002bec:	2b39      	cmp	r3, #57	; 0x39
 8002bee:	d808      	bhi.n	8002c02 <prv_check_crc+0x2e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002bf6:	3b30      	subs	r3, #48	; 0x30
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	b25a      	sxtb	r2, r3
 8002c00:	e026      	b.n	8002c50 <prv_check_crc+0x7c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c08:	2b60      	cmp	r3, #96	; 0x60
 8002c0a:	d90d      	bls.n	8002c28 <prv_check_crc+0x54>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c12:	2b7a      	cmp	r3, #122	; 0x7a
 8002c14:	d808      	bhi.n	8002c28 <prv_check_crc+0x54>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c1c:	3b57      	subs	r3, #87	; 0x57
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	b25a      	sxtb	r2, r3
 8002c26:	e013      	b.n	8002c50 <prv_check_crc+0x7c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d90d      	bls.n	8002c4e <prv_check_crc+0x7a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c38:	2b5a      	cmp	r3, #90	; 0x5a
 8002c3a:	d808      	bhi.n	8002c4e <prv_check_crc+0x7a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c42:	3b37      	subs	r3, #55	; 0x37
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	b25a      	sxtb	r2, r3
 8002c4c:	e000      	b.n	8002c50 <prv_check_crc+0x7c>
 8002c4e:	2200      	movs	r2, #0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002c56:	2b2f      	cmp	r3, #47	; 0x2f
 8002c58:	d90c      	bls.n	8002c74 <prv_check_crc+0xa0>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002c60:	2b39      	cmp	r3, #57	; 0x39
 8002c62:	d807      	bhi.n	8002c74 <prv_check_crc+0xa0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002c6a:	b25b      	sxtb	r3, r3
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	b25b      	sxtb	r3, r3
 8002c72:	e028      	b.n	8002cc6 <prv_check_crc+0xf2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002c7a:	2b60      	cmp	r3, #96	; 0x60
 8002c7c:	d90e      	bls.n	8002c9c <prv_check_crc+0xc8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002c84:	2b7a      	cmp	r3, #122	; 0x7a
 8002c86:	d809      	bhi.n	8002c9c <prv_check_crc+0xc8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002c8e:	3b57      	subs	r3, #87	; 0x57
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b25b      	sxtb	r3, r3
 8002c9a:	e014      	b.n	8002cc6 <prv_check_crc+0xf2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d90e      	bls.n	8002cc4 <prv_check_crc+0xf0>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002cac:	2b5a      	cmp	r3, #90	; 0x5a
 8002cae:	d809      	bhi.n	8002cc4 <prv_check_crc+0xf0>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002cb6:	3b37      	subs	r3, #55	; 0x37
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	b25b      	sxtb	r3, r3
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	e000      	b.n	8002cc6 <prv_check_crc+0xf2>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d136      	bne.n	8002d68 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d66:	e061      	b.n	8002e2c <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d121      	bne.n	8002db6 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	33a1      	adds	r3, #161	; 0xa1
 8002dac:	220c      	movs	r2, #12
 8002dae:	4619      	mov	r1, r3
 8002db0:	f004 fd72 	bl	8007898 <memcpy>
 8002db4:	e03a      	b.n	8002e2c <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d106      	bne.n	8002dce <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002dcc:	e02e      	b.n	8002e2c <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d129      	bne.n	8002e2c <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002e2c:	2301      	movs	r3, #1
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8002e3e:	22b0      	movs	r2, #176	; 0xb0
 8002e40:	2100      	movs	r1, #0
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f004 fd36 	bl	80078b4 <memset>
    return 1;
 8002e48:	2301      	movs	r3, #1
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002e62:	e0ad      	b.n	8002fc0 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b24      	cmp	r3, #36	; 0x24
 8002e6a:	d128      	bne.n	8002ebe <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3370      	adds	r3, #112	; 0x70
 8002e70:	2240      	movs	r2, #64	; 0x40
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 fd1d 	bl	80078b4 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e80:	2b0b      	cmp	r3, #11
 8002e82:	f200 8097 	bhi.w	8002fb4 <lwgps_process+0x162>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	440b      	add	r3, r1
 8002e96:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002ebc:	e07a      	b.n	8002fb4 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b2c      	cmp	r3, #44	; 0x2c
 8002ec4:	d11d      	bne.n	8002f02 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff fbea 	bl	80026a0 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4053      	eors	r3, r2
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002f00:	e058      	b.n	8002fb4 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b2a      	cmp	r3, #42	; 0x2a
 8002f08:	d117      	bne.n	8002f3a <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7ff fbc8 	bl	80026a0 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002f2e:	3301      	adds	r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002f38:	e03c      	b.n	8002fb4 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b0d      	cmp	r3, #13
 8002f40:	d109      	bne.n	8002f56 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7ff fe46 	bl	8002bd4 <prv_check_crc>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d032      	beq.n	8002fb4 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7ff feca 	bl	8002ce8 <prv_copy_from_tmp_memory>
 8002f54:	e02e      	b.n	8002fb4 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	4053      	eors	r3, r2
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002f7a:	2b0b      	cmp	r3, #11
 8002f7c:	d81a      	bhi.n	8002fb4 <lwgps_process+0x162>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002f84:	4619      	mov	r1, r3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002f98:	3301      	adds	r3, #1
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4413      	add	r3, r2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f47f af4e 	bne.w	8002e64 <lwgps_process+0x12>
        }
    }
    return 1;
 8002fc8:	2301      	movs	r3, #1
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <cs.1>:
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);

  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);

  unsigned char cs()
  {
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	f8c7 c004 	str.w	ip, [r7, #4]
	 int checkSum = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
	 for(int i=4; i<51; i++)
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	e00a      	b.n	8002ffe <cs.1+0x2a>
	 {
		 checkSum += buff[i];
 8002fe8:	4a0c      	ldr	r2, [pc, #48]	; (800301c <cs.1+0x48>)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4413      	add	r3, r2
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
	 for(int i=4; i<51; i++)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b32      	cmp	r3, #50	; 0x32
 8003002:	ddf1      	ble.n	8002fe8 <cs.1+0x14>
	 }
	 return (unsigned char) (checkSum % 256);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	425a      	negs	r2, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	bf58      	it	pl
 800300e:	4253      	negpl	r3, r2
 8003010:	b2db      	uxtb	r3, r3
  }
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	200004d8 	.word	0x200004d8

08003020 <main>:
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af02      	add	r7, sp, #8
int main(void)
 8003026:	f107 0310 	add.w	r3, r7, #16
 800302a:	607b      	str	r3, [r7, #4]
  SystemClock_Config();
 800302c:	f000 fa5e 	bl	80034ec <SystemClock_Config>
  MX_GPIO_Init();
 8003030:	f000 fba2 	bl	8003778 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003034:	f000 faa0 	bl	8003578 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003038:	f000 facc 	bl	80035d4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800303c:	f000 fb48 	bl	80036d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003040:	f000 fb70 	bl	8003724 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8003044:	f000 faf4 	bl	8003630 <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8003048:	4880      	ldr	r0, [pc, #512]	; (800324c <main+0x22c>)
 800304a:	f003 fb0f 	bl	800666c <HAL_TIM_Base_Start_IT>
  lwgps_init(&gps);
 800304e:	4880      	ldr	r0, [pc, #512]	; (8003250 <main+0x230>)
 8003050:	f7ff fef1 	bl	8002e36 <lwgps_init>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8003054:	2201      	movs	r2, #1
 8003056:	497f      	ldr	r1, [pc, #508]	; (8003254 <main+0x234>)
 8003058:	487f      	ldr	r0, [pc, #508]	; (8003258 <main+0x238>)
 800305a:	f003 ff9a 	bl	8006f92 <HAL_UART_Receive_IT>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800305e:	2304      	movs	r3, #4
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	2303      	movs	r3, #3
 8003068:	2201      	movs	r2, #1
 800306a:	2105      	movs	r1, #5
 800306c:	2002      	movs	r0, #2
 800306e:	f7fe fa3b 	bl	80014e8 <BME280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  acX = MPU6050_Kalman_Accel_X();
 8003072:	f000 fd95 	bl	8003ba0 <MPU6050_Kalman_Accel_X>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fd23 	bl	8000ac8 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	4a75      	ldr	r2, [pc, #468]	; (800325c <main+0x23c>)
 8003086:	6013      	str	r3, [r2, #0]
	  acY = MPU6050_Kalman_Accel_Y();
 8003088:	f000 fe28 	bl	8003cdc <MPU6050_Kalman_Accel_Y>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	f7fd fd18 	bl	8000ac8 <__aeabi_d2f>
 8003098:	4603      	mov	r3, r0
 800309a:	4a71      	ldr	r2, [pc, #452]	; (8003260 <main+0x240>)
 800309c:	6013      	str	r3, [r2, #0]
	  acZ = MPU6050_Kalman_Accel_Z();
 800309e:	f000 febb 	bl	8003e18 <MPU6050_Kalman_Accel_Z>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fd fd0d 	bl	8000ac8 <__aeabi_d2f>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4a6c      	ldr	r2, [pc, #432]	; (8003264 <main+0x244>)
 80030b2:	6013      	str	r3, [r2, #0]
	  gyX = MPU6050_Kalman_Gyro_X();
 80030b4:	f000 ff4e 	bl	8003f54 <MPU6050_Kalman_Gyro_X>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f7fd fd02 	bl	8000ac8 <__aeabi_d2f>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4a68      	ldr	r2, [pc, #416]	; (8003268 <main+0x248>)
 80030c8:	6013      	str	r3, [r2, #0]
	  gyY = MPU6050_Kalman_Gyro_X();
 80030ca:	f000 ff43 	bl	8003f54 <MPU6050_Kalman_Gyro_X>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7fd fcf7 	bl	8000ac8 <__aeabi_d2f>
 80030da:	4603      	mov	r3, r0
 80030dc:	4a63      	ldr	r2, [pc, #396]	; (800326c <main+0x24c>)
 80030de:	6013      	str	r3, [r2, #0]
	  gyZ = MPU6050_Kalman_Gyro_X();
 80030e0:	f000 ff38 	bl	8003f54 <MPU6050_Kalman_Gyro_X>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	f7fd fcec 	bl	8000ac8 <__aeabi_d2f>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4a5f      	ldr	r2, [pc, #380]	; (8003270 <main+0x250>)
 80030f4:	6013      	str	r3, [r2, #0]
	  RollAng = MPU6050_Kalman_Roll_Angle();
 80030f6:	f000 fcb3 	bl	8003a60 <MPU6050_Kalman_Roll_Angle>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a5d      	ldr	r2, [pc, #372]	; (8003274 <main+0x254>)
 80030fe:	6013      	str	r3, [r2, #0]
	  Temperature = BME280_Temperature();
 8003100:	f7fe ff02 	bl	8001f08 <BME280_Temperature>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	f7fd fcdc 	bl	8000ac8 <__aeabi_d2f>
 8003110:	4603      	mov	r3, r0
 8003112:	4a59      	ldr	r2, [pc, #356]	; (8003278 <main+0x258>)
 8003114:	6013      	str	r3, [r2, #0]
	  Pressure = BME280_Pressure();
 8003116:	f7fe fe7b 	bl	8001e10 <BME280_Pressure>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	f7fd fcd1 	bl	8000ac8 <__aeabi_d2f>
 8003126:	4603      	mov	r3, r0
 8003128:	4a54      	ldr	r2, [pc, #336]	; (800327c <main+0x25c>)
 800312a:	6013      	str	r3, [r2, #0]
	  Humidity = BME280_Humidity();
 800312c:	f7fe feae 	bl	8001e8c <BME280_Humidity>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	f7fd fcc6 	bl	8000ac8 <__aeabi_d2f>
 800313c:	4603      	mov	r3, r0
 800313e:	4a50      	ldr	r2, [pc, #320]	; (8003280 <main+0x260>)
 8003140:	6013      	str	r3, [r2, #0]
	  T = BME280_Kalman_Temp(Temperature);
 8003142:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <main+0x258>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd f96e 	bl	8000428 <__aeabi_f2d>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7ff f950 	bl	80023f8 <BME280_Kalman_Temp>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f7fd fcb2 	bl	8000ac8 <__aeabi_d2f>
 8003164:	4603      	mov	r3, r0
 8003166:	4a47      	ldr	r2, [pc, #284]	; (8003284 <main+0x264>)
 8003168:	6013      	str	r3, [r2, #0]
	  P = BME280_Kalman_Press(Pressure);
 800316a:	4b44      	ldr	r3, [pc, #272]	; (800327c <main+0x25c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f95a 	bl	8000428 <__aeabi_f2d>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f7ff f804 	bl	8002188 <BME280_Kalman_Press>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	f7fd fc9e 	bl	8000ac8 <__aeabi_d2f>
 800318c:	4603      	mov	r3, r0
 800318e:	4a3e      	ldr	r2, [pc, #248]	; (8003288 <main+0x268>)
 8003190:	6013      	str	r3, [r2, #0]
	  H = BME280_Kalman_Hum(Humidity);
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <main+0x260>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd f946 	bl	8000428 <__aeabi_f2d>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	f7ff f88c 	bl	80022c0 <BME280_Kalman_Hum>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7fd fc8a 	bl	8000ac8 <__aeabi_d2f>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4a35      	ldr	r2, [pc, #212]	; (800328c <main+0x26c>)
 80031b8:	6013      	str	r3, [r2, #0]
	  Altitude1 = BME280_Altitude();
 80031ba:	f7fe fee5 	bl	8001f88 <BME280_Altitude>
 80031be:	4603      	mov	r3, r0
 80031c0:	4a33      	ldr	r2, [pc, #204]	; (8003290 <main+0x270>)
 80031c2:	6013      	str	r3, [r2, #0]
	  Alt = BME280_Kalman_Alt(Altitude1);
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <main+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f92d 	bl	8000428 <__aeabi_f2d>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f7fe ff31 	bl	800203c <BME280_Kalman_Alt>
 80031da:	4603      	mov	r3, r0
 80031dc:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <main+0x274>)
 80031de:	6013      	str	r3, [r2, #0]
	  gpsAlt = gps.altitude;
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <main+0x230>)
 80031e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	f7fd fc6d 	bl	8000ac8 <__aeabi_d2f>
 80031ee:	4603      	mov	r3, r0
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <main+0x278>)
 80031f2:	6013      	str	r3, [r2, #0]
	  gpsLat = gps.latitude;
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <main+0x230>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	f7fd fc63 	bl	8000ac8 <__aeabi_d2f>
 8003202:	4603      	mov	r3, r0
 8003204:	4a25      	ldr	r2, [pc, #148]	; (800329c <main+0x27c>)
 8003206:	6013      	str	r3, [r2, #0]
	  gpsLong = gps.longitude;
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <main+0x230>)
 800320a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	f7fd fc59 	bl	8000ac8 <__aeabi_d2f>
 8003216:	4603      	mov	r3, r0
 8003218:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <main+0x280>)
 800321a:	6013      	str	r3, [r2, #0]

	  paket(sayac);
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <main+0x284>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	1d3a      	adds	r2, r7, #4
 8003222:	4694      	mov	ip, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f843 	bl	80032b0 <paket.0>
	  sayac = sayac+1;
 800322a:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <main+0x284>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <main+0x284>)
 8003232:	6013      	str	r3, [r2, #0]

	  HAL_UART_Transmit(&huart1, buff, 54, 500);
 8003234:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003238:	2236      	movs	r2, #54	; 0x36
 800323a:	491b      	ldr	r1, [pc, #108]	; (80032a8 <main+0x288>)
 800323c:	481b      	ldr	r0, [pc, #108]	; (80032ac <main+0x28c>)
 800323e:	f003 fe16 	bl	8006e6e <HAL_UART_Transmit>
	  HAL_Delay(500);
 8003242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003246:	f001 fa59 	bl	80046fc <HAL_Delay>
	  acX = MPU6050_Kalman_Accel_X();
 800324a:	e712      	b.n	8003072 <main+0x52>
 800324c:	200003c0 	.word	0x200003c0
 8003250:	20000518 	.word	0x20000518
 8003254:	20000660 	.word	0x20000660
 8003258:	2000044c 	.word	0x2000044c
 800325c:	200004a4 	.word	0x200004a4
 8003260:	200004a8 	.word	0x200004a8
 8003264:	200004ac 	.word	0x200004ac
 8003268:	200004b0 	.word	0x200004b0
 800326c:	200004b4 	.word	0x200004b4
 8003270:	200004b8 	.word	0x200004b8
 8003274:	20000490 	.word	0x20000490
 8003278:	20000498 	.word	0x20000498
 800327c:	2000049c 	.word	0x2000049c
 8003280:	200004a0 	.word	0x200004a0
 8003284:	200004c0 	.word	0x200004c0
 8003288:	200004c4 	.word	0x200004c4
 800328c:	200004c8 	.word	0x200004c8
 8003290:	20000494 	.word	0x20000494
 8003294:	200004bc 	.word	0x200004bc
 8003298:	200004cc 	.word	0x200004cc
 800329c:	200004d0 	.word	0x200004d0
 80032a0:	200004d4 	.word	0x200004d4
 80032a4:	20000510 	.word	0x20000510
 80032a8:	200004d8 	.word	0x200004d8
 80032ac:	20000408 	.word	0x20000408

080032b0 <paket.0>:
  {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4662      	mov	r2, ip
 80032ba:	f8c7 c000 	str.w	ip, [r7]
 	  buff[0] = 0xFF; //sabit
 80032be:	4b7e      	ldr	r3, [pc, #504]	; (80034b8 <paket.0+0x208>)
 80032c0:	21ff      	movs	r1, #255	; 0xff
 80032c2:	7019      	strb	r1, [r3, #0]
 	  buff[1] = 0xFF; //sabit
 80032c4:	4b7c      	ldr	r3, [pc, #496]	; (80034b8 <paket.0+0x208>)
 80032c6:	21ff      	movs	r1, #255	; 0xff
 80032c8:	7059      	strb	r1, [r3, #1]
 	  buff[2] = 0x54; //sabit
 80032ca:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <paket.0+0x208>)
 80032cc:	2154      	movs	r1, #84	; 0x54
 80032ce:	7099      	strb	r1, [r3, #2]
 	  buff[3] = 0x52; //sabit
 80032d0:	4b79      	ldr	r3, [pc, #484]	; (80034b8 <paket.0+0x208>)
 80032d2:	2152      	movs	r1, #82	; 0x52
 80032d4:	70d9      	strb	r1, [r3, #3]
 	  buff[4] = 0x01; //id = 1 kabul ettik
 80032d6:	4b78      	ldr	r3, [pc, #480]	; (80034b8 <paket.0+0x208>)
 80032d8:	2101      	movs	r1, #1
 80032da:	7119      	strb	r1, [r3, #4]
 	  buff[5] = sayac; //paket sayaci
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	b2d9      	uxtb	r1, r3
 80032e0:	4b75      	ldr	r3, [pc, #468]	; (80034b8 <paket.0+0x208>)
 80032e2:	7159      	strb	r1, [r3, #5]
 	  alt_donusturme.sayi = Alt;
 80032e4:	4b75      	ldr	r3, [pc, #468]	; (80034bc <paket.0+0x20c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
 	  buff[6] = alt_donusturme.array[0];
 80032ea:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80032ee:	4b72      	ldr	r3, [pc, #456]	; (80034b8 <paket.0+0x208>)
 80032f0:	7199      	strb	r1, [r3, #6]
 	  buff[7] = alt_donusturme.array[1];
 80032f2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80032f6:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <paket.0+0x208>)
 80032f8:	71d9      	strb	r1, [r3, #7]
 	  buff[8] = alt_donusturme.array[2];
 80032fa:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80032fe:	4b6e      	ldr	r3, [pc, #440]	; (80034b8 <paket.0+0x208>)
 8003300:	7219      	strb	r1, [r3, #8]
 	  buff[9] = alt_donusturme.array[3];
 8003302:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8003306:	4b6c      	ldr	r3, [pc, #432]	; (80034b8 <paket.0+0x208>)
 8003308:	7259      	strb	r1, [r3, #9]
 	  gpsAltDonusturme.sayi = gpsAlt;
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <paket.0+0x210>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
 	  buff[10] = gpsAltDonusturme.array[0];
 8003310:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003314:	4b68      	ldr	r3, [pc, #416]	; (80034b8 <paket.0+0x208>)
 8003316:	7299      	strb	r1, [r3, #10]
 	  buff[11] = gpsAltDonusturme.array[1];
 8003318:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 800331c:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <paket.0+0x208>)
 800331e:	72d9      	strb	r1, [r3, #11]
 	  buff[12] = gpsAltDonusturme.array[2];
 8003320:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8003324:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <paket.0+0x208>)
 8003326:	7319      	strb	r1, [r3, #12]
 	  buff[13] = gpsAltDonusturme.array[3];
 8003328:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 800332c:	4b62      	ldr	r3, [pc, #392]	; (80034b8 <paket.0+0x208>)
 800332e:	7359      	strb	r1, [r3, #13]
 	  gpsLatDonusturme.sayi = gpsLat;
 8003330:	4b64      	ldr	r3, [pc, #400]	; (80034c4 <paket.0+0x214>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
 	  buff[14] = gpsLatDonusturme.array[0];
 8003336:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800333a:	4b5f      	ldr	r3, [pc, #380]	; (80034b8 <paket.0+0x208>)
 800333c:	7399      	strb	r1, [r3, #14]
 	  buff[15] = gpsLatDonusturme.array[1];
 800333e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003342:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <paket.0+0x208>)
 8003344:	73d9      	strb	r1, [r3, #15]
 	  buff[16] = gpsLatDonusturme.array[2];
 8003346:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800334a:	4b5b      	ldr	r3, [pc, #364]	; (80034b8 <paket.0+0x208>)
 800334c:	7419      	strb	r1, [r3, #16]
 	  buff[17] = gpsLatDonusturme.array[3];
 800334e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003352:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <paket.0+0x208>)
 8003354:	7459      	strb	r1, [r3, #17]
 	  gpsLongDonusturme.sayi = gpsLong;
 8003356:	4b5c      	ldr	r3, [pc, #368]	; (80034c8 <paket.0+0x218>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
 	  buff[18] = gpsLongDonusturme.array[0];
 800335c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003360:	4b55      	ldr	r3, [pc, #340]	; (80034b8 <paket.0+0x208>)
 8003362:	7499      	strb	r1, [r3, #18]
 	  buff[19] = gpsLongDonusturme.array[1];
 8003364:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003368:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <paket.0+0x208>)
 800336a:	74d9      	strb	r1, [r3, #19]
 	  buff[20] = gpsLongDonusturme.array[2];
 800336c:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003370:	4b51      	ldr	r3, [pc, #324]	; (80034b8 <paket.0+0x208>)
 8003372:	7519      	strb	r1, [r3, #20]
 	  buff[21] = gpsLongDonusturme.array[3];
 8003374:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003378:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <paket.0+0x208>)
 800337a:	7559      	strb	r1, [r3, #21]
 	  AccX.sayi = acX;
 800337c:	4b53      	ldr	r3, [pc, #332]	; (80034cc <paket.0+0x21c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 	  buff[22] = AccX.array[0];
 8003382:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003386:	4b4c      	ldr	r3, [pc, #304]	; (80034b8 <paket.0+0x208>)
 8003388:	7599      	strb	r1, [r3, #22]
 	  buff[23] = AccX.array[1];
 800338a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800338e:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <paket.0+0x208>)
 8003390:	75d9      	strb	r1, [r3, #23]
 	  buff[24] = AccX.array[2];
 8003392:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003396:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <paket.0+0x208>)
 8003398:	7619      	strb	r1, [r3, #24]
 	  buff[25] = AccX.array[3];
 800339a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800339e:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <paket.0+0x208>)
 80033a0:	7659      	strb	r1, [r3, #25]
 	  AccY.sayi = acY;
 80033a2:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <paket.0+0x220>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	623b      	str	r3, [r7, #32]
 	  buff[26] = AccY.array[0];
 80033a8:	f897 1020 	ldrb.w	r1, [r7, #32]
 80033ac:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <paket.0+0x208>)
 80033ae:	7699      	strb	r1, [r3, #26]
 	  buff[27] = AccY.array[1];
 80033b0:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80033b4:	4b40      	ldr	r3, [pc, #256]	; (80034b8 <paket.0+0x208>)
 80033b6:	76d9      	strb	r1, [r3, #27]
 	  buff[28] = AccY.array[2];
 80033b8:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80033bc:	4b3e      	ldr	r3, [pc, #248]	; (80034b8 <paket.0+0x208>)
 80033be:	7719      	strb	r1, [r3, #28]
 	  buff[29] = AccY.array[3];
 80033c0:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80033c4:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <paket.0+0x208>)
 80033c6:	7759      	strb	r1, [r3, #29]
 	  AccZ.sayi = acZ;
 80033c8:	4b42      	ldr	r3, [pc, #264]	; (80034d4 <paket.0+0x224>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61fb      	str	r3, [r7, #28]
 	  buff[30] = AccZ.array[0];
 80033ce:	7f39      	ldrb	r1, [r7, #28]
 80033d0:	4b39      	ldr	r3, [pc, #228]	; (80034b8 <paket.0+0x208>)
 80033d2:	7799      	strb	r1, [r3, #30]
 	  buff[31] = AccZ.array[1];
 80033d4:	7f79      	ldrb	r1, [r7, #29]
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <paket.0+0x208>)
 80033d8:	77d9      	strb	r1, [r3, #31]
 	  buff[32] = AccZ.array[2];
 80033da:	7fb9      	ldrb	r1, [r7, #30]
 80033dc:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <paket.0+0x208>)
 80033de:	f883 1020 	strb.w	r1, [r3, #32]
 	  buff[33] = AccZ.array[3];
 80033e2:	7ff9      	ldrb	r1, [r7, #31]
 80033e4:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <paket.0+0x208>)
 80033e6:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
 	  GyroX.sayi = gyX;
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <paket.0+0x228>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61bb      	str	r3, [r7, #24]
 	  buff[34] = GyroX.array[0];
 80033f0:	7e39      	ldrb	r1, [r7, #24]
 80033f2:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <paket.0+0x208>)
 80033f4:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
 	  buff[35] = GyroX.array[1];
 80033f8:	7e79      	ldrb	r1, [r7, #25]
 80033fa:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <paket.0+0x208>)
 80033fc:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 	  buff[36] = GyroX.array[2];
 8003400:	7eb9      	ldrb	r1, [r7, #26]
 8003402:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <paket.0+0x208>)
 8003404:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
 	  buff[37] = GyroX.array[3];
 8003408:	7ef9      	ldrb	r1, [r7, #27]
 800340a:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <paket.0+0x208>)
 800340c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
 	  GyroY.sayi = gyY;
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <paket.0+0x22c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	617b      	str	r3, [r7, #20]
 	  buff[38] = GyroY.array[0];
 8003416:	7d39      	ldrb	r1, [r7, #20]
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <paket.0+0x208>)
 800341a:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
 	  buff[39] = GyroY.array[1];
 800341e:	7d79      	ldrb	r1, [r7, #21]
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <paket.0+0x208>)
 8003422:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
 	  buff[40] = GyroY.array[2];
 8003426:	7db9      	ldrb	r1, [r7, #22]
 8003428:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <paket.0+0x208>)
 800342a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
 	  buff[41] = GyroY.array[3];
 800342e:	7df9      	ldrb	r1, [r7, #23]
 8003430:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <paket.0+0x208>)
 8003432:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
 	  GyroZ.sayi = gyZ;
 8003436:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <paket.0+0x230>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	613b      	str	r3, [r7, #16]
 	  buff[42] = GyroZ.array[0];
 800343c:	7c39      	ldrb	r1, [r7, #16]
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <paket.0+0x208>)
 8003440:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
 	  buff[43] = GyroZ.array[1];
 8003444:	7c79      	ldrb	r1, [r7, #17]
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <paket.0+0x208>)
 8003448:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
 	  buff[44] = GyroZ.array[2];
 800344c:	7cb9      	ldrb	r1, [r7, #18]
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <paket.0+0x208>)
 8003450:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
 	  buff[45] = GyroZ.array[3];
 8003454:	7cf9      	ldrb	r1, [r7, #19]
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <paket.0+0x208>)
 8003458:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
 	  Aci.sayi = RollAng;
 800345c:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <paket.0+0x234>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]
 	  buff[46] = Aci.array[0];
 8003462:	7b39      	ldrb	r1, [r7, #12]
 8003464:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <paket.0+0x208>)
 8003466:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
 	  buff[47] = Aci.array[1];
 800346a:	7b79      	ldrb	r1, [r7, #13]
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <paket.0+0x208>)
 800346e:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
 	  buff[48] = Aci.array[2];
 8003472:	7bb9      	ldrb	r1, [r7, #14]
 8003474:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <paket.0+0x208>)
 8003476:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
 	  buff[49] = Aci.array[3];
 800347a:	7bf9      	ldrb	r1, [r7, #15]
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <paket.0+0x208>)
 800347e:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
 	  buff[50] = flag; //durum
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <paket.0+0x238>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b2d9      	uxtb	r1, r3
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <paket.0+0x208>)
 800348a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
 	  buff[51] = cs(); //check-sum
 800348e:	4694      	mov	ip, r2
 8003490:	f7ff fda0 	bl	8002fd4 <cs.1>
 8003494:	4603      	mov	r3, r0
 8003496:	461a      	mov	r2, r3
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <paket.0+0x208>)
 800349a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 	  buff[52] = 0x0D; //sabit
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <paket.0+0x208>)
 80034a0:	220d      	movs	r2, #13
 80034a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 	  buff[53] = 0x0A; //sabit
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <paket.0+0x208>)
 80034a8:	220a      	movs	r2, #10
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
 80034ae:	bf00      	nop
 80034b0:	3738      	adds	r7, #56	; 0x38
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200004d8 	.word	0x200004d8
 80034bc:	200004bc 	.word	0x200004bc
 80034c0:	200004cc 	.word	0x200004cc
 80034c4:	200004d0 	.word	0x200004d0
 80034c8:	200004d4 	.word	0x200004d4
 80034cc:	200004a4 	.word	0x200004a4
 80034d0:	200004a8 	.word	0x200004a8
 80034d4:	200004ac 	.word	0x200004ac
 80034d8:	200004b0 	.word	0x200004b0
 80034dc:	200004b4 	.word	0x200004b4
 80034e0:	200004b8 	.word	0x200004b8
 80034e4:	20000490 	.word	0x20000490
 80034e8:	20000068 	.word	0x20000068

080034ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b090      	sub	sp, #64	; 0x40
 80034f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034f2:	f107 0318 	add.w	r3, r7, #24
 80034f6:	2228      	movs	r2, #40	; 0x28
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 f9da 	bl	80078b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800350e:	2301      	movs	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003516:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003518:	2300      	movs	r3, #0
 800351a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800351c:	2301      	movs	r3, #1
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003520:	2302      	movs	r3, #2
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003528:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800352a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003530:	f107 0318 	add.w	r3, r7, #24
 8003534:	4618      	mov	r0, r3
 8003536:	f002 fc2f 	bl	8005d98 <HAL_RCC_OscConfig>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003540:	f000 f964 	bl	800380c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003544:	230f      	movs	r3, #15
 8003546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003548:	2302      	movs	r3, #2
 800354a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f002 fe9c 	bl	800629c <HAL_RCC_ClockConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800356a:	f000 f94f 	bl	800380c <Error_Handler>
  }
}
 800356e:	bf00      	nop
 8003570:	3740      	adds	r7, #64	; 0x40
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <MX_I2C1_Init+0x50>)
 800357e:	4a13      	ldr	r2, [pc, #76]	; (80035cc <MX_I2C1_Init+0x54>)
 8003580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <MX_I2C1_Init+0x50>)
 8003584:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <MX_I2C1_Init+0x58>)
 8003586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <MX_I2C1_Init+0x50>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <MX_I2C1_Init+0x50>)
 8003590:	2200      	movs	r2, #0
 8003592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <MX_I2C1_Init+0x50>)
 8003596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800359a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <MX_I2C1_Init+0x50>)
 800359e:	2200      	movs	r2, #0
 80035a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <MX_I2C1_Init+0x50>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035a8:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <MX_I2C1_Init+0x50>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <MX_I2C1_Init+0x50>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035b4:	4804      	ldr	r0, [pc, #16]	; (80035c8 <MX_I2C1_Init+0x50>)
 80035b6:	f001 fbef 	bl	8004d98 <HAL_I2C_Init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035c0:	f000 f924 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000318 	.word	0x20000318
 80035cc:	40005400 	.word	0x40005400
 80035d0:	000186a0 	.word	0x000186a0

080035d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80035d8:	4b12      	ldr	r3, [pc, #72]	; (8003624 <MX_I2C2_Init+0x50>)
 80035da:	4a13      	ldr	r2, [pc, #76]	; (8003628 <MX_I2C2_Init+0x54>)
 80035dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <MX_I2C2_Init+0x50>)
 80035e0:	4a12      	ldr	r2, [pc, #72]	; (800362c <MX_I2C2_Init+0x58>)
 80035e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <MX_I2C2_Init+0x50>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <MX_I2C2_Init+0x50>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <MX_I2C2_Init+0x50>)
 80035f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <MX_I2C2_Init+0x50>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <MX_I2C2_Init+0x50>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003604:	4b07      	ldr	r3, [pc, #28]	; (8003624 <MX_I2C2_Init+0x50>)
 8003606:	2200      	movs	r2, #0
 8003608:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <MX_I2C2_Init+0x50>)
 800360c:	2200      	movs	r2, #0
 800360e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003610:	4804      	ldr	r0, [pc, #16]	; (8003624 <MX_I2C2_Init+0x50>)
 8003612:	f001 fbc1 	bl	8004d98 <HAL_I2C_Init>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800361c:	f000 f8f6 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003620:	bf00      	nop
 8003622:	bd80      	pop	{r7, pc}
 8003624:	2000036c 	.word	0x2000036c
 8003628:	40005800 	.word	0x40005800
 800362c:	000186a0 	.word	0x000186a0

08003630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003636:	f107 0308 	add.w	r3, r7, #8
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003644:	463b      	mov	r3, r7
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <MX_TIM1_Init+0x98>)
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <MX_TIM1_Init+0x9c>)
 8003650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8003652:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <MX_TIM1_Init+0x98>)
 8003654:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8003658:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365a:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <MX_TIM1_Init+0x98>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <MX_TIM1_Init+0x98>)
 8003662:	2201      	movs	r2, #1
 8003664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003666:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <MX_TIM1_Init+0x98>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <MX_TIM1_Init+0x98>)
 800366e:	2200      	movs	r2, #0
 8003670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <MX_TIM1_Init+0x98>)
 8003674:	2200      	movs	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003678:	4813      	ldr	r0, [pc, #76]	; (80036c8 <MX_TIM1_Init+0x98>)
 800367a:	f002 ffa7 	bl	80065cc <HAL_TIM_Base_Init>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003684:	f000 f8c2 	bl	800380c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800368c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	4619      	mov	r1, r3
 8003694:	480c      	ldr	r0, [pc, #48]	; (80036c8 <MX_TIM1_Init+0x98>)
 8003696:	f003 f943 	bl	8006920 <HAL_TIM_ConfigClockSource>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80036a0:	f000 f8b4 	bl	800380c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036a4:	2320      	movs	r3, #32
 80036a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036ac:	463b      	mov	r3, r7
 80036ae:	4619      	mov	r1, r3
 80036b0:	4805      	ldr	r0, [pc, #20]	; (80036c8 <MX_TIM1_Init+0x98>)
 80036b2:	f003 fb1f 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80036bc:	f000 f8a6 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80036c0:	bf00      	nop
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	200003c0 	.word	0x200003c0
 80036cc:	40012c00 	.word	0x40012c00

080036d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <MX_USART1_UART_Init+0x4c>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <MX_USART1_UART_Init+0x50>)
 80036d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <MX_USART1_UART_Init+0x4c>)
 80036dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <MX_USART1_UART_Init+0x4c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <MX_USART1_UART_Init+0x4c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <MX_USART1_UART_Init+0x4c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <MX_USART1_UART_Init+0x4c>)
 80036f6:	220c      	movs	r2, #12
 80036f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <MX_USART1_UART_Init+0x4c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <MX_USART1_UART_Init+0x4c>)
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003706:	4805      	ldr	r0, [pc, #20]	; (800371c <MX_USART1_UART_Init+0x4c>)
 8003708:	f003 fb64 	bl	8006dd4 <HAL_UART_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003712:	f000 f87b 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000408 	.word	0x20000408
 8003720:	40013800 	.word	0x40013800

08003724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <MX_USART2_UART_Init+0x50>)
 800372c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003730:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 800374a:	220c      	movs	r2, #12
 800374c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003756:	2200      	movs	r2, #0
 8003758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800375a:	4805      	ldr	r0, [pc, #20]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 800375c:	f003 fb3a 	bl	8006dd4 <HAL_UART_Init>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003766:	f000 f851 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	2000044c 	.word	0x2000044c
 8003774:	40004400 	.word	0x40004400

08003778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377e:	f107 0310 	add.w	r3, r7, #16
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	609a      	str	r2, [r3, #8]
 800378a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <MX_GPIO_Init+0x8c>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <MX_GPIO_Init+0x8c>)
 8003792:	f043 0320 	orr.w	r3, r3, #32
 8003796:	6193      	str	r3, [r2, #24]
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <MX_GPIO_Init+0x8c>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <MX_GPIO_Init+0x8c>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	4a16      	ldr	r2, [pc, #88]	; (8003804 <MX_GPIO_Init+0x8c>)
 80037aa:	f043 0304 	orr.w	r3, r3, #4
 80037ae:	6193      	str	r3, [r2, #24]
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <MX_GPIO_Init+0x8c>)
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <MX_GPIO_Init+0x8c>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	4a10      	ldr	r2, [pc, #64]	; (8003804 <MX_GPIO_Init+0x8c>)
 80037c2:	f043 0308 	orr.w	r3, r3, #8
 80037c6:	6193      	str	r3, [r2, #24]
 80037c8:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <MX_GPIO_Init+0x8c>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, first_Pin|second_Pin, GPIO_PIN_RESET);
 80037d4:	2200      	movs	r2, #0
 80037d6:	2160      	movs	r1, #96	; 0x60
 80037d8:	480b      	ldr	r0, [pc, #44]	; (8003808 <MX_GPIO_Init+0x90>)
 80037da:	f001 fac5 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : first_Pin second_Pin */
  GPIO_InitStruct.Pin = first_Pin|second_Pin;
 80037de:	2360      	movs	r3, #96	; 0x60
 80037e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e2:	2301      	movs	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2302      	movs	r3, #2
 80037ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ee:	f107 0310 	add.w	r3, r7, #16
 80037f2:	4619      	mov	r1, r3
 80037f4:	4804      	ldr	r0, [pc, #16]	; (8003808 <MX_GPIO_Init+0x90>)
 80037f6:	f001 f933 	bl	8004a60 <HAL_GPIO_Init>

}
 80037fa:	bf00      	nop
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	40010800 	.word	0x40010800

0800380c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003810:	b672      	cpsid	i
}
 8003812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003814:	e7fe      	b.n	8003814 <Error_Handler+0x8>
	...

08003818 <MPU6050_Accel_Config>:

	return Temperature1;
}

void MPU6050_Accel_Config(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af04      	add	r7, sp, #16
	uint8_t Accel_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Accel_Data, 6, 1000);
 800381e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003822:	9302      	str	r3, [sp, #8]
 8003824:	2306      	movs	r3, #6
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	463b      	mov	r3, r7
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2301      	movs	r3, #1
 800382e:	223b      	movs	r2, #59	; 0x3b
 8003830:	21d0      	movs	r1, #208	; 0xd0
 8003832:	4811      	ldr	r0, [pc, #68]	; (8003878 <MPU6050_Accel_Config+0x60>)
 8003834:	f001 fcee 	bl	8005214 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Accel_Data[0] << 8 | Accel_Data [1]);
 8003838:	783b      	ldrb	r3, [r7, #0]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	b21a      	sxth	r2, r3
 800383e:	787b      	ldrb	r3, [r7, #1]
 8003840:	b21b      	sxth	r3, r3
 8003842:	4313      	orrs	r3, r2
 8003844:	b21a      	sxth	r2, r3
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <MPU6050_Accel_Config+0x64>)
 8003848:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Accel_Data[2] << 8 | Accel_Data [3]);
 800384a:	78bb      	ldrb	r3, [r7, #2]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	b21a      	sxth	r2, r3
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	b21b      	sxth	r3, r3
 8003854:	4313      	orrs	r3, r2
 8003856:	b21a      	sxth	r2, r3
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <MPU6050_Accel_Config+0x68>)
 800385a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Accel_Data[4] << 8 | Accel_Data [5]);
 800385c:	793b      	ldrb	r3, [r7, #4]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	b21a      	sxth	r2, r3
 8003862:	797b      	ldrb	r3, [r7, #5]
 8003864:	b21b      	sxth	r3, r3
 8003866:	4313      	orrs	r3, r2
 8003868:	b21a      	sxth	r2, r3
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <MPU6050_Accel_Config+0x6c>)
 800386c:	801a      	strh	r2, [r3, #0]
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000318 	.word	0x20000318
 800387c:	200005d8 	.word	0x200005d8
 8003880:	200005da 	.word	0x200005da
 8003884:	200005dc 	.word	0x200005dc

08003888 <MPU6050_Read_Accel_X>:

float MPU6050_Read_Accel_X(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 800388c:	f7ff ffc4 	bl	8003818 <MPU6050_Accel_Config>
	Ax = Accel_X_RAW/16384.0;
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <MPU6050_Read_Accel_X+0x38>)
 8003892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fc fdb4 	bl	8000404 <__aeabi_i2d>
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <MPU6050_Read_Accel_X+0x3c>)
 80038a2:	f7fc ff43 	bl	800072c <__aeabi_ddiv>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7fd f90b 	bl	8000ac8 <__aeabi_d2f>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <MPU6050_Read_Accel_X+0x40>)
 80038b6:	6013      	str	r3, [r2, #0]
	return Ax;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <MPU6050_Read_Accel_X+0x40>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	200005d8 	.word	0x200005d8
 80038c4:	40d00000 	.word	0x40d00000
 80038c8:	200005c8 	.word	0x200005c8

080038cc <MPU6050_Read_Accel_Y>:

float MPU6050_Read_Accel_Y (void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 80038d0:	f7ff ffa2 	bl	8003818 <MPU6050_Accel_Config>
	Ay = Accel_Y_RAW/16384.0;
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <MPU6050_Read_Accel_Y+0x38>)
 80038d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fd92 	bl	8000404 <__aeabi_i2d>
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	4b08      	ldr	r3, [pc, #32]	; (8003908 <MPU6050_Read_Accel_Y+0x3c>)
 80038e6:	f7fc ff21 	bl	800072c <__aeabi_ddiv>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	f7fd f8e9 	bl	8000ac8 <__aeabi_d2f>
 80038f6:	4603      	mov	r3, r0
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <MPU6050_Read_Accel_Y+0x40>)
 80038fa:	6013      	str	r3, [r2, #0]
	return Ay;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <MPU6050_Read_Accel_Y+0x40>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200005da 	.word	0x200005da
 8003908:	40d00000 	.word	0x40d00000
 800390c:	200005cc 	.word	0x200005cc

08003910 <MPU6050_Read_Accel_Z>:

float MPU6050_Read_Accel_Z (void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8003914:	f7ff ff80 	bl	8003818 <MPU6050_Accel_Config>
	Az = Accel_Z_RAW/16384.0;
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <MPU6050_Read_Accel_Z+0x38>)
 800391a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fd70 	bl	8000404 <__aeabi_i2d>
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <MPU6050_Read_Accel_Z+0x3c>)
 800392a:	f7fc feff 	bl	800072c <__aeabi_ddiv>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	f7fd f8c7 	bl	8000ac8 <__aeabi_d2f>
 800393a:	4603      	mov	r3, r0
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <MPU6050_Read_Accel_Z+0x40>)
 800393e:	6013      	str	r3, [r2, #0]
	return Az;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <MPU6050_Read_Accel_Z+0x40>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200005dc 	.word	0x200005dc
 800394c:	40d00000 	.word	0x40d00000
 8003950:	200005d0 	.word	0x200005d0

08003954 <MPU6050_Gyro_Config>:

void MPU6050_Gyro_Config(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af04      	add	r7, sp, #16
	uint8_t Gyro_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Gyro_Data, 6, 1000);
 800395a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800395e:	9302      	str	r3, [sp, #8]
 8003960:	2306      	movs	r3, #6
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	463b      	mov	r3, r7
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	2301      	movs	r3, #1
 800396a:	2243      	movs	r2, #67	; 0x43
 800396c:	21d0      	movs	r1, #208	; 0xd0
 800396e:	4811      	ldr	r0, [pc, #68]	; (80039b4 <MPU6050_Gyro_Config+0x60>)
 8003970:	f001 fc50 	bl	8005214 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Gyro_Data[0] << 8 | Gyro_Data [1]);
 8003974:	783b      	ldrb	r3, [r7, #0]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	b21a      	sxth	r2, r3
 800397a:	787b      	ldrb	r3, [r7, #1]
 800397c:	b21b      	sxth	r3, r3
 800397e:	4313      	orrs	r3, r2
 8003980:	b21a      	sxth	r2, r3
 8003982:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <MPU6050_Gyro_Config+0x64>)
 8003984:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Gyro_Data[2] << 8 | Gyro_Data [3]);
 8003986:	78bb      	ldrb	r3, [r7, #2]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	b21a      	sxth	r2, r3
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	b21b      	sxth	r3, r3
 8003990:	4313      	orrs	r3, r2
 8003992:	b21a      	sxth	r2, r3
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <MPU6050_Gyro_Config+0x68>)
 8003996:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Gyro_Data[4] << 8 | Gyro_Data [5]);
 8003998:	793b      	ldrb	r3, [r7, #4]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	b21a      	sxth	r2, r3
 800399e:	797b      	ldrb	r3, [r7, #5]
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	4313      	orrs	r3, r2
 80039a4:	b21a      	sxth	r2, r3
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <MPU6050_Gyro_Config+0x6c>)
 80039a8:	801a      	strh	r2, [r3, #0]
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000318 	.word	0x20000318
 80039b8:	200005de 	.word	0x200005de
 80039bc:	200005e0 	.word	0x200005e0
 80039c0:	200005e2 	.word	0x200005e2
 80039c4:	00000000 	.word	0x00000000

080039c8 <MPU6050_Read_Gyro_X>:

float MPU6050_Read_Gyro_X (void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
	MPU6050_Gyro_Config();
 80039cc:	f7ff ffc2 	bl	8003954 <MPU6050_Gyro_Config>
	Gx = Gyro_X_RAW/131.0;
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <MPU6050_Read_Gyro_X+0x40>)
 80039d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fd14 	bl	8000404 <__aeabi_i2d>
 80039dc:	a308      	add	r3, pc, #32	; (adr r3, 8003a00 <MPU6050_Read_Gyro_X+0x38>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	f7fc fea3 	bl	800072c <__aeabi_ddiv>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fd f86b 	bl	8000ac8 <__aeabi_d2f>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <MPU6050_Read_Gyro_X+0x44>)
 80039f6:	6013      	str	r3, [r2, #0]
	return Gx;
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <MPU6050_Read_Gyro_X+0x44>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	00000000 	.word	0x00000000
 8003a04:	40606000 	.word	0x40606000
 8003a08:	200005de 	.word	0x200005de
 8003a0c:	200005d4 	.word	0x200005d4

08003a10 <MPU6050_Roll_Angle>:
	Gz = Gyro_Z_RAW/131.0;
	return Gz;
}

float MPU6050_Roll_Angle(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
	double AccelY = MPU6050_Kalman_Accel_Y();
 8003a16:	f000 f961 	bl	8003cdc <MPU6050_Kalman_Accel_Y>
 8003a1a:	e9c7 0104 	strd	r0, r1, [r7, #16]
	double AccelZ = MPU6050_Kalman_Accel_Z();
 8003a1e:	f000 f9fb 	bl	8003e18 <MPU6050_Kalman_Accel_Z>
 8003a22:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float Roll = 0;
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	607b      	str	r3, [r7, #4]
	Roll = atan2(AccelY, AccelZ) * 180;
 8003a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a34:	f006 fdc8 	bl	800a5c8 <atan2>
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <MPU6050_Roll_Angle+0x4c>)
 8003a3e:	f7fc fd4b 	bl	80004d8 <__aeabi_dmul>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f83d 	bl	8000ac8 <__aeabi_d2f>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	607b      	str	r3, [r7, #4]
	return Roll;
 8003a52:	687b      	ldr	r3, [r7, #4]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40668000 	.word	0x40668000

08003a60 <MPU6050_Kalman_Roll_Angle>:

float MPU6050_Kalman_Roll_Angle (void)
{
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
	float RollAng_U = MPU6050_Roll_Angle();
 8003a66:	f7ff ffd3 	bl	8003a10 <MPU6050_Roll_Angle>
 8003a6a:	6078      	str	r0, [r7, #4]

	static double RollAng_U_hat = 0; //initial estimated state

	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8003a6c:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <MPU6050_Kalman_Roll_Angle+0x128>)
 8003a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x12c>)
 8003a78:	f7fc fd2e 	bl	80004d8 <__aeabi_dmul>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4614      	mov	r4, r2
 8003a82:	461d      	mov	r5, r3
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	4940      	ldr	r1, [pc, #256]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x12c>)
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <MPU6050_Kalman_Roll_Angle+0x128>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f7fc fd22 	bl	80004d8 <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x12c>)
 8003aa2:	f7fc fd19 	bl	80004d8 <__aeabi_dmul>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <MPU6050_Kalman_Roll_Angle+0x130>)
 8003ab4:	f7fc fb5a 	bl	800016c <__adddf3>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4620      	mov	r0, r4
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f7fc fe34 	bl	800072c <__aeabi_ddiv>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4932      	ldr	r1, [pc, #200]	; (8003b94 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003aca:	e9c1 2300 	strd	r2, r3, [r1]
	RollAng_U_hat = RollAng_U_hat + K0 * (RollAng_U - H0 * RollAng_U_hat);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc fcaa 	bl	8000428 <__aeabi_f2d>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	460d      	mov	r5, r1
 8003ad8:	f04f 0000 	mov.w	r0, #0
 8003adc:	492b      	ldr	r1, [pc, #172]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x12c>)
 8003ade:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <MPU6050_Kalman_Roll_Angle+0x138>)
 8003ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae4:	f7fc fcf8 	bl	80004d8 <__aeabi_dmul>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4620      	mov	r0, r4
 8003aee:	4629      	mov	r1, r5
 8003af0:	f7fc fb3a 	bl	8000168 <__aeabi_dsub>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fce9 	bl	80004d8 <__aeabi_dmul>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <MPU6050_Kalman_Roll_Angle+0x138>)
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f7fc fb2a 	bl	800016c <__adddf3>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	491e      	ldr	r1, [pc, #120]	; (8003b98 <MPU6050_Kalman_Roll_Angle+0x138>)
 8003b1e:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8003b22:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x12c>)
 8003b2e:	f7fc fcd3 	bl	80004d8 <__aeabi_dmul>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	f04f 0000 	mov.w	r0, #0
 8003b3a:	4914      	ldr	r1, [pc, #80]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x12c>)
 8003b3c:	f7fc fb14 	bl	8000168 <__aeabi_dsub>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <MPU6050_Kalman_Roll_Angle+0x128>)
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f7fc fcc3 	bl	80004d8 <__aeabi_dmul>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f7fc fb04 	bl	800016c <__adddf3>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4907      	ldr	r1, [pc, #28]	; (8003b88 <MPU6050_Kalman_Roll_Angle+0x128>)
 8003b6a:	e9c1 2300 	strd	r2, r3, [r1]

	return RollAng_U_hat;
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <MPU6050_Kalman_Roll_Angle+0x138>)
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	f7fc ffa6 	bl	8000ac8 <__aeabi_d2f>
 8003b7c:	4603      	mov	r3, r0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bdb0      	pop	{r4, r5, r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200005e8 	.word	0x200005e8
 8003b8c:	3ff00000 	.word	0x3ff00000
 8003b90:	40440000 	.word	0x40440000
 8003b94:	200005f0 	.word	0x200005f0
 8003b98:	20000638 	.word	0x20000638
 8003b9c:	20000040 	.word	0x20000040

08003ba0 <MPU6050_Kalman_Accel_X>:

double MPU6050_Kalman_Accel_X (void)
{
 8003ba0:	b5b0      	push	{r4, r5, r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
	double Accel_X_U = MPU6050_Read_Accel_X();
 8003ba6:	f7ff fe6f 	bl	8003888 <MPU6050_Read_Accel_X>
 8003baa:	4603      	mov	r3, r0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fc fc3b 	bl	8000428 <__aeabi_f2d>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_X_U_hat = 0; //initial estimated state

	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8003bba:	4b42      	ldr	r3, [pc, #264]	; (8003cc4 <MPU6050_Kalman_Accel_X+0x124>)
 8003bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	4b40      	ldr	r3, [pc, #256]	; (8003cc8 <MPU6050_Kalman_Accel_X+0x128>)
 8003bc6:	f7fc fc87 	bl	80004d8 <__aeabi_dmul>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4614      	mov	r4, r2
 8003bd0:	461d      	mov	r5, r3
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	493c      	ldr	r1, [pc, #240]	; (8003cc8 <MPU6050_Kalman_Accel_X+0x128>)
 8003bd8:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <MPU6050_Kalman_Accel_X+0x124>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f7fc fc7b 	bl	80004d8 <__aeabi_dmul>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <MPU6050_Kalman_Accel_X+0x128>)
 8003bf0:	f7fc fc72 	bl	80004d8 <__aeabi_dmul>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <MPU6050_Kalman_Accel_X+0x12c>)
 8003c02:	f7fc fab3 	bl	800016c <__adddf3>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f7fc fd8d 	bl	800072c <__aeabi_ddiv>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	492e      	ldr	r1, [pc, #184]	; (8003cd0 <MPU6050_Kalman_Accel_X+0x130>)
 8003c18:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_X_U_hat = Accel_X_U_hat + K1 * (Accel_X_U - H1 * Accel_X_U_hat);
 8003c1c:	f04f 0000 	mov.w	r0, #0
 8003c20:	4929      	ldr	r1, [pc, #164]	; (8003cc8 <MPU6050_Kalman_Accel_X+0x128>)
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x134>)
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f7fc fc56 	bl	80004d8 <__aeabi_dmul>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c34:	f7fc fa98 	bl	8000168 <__aeabi_dsub>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <MPU6050_Kalman_Accel_X+0x130>)
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f7fc fc47 	bl	80004d8 <__aeabi_dmul>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x134>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f7fc fa88 	bl	800016c <__adddf3>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	491c      	ldr	r1, [pc, #112]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x134>)
 8003c62:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <MPU6050_Kalman_Accel_X+0x130>)
 8003c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <MPU6050_Kalman_Accel_X+0x128>)
 8003c72:	f7fc fc31 	bl	80004d8 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	f04f 0000 	mov.w	r0, #0
 8003c7e:	4912      	ldr	r1, [pc, #72]	; (8003cc8 <MPU6050_Kalman_Accel_X+0x128>)
 8003c80:	f7fc fa72 	bl	8000168 <__aeabi_dsub>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <MPU6050_Kalman_Accel_X+0x124>)
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f7fc fc21 	bl	80004d8 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <MPU6050_Kalman_Accel_X+0x138>)
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f7fc fa62 	bl	800016c <__adddf3>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4905      	ldr	r1, [pc, #20]	; (8003cc4 <MPU6050_Kalman_Accel_X+0x124>)
 8003cae:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_X_U_hat;
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x134>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	200005f8 	.word	0x200005f8
 8003cc8:	3ff00000 	.word	0x3ff00000
 8003ccc:	40440000 	.word	0x40440000
 8003cd0:	20000600 	.word	0x20000600
 8003cd4:	20000640 	.word	0x20000640
 8003cd8:	20000048 	.word	0x20000048

08003cdc <MPU6050_Kalman_Accel_Y>:

double MPU6050_Kalman_Accel_Y (void)
{
 8003cdc:	b5b0      	push	{r4, r5, r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
	double Accel_Y_U = MPU6050_Read_Accel_Y();
 8003ce2:	f7ff fdf3 	bl	80038cc <MPU6050_Read_Accel_Y>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fc fb9d 	bl	8000428 <__aeabi_f2d>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Y_U_hat = 0; //initial estimated state

	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 8003cf6:	4b42      	ldr	r3, [pc, #264]	; (8003e00 <MPU6050_Kalman_Accel_Y+0x124>)
 8003cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	4b40      	ldr	r3, [pc, #256]	; (8003e04 <MPU6050_Kalman_Accel_Y+0x128>)
 8003d02:	f7fc fbe9 	bl	80004d8 <__aeabi_dmul>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	461d      	mov	r5, r3
 8003d0e:	f04f 0000 	mov.w	r0, #0
 8003d12:	493c      	ldr	r1, [pc, #240]	; (8003e04 <MPU6050_Kalman_Accel_Y+0x128>)
 8003d14:	4b3a      	ldr	r3, [pc, #232]	; (8003e00 <MPU6050_Kalman_Accel_Y+0x124>)
 8003d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1a:	f7fc fbdd 	bl	80004d8 <__aeabi_dmul>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <MPU6050_Kalman_Accel_Y+0x128>)
 8003d2c:	f7fc fbd4 	bl	80004d8 <__aeabi_dmul>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	4b32      	ldr	r3, [pc, #200]	; (8003e08 <MPU6050_Kalman_Accel_Y+0x12c>)
 8003d3e:	f7fc fa15 	bl	800016c <__adddf3>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4620      	mov	r0, r4
 8003d48:	4629      	mov	r1, r5
 8003d4a:	f7fc fcef 	bl	800072c <__aeabi_ddiv>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	492e      	ldr	r1, [pc, #184]	; (8003e0c <MPU6050_Kalman_Accel_Y+0x130>)
 8003d54:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Y_U_hat = Accel_Y_U_hat + K2 * (Accel_Y_U - H2 * Accel_Y_U_hat);
 8003d58:	f04f 0000 	mov.w	r0, #0
 8003d5c:	4929      	ldr	r1, [pc, #164]	; (8003e04 <MPU6050_Kalman_Accel_Y+0x128>)
 8003d5e:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <MPU6050_Kalman_Accel_Y+0x134>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fbb8 	bl	80004d8 <__aeabi_dmul>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d70:	f7fc f9fa 	bl	8000168 <__aeabi_dsub>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4b23      	ldr	r3, [pc, #140]	; (8003e0c <MPU6050_Kalman_Accel_Y+0x130>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f7fc fba9 	bl	80004d8 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <MPU6050_Kalman_Accel_Y+0x134>)
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	f7fc f9ea 	bl	800016c <__adddf3>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	491c      	ldr	r1, [pc, #112]	; (8003e10 <MPU6050_Kalman_Accel_Y+0x134>)
 8003d9e:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 8003da2:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <MPU6050_Kalman_Accel_Y+0x130>)
 8003da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <MPU6050_Kalman_Accel_Y+0x128>)
 8003dae:	f7fc fb93 	bl	80004d8 <__aeabi_dmul>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	f04f 0000 	mov.w	r0, #0
 8003dba:	4912      	ldr	r1, [pc, #72]	; (8003e04 <MPU6050_Kalman_Accel_Y+0x128>)
 8003dbc:	f7fc f9d4 	bl	8000168 <__aeabi_dsub>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <MPU6050_Kalman_Accel_Y+0x124>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f7fc fb83 	bl	80004d8 <__aeabi_dmul>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <MPU6050_Kalman_Accel_Y+0x138>)
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f7fc f9c4 	bl	800016c <__adddf3>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4905      	ldr	r1, [pc, #20]	; (8003e00 <MPU6050_Kalman_Accel_Y+0x124>)
 8003dea:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Y_U_hat;
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <MPU6050_Kalman_Accel_Y+0x134>)
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000608 	.word	0x20000608
 8003e04:	3ff00000 	.word	0x3ff00000
 8003e08:	40440000 	.word	0x40440000
 8003e0c:	20000610 	.word	0x20000610
 8003e10:	20000648 	.word	0x20000648
 8003e14:	20000050 	.word	0x20000050

08003e18 <MPU6050_Kalman_Accel_Z>:

double MPU6050_Kalman_Accel_Z (void)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	double Accel_Z_U = MPU6050_Read_Accel_Z();
 8003e1e:	f7ff fd77 	bl	8003910 <MPU6050_Read_Accel_Z>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc faff 	bl	8000428 <__aeabi_f2d>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Z_U_hat = 0; //initial estimated state

	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8003e32:	4b42      	ldr	r3, [pc, #264]	; (8003f3c <MPU6050_Kalman_Accel_Z+0x124>)
 8003e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <MPU6050_Kalman_Accel_Z+0x128>)
 8003e3e:	f7fc fb4b 	bl	80004d8 <__aeabi_dmul>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4614      	mov	r4, r2
 8003e48:	461d      	mov	r5, r3
 8003e4a:	f04f 0000 	mov.w	r0, #0
 8003e4e:	493c      	ldr	r1, [pc, #240]	; (8003f40 <MPU6050_Kalman_Accel_Z+0x128>)
 8003e50:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <MPU6050_Kalman_Accel_Z+0x124>)
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	f7fc fb3f 	bl	80004d8 <__aeabi_dmul>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <MPU6050_Kalman_Accel_Z+0x128>)
 8003e68:	f7fc fb36 	bl	80004d8 <__aeabi_dmul>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003e7a:	f7fc f977 	bl	800016c <__adddf3>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4620      	mov	r0, r4
 8003e84:	4629      	mov	r1, r5
 8003e86:	f7fc fc51 	bl	800072c <__aeabi_ddiv>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	492e      	ldr	r1, [pc, #184]	; (8003f48 <MPU6050_Kalman_Accel_Z+0x130>)
 8003e90:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Z_U_hat = Accel_Z_U_hat + K3 * (Accel_Z_U - H3 * Accel_Z_U_hat);
 8003e94:	f04f 0000 	mov.w	r0, #0
 8003e98:	4929      	ldr	r1, [pc, #164]	; (8003f40 <MPU6050_Kalman_Accel_Z+0x128>)
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <MPU6050_Kalman_Accel_Z+0x134>)
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f7fc fb1a 	bl	80004d8 <__aeabi_dmul>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eac:	f7fc f95c 	bl	8000168 <__aeabi_dsub>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <MPU6050_Kalman_Accel_Z+0x130>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f7fc fb0b 	bl	80004d8 <__aeabi_dmul>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <MPU6050_Kalman_Accel_Z+0x134>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f7fc f94c 	bl	800016c <__adddf3>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	491c      	ldr	r1, [pc, #112]	; (8003f4c <MPU6050_Kalman_Accel_Z+0x134>)
 8003eda:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <MPU6050_Kalman_Accel_Z+0x130>)
 8003ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <MPU6050_Kalman_Accel_Z+0x128>)
 8003eea:	f7fc faf5 	bl	80004d8 <__aeabi_dmul>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	4912      	ldr	r1, [pc, #72]	; (8003f40 <MPU6050_Kalman_Accel_Z+0x128>)
 8003ef8:	f7fc f936 	bl	8000168 <__aeabi_dsub>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <MPU6050_Kalman_Accel_Z+0x124>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f7fc fae5 	bl	80004d8 <__aeabi_dmul>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <MPU6050_Kalman_Accel_Z+0x138>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc f926 	bl	800016c <__adddf3>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4905      	ldr	r1, [pc, #20]	; (8003f3c <MPU6050_Kalman_Accel_Z+0x124>)
 8003f26:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Z_U_hat;
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <MPU6050_Kalman_Accel_Z+0x134>)
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000618 	.word	0x20000618
 8003f40:	3ff00000 	.word	0x3ff00000
 8003f44:	40440000 	.word	0x40440000
 8003f48:	20000620 	.word	0x20000620
 8003f4c:	20000650 	.word	0x20000650
 8003f50:	20000058 	.word	0x20000058

08003f54 <MPU6050_Kalman_Gyro_X>:

double MPU6050_Kalman_Gyro_X (void)
{
 8003f54:	b5b0      	push	{r4, r5, r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
	double Gyro_X_U = MPU6050_Read_Gyro_X();
 8003f5a:	f7ff fd35 	bl	80039c8 <MPU6050_Read_Gyro_X>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc fa61 	bl	8000428 <__aeabi_f2d>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	e9c7 2300 	strd	r2, r3, [r7]

	static double Gyro_X_U_hat = 0; //initial estimated state

	K4 = P4 * H4 / (H4 * P4 * H4 + R4);
 8003f6e:	4b42      	ldr	r3, [pc, #264]	; (8004078 <MPU6050_Kalman_Gyro_X+0x124>)
 8003f70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	4b40      	ldr	r3, [pc, #256]	; (800407c <MPU6050_Kalman_Gyro_X+0x128>)
 8003f7a:	f7fc faad 	bl	80004d8 <__aeabi_dmul>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4614      	mov	r4, r2
 8003f84:	461d      	mov	r5, r3
 8003f86:	f04f 0000 	mov.w	r0, #0
 8003f8a:	493c      	ldr	r1, [pc, #240]	; (800407c <MPU6050_Kalman_Gyro_X+0x128>)
 8003f8c:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <MPU6050_Kalman_Gyro_X+0x124>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f7fc faa1 	bl	80004d8 <__aeabi_dmul>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <MPU6050_Kalman_Gyro_X+0x128>)
 8003fa4:	f7fc fa98 	bl	80004d8 <__aeabi_dmul>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <MPU6050_Kalman_Gyro_X+0x12c>)
 8003fb6:	f7fc f8d9 	bl	800016c <__adddf3>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	f7fc fbb3 	bl	800072c <__aeabi_ddiv>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	492e      	ldr	r1, [pc, #184]	; (8004084 <MPU6050_Kalman_Gyro_X+0x130>)
 8003fcc:	e9c1 2300 	strd	r2, r3, [r1]
	Gyro_X_U_hat = Gyro_X_U_hat + K4 * (Gyro_X_U - H4 * Gyro_X_U_hat);
 8003fd0:	f04f 0000 	mov.w	r0, #0
 8003fd4:	4929      	ldr	r1, [pc, #164]	; (800407c <MPU6050_Kalman_Gyro_X+0x128>)
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <MPU6050_Kalman_Gyro_X+0x134>)
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	f7fc fa7c 	bl	80004d8 <__aeabi_dmul>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fe8:	f7fc f8be 	bl	8000168 <__aeabi_dsub>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <MPU6050_Kalman_Gyro_X+0x130>)
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f7fc fa6d 	bl	80004d8 <__aeabi_dmul>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <MPU6050_Kalman_Gyro_X+0x134>)
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	f7fc f8ae 	bl	800016c <__adddf3>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	491c      	ldr	r1, [pc, #112]	; (8004088 <MPU6050_Kalman_Gyro_X+0x134>)
 8004016:	e9c1 2300 	strd	r2, r3, [r1]
	P4 = (1 - K4 * H4) * P4 + Q4;
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <MPU6050_Kalman_Gyro_X+0x130>)
 800401c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <MPU6050_Kalman_Gyro_X+0x128>)
 8004026:	f7fc fa57 	bl	80004d8 <__aeabi_dmul>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	f04f 0000 	mov.w	r0, #0
 8004032:	4912      	ldr	r1, [pc, #72]	; (800407c <MPU6050_Kalman_Gyro_X+0x128>)
 8004034:	f7fc f898 	bl	8000168 <__aeabi_dsub>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <MPU6050_Kalman_Gyro_X+0x124>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc fa47 	bl	80004d8 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <MPU6050_Kalman_Gyro_X+0x138>)
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f7fc f888 	bl	800016c <__adddf3>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4905      	ldr	r1, [pc, #20]	; (8004078 <MPU6050_Kalman_Gyro_X+0x124>)
 8004062:	e9c1 2300 	strd	r2, r3, [r1]

	return Gyro_X_U_hat;
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <MPU6050_Kalman_Gyro_X+0x134>)
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bdb0      	pop	{r4, r5, r7, pc}
 8004076:	bf00      	nop
 8004078:	20000628 	.word	0x20000628
 800407c:	3ff00000 	.word	0x3ff00000
 8004080:	40440000 	.word	0x40440000
 8004084:	20000630 	.word	0x20000630
 8004088:	20000658 	.word	0x20000658
 800408c:	20000060 	.word	0x20000060

08004090 <HAL_UART_RxCpltCallback>:
uint8_t rx_data = 0;
uint8_t rx_buffer[128];
uint8_t rx_index = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	if(huart == uart) {
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <HAL_UART_RxCpltCallback+0x68>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d127      	bne.n	80040f0 <HAL_UART_RxCpltCallback+0x60>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80040a0:	4b16      	ldr	r3, [pc, #88]	; (80040fc <HAL_UART_RxCpltCallback+0x6c>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b0a      	cmp	r3, #10
 80040a6:	d010      	beq.n	80040ca <HAL_UART_RxCpltCallback+0x3a>
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_UART_RxCpltCallback+0x70>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db0b      	blt.n	80040ca <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <HAL_UART_RxCpltCallback+0x70>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	b2d1      	uxtb	r1, r2
 80040ba:	4a11      	ldr	r2, [pc, #68]	; (8004100 <HAL_UART_RxCpltCallback+0x70>)
 80040bc:	7011      	strb	r1, [r2, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_UART_RxCpltCallback+0x6c>)
 80040c2:	7819      	ldrb	r1, [r3, #0]
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <HAL_UART_RxCpltCallback+0x74>)
 80040c6:	5499      	strb	r1, [r3, r2]
 80040c8:	e00d      	b.n	80040e6 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <HAL_UART_RxCpltCallback+0x70>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	461a      	mov	r2, r3
 80040d2:	490c      	ldr	r1, [pc, #48]	; (8004104 <HAL_UART_RxCpltCallback+0x74>)
 80040d4:	480c      	ldr	r0, [pc, #48]	; (8004108 <HAL_UART_RxCpltCallback+0x78>)
 80040d6:	f7fe febc 	bl	8002e52 <lwgps_process>
			rx_index = 0;
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_UART_RxCpltCallback+0x70>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_UART_RxCpltCallback+0x6c>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(uart, &rx_data, 1);
 80040e6:	2201      	movs	r2, #1
 80040e8:	4904      	ldr	r1, [pc, #16]	; (80040fc <HAL_UART_RxCpltCallback+0x6c>)
 80040ea:	4803      	ldr	r0, [pc, #12]	; (80040f8 <HAL_UART_RxCpltCallback+0x68>)
 80040ec:	f002 ff51 	bl	8006f92 <HAL_UART_Receive_IT>
	}
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	2000044c 	.word	0x2000044c
 80040fc:	20000660 	.word	0x20000660
 8004100:	200006e4 	.word	0x200006e4
 8004104:	20000664 	.word	0x20000664
 8004108:	20000518 	.word	0x20000518

0800410c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004114:	f107 0318 	add.w	r3, r7, #24
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <HAL_I2C_MspInit+0xc8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d124      	bne.n	8004176 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412c:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	4a29      	ldr	r2, [pc, #164]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 8004132:	f043 0308 	orr.w	r3, r3, #8
 8004136:	6193      	str	r3, [r2, #24]
 8004138:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004144:	23c0      	movs	r3, #192	; 0xc0
 8004146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004148:	2312      	movs	r3, #18
 800414a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800414c:	2303      	movs	r3, #3
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004150:	f107 0318 	add.w	r3, r7, #24
 8004154:	4619      	mov	r1, r3
 8004156:	4821      	ldr	r0, [pc, #132]	; (80041dc <HAL_I2C_MspInit+0xd0>)
 8004158:	f000 fc82 	bl	8004a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800415c:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 8004162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004166:	61d3      	str	r3, [r2, #28]
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004174:	e029      	b.n	80041ca <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <HAL_I2C_MspInit+0xd4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d124      	bne.n	80041ca <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004180:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 8004186:	f043 0308 	orr.w	r3, r3, #8
 800418a:	6193      	str	r3, [r2, #24]
 800418c:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004198:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800419c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800419e:	2312      	movs	r3, #18
 80041a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041a2:	2303      	movs	r3, #3
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a6:	f107 0318 	add.w	r3, r7, #24
 80041aa:	4619      	mov	r1, r3
 80041ac:	480b      	ldr	r0, [pc, #44]	; (80041dc <HAL_I2C_MspInit+0xd0>)
 80041ae:	f000 fc57 	bl	8004a60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 80041b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041bc:	61d3      	str	r3, [r2, #28]
 80041be:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <HAL_I2C_MspInit+0xcc>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c6:	60bb      	str	r3, [r7, #8]
 80041c8:	68bb      	ldr	r3, [r7, #8]
}
 80041ca:	bf00      	nop
 80041cc:	3728      	adds	r7, #40	; 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40005400 	.word	0x40005400
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40010c00 	.word	0x40010c00
 80041e0:	40005800 	.word	0x40005800

080041e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <HAL_TIM_Base_MspInit+0x44>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d113      	bne.n	800421e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <HAL_TIM_Base_MspInit+0x48>)
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	4a0c      	ldr	r2, [pc, #48]	; (800422c <HAL_TIM_Base_MspInit+0x48>)
 80041fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004200:	6193      	str	r3, [r2, #24]
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_TIM_Base_MspInit+0x48>)
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	2019      	movs	r0, #25
 8004214:	f000 fb3e 	bl	8004894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004218:	2019      	movs	r0, #25
 800421a:	f000 fb57 	bl	80048cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40021000 	.word	0x40021000

08004230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0318 	add.w	r3, r7, #24
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <HAL_UART_MspInit+0x108>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d132      	bne.n	80042b6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004250:	4b3a      	ldr	r3, [pc, #232]	; (800433c <HAL_UART_MspInit+0x10c>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4a39      	ldr	r2, [pc, #228]	; (800433c <HAL_UART_MspInit+0x10c>)
 8004256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800425a:	6193      	str	r3, [r2, #24]
 800425c:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_UART_MspInit+0x10c>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004268:	4b34      	ldr	r3, [pc, #208]	; (800433c <HAL_UART_MspInit+0x10c>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	4a33      	ldr	r2, [pc, #204]	; (800433c <HAL_UART_MspInit+0x10c>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6193      	str	r3, [r2, #24]
 8004274:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_UART_MspInit+0x10c>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800428a:	2303      	movs	r3, #3
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428e:	f107 0318 	add.w	r3, r7, #24
 8004292:	4619      	mov	r1, r3
 8004294:	482a      	ldr	r0, [pc, #168]	; (8004340 <HAL_UART_MspInit+0x110>)
 8004296:	f000 fbe3 	bl	8004a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800429a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a8:	f107 0318 	add.w	r3, r7, #24
 80042ac:	4619      	mov	r1, r3
 80042ae:	4824      	ldr	r0, [pc, #144]	; (8004340 <HAL_UART_MspInit+0x110>)
 80042b0:	f000 fbd6 	bl	8004a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042b4:	e03c      	b.n	8004330 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a22      	ldr	r2, [pc, #136]	; (8004344 <HAL_UART_MspInit+0x114>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d137      	bne.n	8004330 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042c0:	4b1e      	ldr	r3, [pc, #120]	; (800433c <HAL_UART_MspInit+0x10c>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_UART_MspInit+0x10c>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ca:	61d3      	str	r3, [r2, #28]
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_UART_MspInit+0x10c>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d8:	4b18      	ldr	r3, [pc, #96]	; (800433c <HAL_UART_MspInit+0x10c>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	4a17      	ldr	r2, [pc, #92]	; (800433c <HAL_UART_MspInit+0x10c>)
 80042de:	f043 0304 	orr.w	r3, r3, #4
 80042e2:	6193      	str	r3, [r2, #24]
 80042e4:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_UART_MspInit+0x10c>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042f0:	2304      	movs	r3, #4
 80042f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f4:	2302      	movs	r3, #2
 80042f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042f8:	2303      	movs	r3, #3
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fc:	f107 0318 	add.w	r3, r7, #24
 8004300:	4619      	mov	r1, r3
 8004302:	480f      	ldr	r0, [pc, #60]	; (8004340 <HAL_UART_MspInit+0x110>)
 8004304:	f000 fbac 	bl	8004a60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004308:	2308      	movs	r3, #8
 800430a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004314:	f107 0318 	add.w	r3, r7, #24
 8004318:	4619      	mov	r1, r3
 800431a:	4809      	ldr	r0, [pc, #36]	; (8004340 <HAL_UART_MspInit+0x110>)
 800431c:	f000 fba0 	bl	8004a60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004320:	2200      	movs	r2, #0
 8004322:	2100      	movs	r1, #0
 8004324:	2026      	movs	r0, #38	; 0x26
 8004326:	f000 fab5 	bl	8004894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800432a:	2026      	movs	r0, #38	; 0x26
 800432c:	f000 face 	bl	80048cc <HAL_NVIC_EnableIRQ>
}
 8004330:	bf00      	nop
 8004332:	3728      	adds	r7, #40	; 0x28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40013800 	.word	0x40013800
 800433c:	40021000 	.word	0x40021000
 8004340:	40010800 	.word	0x40010800
 8004344:	40004400 	.word	0x40004400

08004348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800434c:	e7fe      	b.n	800434c <NMI_Handler+0x4>

0800434e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004352:	e7fe      	b.n	8004352 <HardFault_Handler+0x4>

08004354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004358:	e7fe      	b.n	8004358 <MemManage_Handler+0x4>

0800435a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800435e:	e7fe      	b.n	800435e <BusFault_Handler+0x4>

08004360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004364:	e7fe      	b.n	8004364 <UsageFault_Handler+0x4>

08004366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr

0800437e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800438e:	f000 f999 	bl	80046c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if((RollAng <=15 || RollAng >=-15) && Alt>=2400)
 800439c:	4b2c      	ldr	r3, [pc, #176]	; (8004450 <TIM1_UP_IRQHandler+0xb8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	492c      	ldr	r1, [pc, #176]	; (8004454 <TIM1_UP_IRQHandler+0xbc>)
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc fd88 	bl	8000eb8 <__aeabi_fcmple>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d108      	bne.n	80043c0 <TIM1_UP_IRQHandler+0x28>
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <TIM1_UP_IRQHandler+0xb8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4929      	ldr	r1, [pc, #164]	; (8004458 <TIM1_UP_IRQHandler+0xc0>)
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fd89 	bl	8000ecc <__aeabi_fcmpge>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d010      	beq.n	80043e2 <TIM1_UP_IRQHandler+0x4a>
 80043c0:	4b26      	ldr	r3, [pc, #152]	; (800445c <TIM1_UP_IRQHandler+0xc4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4926      	ldr	r1, [pc, #152]	; (8004460 <TIM1_UP_IRQHandler+0xc8>)
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc fd80 	bl	8000ecc <__aeabi_fcmpge>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <TIM1_UP_IRQHandler+0x4a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80043d2:	2201      	movs	r2, #1
 80043d4:	2140      	movs	r1, #64	; 0x40
 80043d6:	4823      	ldr	r0, [pc, #140]	; (8004464 <TIM1_UP_IRQHandler+0xcc>)
 80043d8:	f000 fcc6 	bl	8004d68 <HAL_GPIO_WritePin>
		flag = 2;
 80043dc:	4b22      	ldr	r3, [pc, #136]	; (8004468 <TIM1_UP_IRQHandler+0xd0>)
 80043de:	2202      	movs	r2, #2
 80043e0:	601a      	str	r2, [r3, #0]
	}
	if((Alt <=600 && flag == 1) && Altitude1<=Alt)
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <TIM1_UP_IRQHandler+0xc4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4921      	ldr	r1, [pc, #132]	; (800446c <TIM1_UP_IRQHandler+0xd4>)
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc fd65 	bl	8000eb8 <__aeabi_fcmple>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d012      	beq.n	800441a <TIM1_UP_IRQHandler+0x82>
 80043f4:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <TIM1_UP_IRQHandler+0xd0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10e      	bne.n	800441a <TIM1_UP_IRQHandler+0x82>
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <TIM1_UP_IRQHandler+0xd8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a16      	ldr	r2, [pc, #88]	; (800445c <TIM1_UP_IRQHandler+0xc4>)
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	4611      	mov	r1, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc fd56 	bl	8000eb8 <__aeabi_fcmple>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <TIM1_UP_IRQHandler+0x82>
	{
		flag = 3;
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <TIM1_UP_IRQHandler+0xd0>)
 8004414:	2203      	movs	r2, #3
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e014      	b.n	8004444 <TIM1_UP_IRQHandler+0xac>
	}
	else if(Alt <= 600 && flag == 2)
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <TIM1_UP_IRQHandler+0xc4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4913      	ldr	r1, [pc, #76]	; (800446c <TIM1_UP_IRQHandler+0xd4>)
 8004420:	4618      	mov	r0, r3
 8004422:	f7fc fd49 	bl	8000eb8 <__aeabi_fcmple>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <TIM1_UP_IRQHandler+0xac>
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <TIM1_UP_IRQHandler+0xd0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d107      	bne.n	8004444 <TIM1_UP_IRQHandler+0xac>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8004434:	2201      	movs	r2, #1
 8004436:	2120      	movs	r1, #32
 8004438:	480a      	ldr	r0, [pc, #40]	; (8004464 <TIM1_UP_IRQHandler+0xcc>)
 800443a:	f000 fc95 	bl	8004d68 <HAL_GPIO_WritePin>
		flag = 4;
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <TIM1_UP_IRQHandler+0xd0>)
 8004440:	2204      	movs	r2, #4
 8004442:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004444:	480b      	ldr	r0, [pc, #44]	; (8004474 <TIM1_UP_IRQHandler+0xdc>)
 8004446:	f002 f963 	bl	8006710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000490 	.word	0x20000490
 8004454:	41700000 	.word	0x41700000
 8004458:	c1700000 	.word	0xc1700000
 800445c:	200004bc 	.word	0x200004bc
 8004460:	45160000 	.word	0x45160000
 8004464:	40010800 	.word	0x40010800
 8004468:	20000068 	.word	0x20000068
 800446c:	44160000 	.word	0x44160000
 8004470:	20000494 	.word	0x20000494
 8004474:	200003c0 	.word	0x200003c0

08004478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800447c:	4802      	ldr	r0, [pc, #8]	; (8004488 <USART2_IRQHandler+0x10>)
 800447e:	f002 fdb9 	bl	8006ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	2000044c 	.word	0x2000044c

0800448c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
	return 1;
 8004490:	2301      	movs	r3, #1
}
 8004492:	4618      	mov	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <_kill>:

int _kill(int pid, int sig)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044a4:	f003 f9ce 	bl	8007844 <__errno>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2216      	movs	r2, #22
 80044ac:	601a      	str	r2, [r3, #0]
	return -1;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <_exit>:

void _exit (int status)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80044c2:	f04f 31ff 	mov.w	r1, #4294967295
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff ffe7 	bl	800449a <_kill>
	while (1) {}		/* Make sure we hang here */
 80044cc:	e7fe      	b.n	80044cc <_exit+0x12>

080044ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e00a      	b.n	80044f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80044e0:	f3af 8000 	nop.w
 80044e4:	4601      	mov	r1, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	60ba      	str	r2, [r7, #8]
 80044ec:	b2ca      	uxtb	r2, r1
 80044ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3301      	adds	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	dbf0      	blt.n	80044e0 <_read+0x12>
	}

return len;
 80044fe:	687b      	ldr	r3, [r7, #4]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e009      	b.n	800452e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	60ba      	str	r2, [r7, #8]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3301      	adds	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	dbf1      	blt.n	800451a <_write+0x12>
	}
	return len;
 8004536:	687b      	ldr	r3, [r7, #4]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <_close>:

int _close(int file)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
	return -1;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004566:	605a      	str	r2, [r3, #4]
	return 0;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <_isatty>:

int _isatty(int file)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	return 1;
 800457c:	2301      	movs	r3, #1
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
	return 0;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <_sbrk+0x5c>)
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <_sbrk+0x60>)
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045b4:	4b13      	ldr	r3, [pc, #76]	; (8004604 <_sbrk+0x64>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <_sbrk+0x64>)
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <_sbrk+0x68>)
 80045c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <_sbrk+0x64>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d207      	bcs.n	80045e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045d0:	f003 f938 	bl	8007844 <__errno>
 80045d4:	4603      	mov	r3, r0
 80045d6:	220c      	movs	r2, #12
 80045d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	e009      	b.n	80045f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <_sbrk+0x64>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <_sbrk+0x64>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	4a05      	ldr	r2, [pc, #20]	; (8004604 <_sbrk+0x64>)
 80045f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045f2:	68fb      	ldr	r3, [r7, #12]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20005000 	.word	0x20005000
 8004600:	00000400 	.word	0x00000400
 8004604:	200006e8 	.word	0x200006e8
 8004608:	20000700 	.word	0x20000700

0800460c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004618:	480c      	ldr	r0, [pc, #48]	; (800464c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800461a:	490d      	ldr	r1, [pc, #52]	; (8004650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800461c:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800461e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004620:	e002      	b.n	8004628 <LoopCopyDataInit>

08004622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004626:	3304      	adds	r3, #4

08004628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800462a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800462c:	d3f9      	bcc.n	8004622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004630:	4c0a      	ldr	r4, [pc, #40]	; (800465c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004634:	e001      	b.n	800463a <LoopFillZerobss>

08004636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004638:	3204      	adds	r2, #4

0800463a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800463a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800463c:	d3fb      	bcc.n	8004636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800463e:	f7ff ffe5 	bl	800460c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004642:	f003 f905 	bl	8007850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004646:	f7fe fceb 	bl	8003020 <main>
  bx lr
 800464a:	4770      	bx	lr
  ldr r0, =_sdata
 800464c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004650:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8004654:	0800bdf8 	.word	0x0800bdf8
  ldr r2, =_sbss
 8004658:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800465c:	20000700 	.word	0x20000700

08004660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004660:	e7fe      	b.n	8004660 <ADC1_2_IRQHandler>
	...

08004664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800466c:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_InitTick+0x54>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4b12      	ldr	r3, [pc, #72]	; (80046bc <HAL_InitTick+0x58>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	4619      	mov	r1, r3
 8004676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800467a:	fbb3 f3f1 	udiv	r3, r3, r1
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f930 	bl	80048e8 <HAL_SYSTICK_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e00e      	b.n	80046b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b0f      	cmp	r3, #15
 8004696:	d80a      	bhi.n	80046ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004698:	2200      	movs	r2, #0
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	f000 f8f8 	bl	8004894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046a4:	4a06      	ldr	r2, [pc, #24]	; (80046c0 <HAL_InitTick+0x5c>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	2000006c 	.word	0x2000006c
 80046bc:	20000074 	.word	0x20000074
 80046c0:	20000070 	.word	0x20000070

080046c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_IncTick+0x1c>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_IncTick+0x20>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4413      	add	r3, r2
 80046d4:	4a03      	ldr	r2, [pc, #12]	; (80046e4 <HAL_IncTick+0x20>)
 80046d6:	6013      	str	r3, [r2, #0]
}
 80046d8:	bf00      	nop
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	20000074 	.word	0x20000074
 80046e4:	200006ec 	.word	0x200006ec

080046e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return uwTick;
 80046ec:	4b02      	ldr	r3, [pc, #8]	; (80046f8 <HAL_GetTick+0x10>)
 80046ee:	681b      	ldr	r3, [r3, #0]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	200006ec 	.word	0x200006ec

080046fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff fff0 	bl	80046e8 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d005      	beq.n	8004722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_Delay+0x44>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004722:	bf00      	nop
 8004724:	f7ff ffe0 	bl	80046e8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	429a      	cmp	r2, r3
 8004732:	d8f7      	bhi.n	8004724 <HAL_Delay+0x28>
  {
  }
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000074 	.word	0x20000074

08004744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <__NVIC_GetPriorityGrouping+0x18>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	f003 0307 	and.w	r3, r3, #7
}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	2b00      	cmp	r3, #0
 8004770:	db0b      	blt.n	800478a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	f003 021f 	and.w	r2, r3, #31
 8004778:	4906      	ldr	r1, [pc, #24]	; (8004794 <__NVIC_EnableIRQ+0x34>)
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2001      	movs	r0, #1
 8004782:	fa00 f202 	lsl.w	r2, r0, r2
 8004786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	e000e100 	.word	0xe000e100

08004798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db0a      	blt.n	80047c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	490c      	ldr	r1, [pc, #48]	; (80047e4 <__NVIC_SetPriority+0x4c>)
 80047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	440b      	add	r3, r1
 80047bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047c0:	e00a      	b.n	80047d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4908      	ldr	r1, [pc, #32]	; (80047e8 <__NVIC_SetPriority+0x50>)
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	3b04      	subs	r3, #4
 80047d0:	0112      	lsls	r2, r2, #4
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	440b      	add	r3, r1
 80047d6:	761a      	strb	r2, [r3, #24]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000e100 	.word	0xe000e100
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f1c3 0307 	rsb	r3, r3, #7
 8004806:	2b04      	cmp	r3, #4
 8004808:	bf28      	it	cs
 800480a:	2304      	movcs	r3, #4
 800480c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3304      	adds	r3, #4
 8004812:	2b06      	cmp	r3, #6
 8004814:	d902      	bls.n	800481c <NVIC_EncodePriority+0x30>
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3b03      	subs	r3, #3
 800481a:	e000      	b.n	800481e <NVIC_EncodePriority+0x32>
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43da      	mvns	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	401a      	ands	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004834:	f04f 31ff 	mov.w	r1, #4294967295
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fa01 f303 	lsl.w	r3, r1, r3
 800483e:	43d9      	mvns	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004844:	4313      	orrs	r3, r2
         );
}
 8004846:	4618      	mov	r0, r3
 8004848:	3724      	adds	r7, #36	; 0x24
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3b01      	subs	r3, #1
 800485c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004860:	d301      	bcc.n	8004866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004862:	2301      	movs	r3, #1
 8004864:	e00f      	b.n	8004886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <SysTick_Config+0x40>)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3b01      	subs	r3, #1
 800486c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800486e:	210f      	movs	r1, #15
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	f7ff ff90 	bl	8004798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <SysTick_Config+0x40>)
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <SysTick_Config+0x40>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010

08004894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048a6:	f7ff ff4d 	bl	8004744 <__NVIC_GetPriorityGrouping>
 80048aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	6978      	ldr	r0, [r7, #20]
 80048b2:	f7ff ff9b 	bl	80047ec <NVIC_EncodePriority>
 80048b6:	4602      	mov	r2, r0
 80048b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ff6a 	bl	8004798 <__NVIC_SetPriority>
}
 80048c4:	bf00      	nop
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ff40 	bl	8004760 <__NVIC_EnableIRQ>
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffad 	bl	8004850 <SysTick_Config>
 80048f6:	4603      	mov	r3, r0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004912:	2b02      	cmp	r3, #2
 8004914:	d008      	beq.n	8004928 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2204      	movs	r2, #4
 800491a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e020      	b.n	800496a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 020e 	bic.w	r2, r2, #14
 8004936:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004950:	2101      	movs	r1, #1
 8004952:	fa01 f202 	lsl.w	r2, r1, r2
 8004956:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004986:	2b02      	cmp	r3, #2
 8004988:	d005      	beq.n	8004996 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2204      	movs	r2, #4
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
 8004994:	e051      	b.n	8004a3a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 020e 	bic.w	r2, r2, #14
 80049a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0201 	bic.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_DMA_Abort_IT+0xd0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d029      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xa0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <HAL_DMA_Abort_IT+0xd4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d022      	beq.n	8004a10 <HAL_DMA_Abort_IT+0x9c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_DMA_Abort_IT+0xd8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d01a      	beq.n	8004a0a <HAL_DMA_Abort_IT+0x96>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <HAL_DMA_Abort_IT+0xdc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d012      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x90>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <HAL_DMA_Abort_IT+0xe0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00a      	beq.n	80049fe <HAL_DMA_Abort_IT+0x8a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1a      	ldr	r2, [pc, #104]	; (8004a58 <HAL_DMA_Abort_IT+0xe4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d102      	bne.n	80049f8 <HAL_DMA_Abort_IT+0x84>
 80049f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049f6:	e00e      	b.n	8004a16 <HAL_DMA_Abort_IT+0xa2>
 80049f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049fc:	e00b      	b.n	8004a16 <HAL_DMA_Abort_IT+0xa2>
 80049fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a02:	e008      	b.n	8004a16 <HAL_DMA_Abort_IT+0xa2>
 8004a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a08:	e005      	b.n	8004a16 <HAL_DMA_Abort_IT+0xa2>
 8004a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a0e:	e002      	b.n	8004a16 <HAL_DMA_Abort_IT+0xa2>
 8004a10:	2310      	movs	r3, #16
 8004a12:	e000      	b.n	8004a16 <HAL_DMA_Abort_IT+0xa2>
 8004a14:	2301      	movs	r3, #1
 8004a16:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <HAL_DMA_Abort_IT+0xe8>)
 8004a18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
    } 
  }
  return status;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40020008 	.word	0x40020008
 8004a48:	4002001c 	.word	0x4002001c
 8004a4c:	40020030 	.word	0x40020030
 8004a50:	40020044 	.word	0x40020044
 8004a54:	40020058 	.word	0x40020058
 8004a58:	4002006c 	.word	0x4002006c
 8004a5c:	40020000 	.word	0x40020000

08004a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b08b      	sub	sp, #44	; 0x2c
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a72:	e169      	b.n	8004d48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004a74:	2201      	movs	r2, #1
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	f040 8158 	bne.w	8004d42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4a9a      	ldr	r2, [pc, #616]	; (8004d00 <HAL_GPIO_Init+0x2a0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d05e      	beq.n	8004b5a <HAL_GPIO_Init+0xfa>
 8004a9c:	4a98      	ldr	r2, [pc, #608]	; (8004d00 <HAL_GPIO_Init+0x2a0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d875      	bhi.n	8004b8e <HAL_GPIO_Init+0x12e>
 8004aa2:	4a98      	ldr	r2, [pc, #608]	; (8004d04 <HAL_GPIO_Init+0x2a4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d058      	beq.n	8004b5a <HAL_GPIO_Init+0xfa>
 8004aa8:	4a96      	ldr	r2, [pc, #600]	; (8004d04 <HAL_GPIO_Init+0x2a4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d86f      	bhi.n	8004b8e <HAL_GPIO_Init+0x12e>
 8004aae:	4a96      	ldr	r2, [pc, #600]	; (8004d08 <HAL_GPIO_Init+0x2a8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d052      	beq.n	8004b5a <HAL_GPIO_Init+0xfa>
 8004ab4:	4a94      	ldr	r2, [pc, #592]	; (8004d08 <HAL_GPIO_Init+0x2a8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d869      	bhi.n	8004b8e <HAL_GPIO_Init+0x12e>
 8004aba:	4a94      	ldr	r2, [pc, #592]	; (8004d0c <HAL_GPIO_Init+0x2ac>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d04c      	beq.n	8004b5a <HAL_GPIO_Init+0xfa>
 8004ac0:	4a92      	ldr	r2, [pc, #584]	; (8004d0c <HAL_GPIO_Init+0x2ac>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d863      	bhi.n	8004b8e <HAL_GPIO_Init+0x12e>
 8004ac6:	4a92      	ldr	r2, [pc, #584]	; (8004d10 <HAL_GPIO_Init+0x2b0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d046      	beq.n	8004b5a <HAL_GPIO_Init+0xfa>
 8004acc:	4a90      	ldr	r2, [pc, #576]	; (8004d10 <HAL_GPIO_Init+0x2b0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d85d      	bhi.n	8004b8e <HAL_GPIO_Init+0x12e>
 8004ad2:	2b12      	cmp	r3, #18
 8004ad4:	d82a      	bhi.n	8004b2c <HAL_GPIO_Init+0xcc>
 8004ad6:	2b12      	cmp	r3, #18
 8004ad8:	d859      	bhi.n	8004b8e <HAL_GPIO_Init+0x12e>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_GPIO_Init+0x80>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b5b 	.word	0x08004b5b
 8004ae4:	08004b35 	.word	0x08004b35
 8004ae8:	08004b47 	.word	0x08004b47
 8004aec:	08004b89 	.word	0x08004b89
 8004af0:	08004b8f 	.word	0x08004b8f
 8004af4:	08004b8f 	.word	0x08004b8f
 8004af8:	08004b8f 	.word	0x08004b8f
 8004afc:	08004b8f 	.word	0x08004b8f
 8004b00:	08004b8f 	.word	0x08004b8f
 8004b04:	08004b8f 	.word	0x08004b8f
 8004b08:	08004b8f 	.word	0x08004b8f
 8004b0c:	08004b8f 	.word	0x08004b8f
 8004b10:	08004b8f 	.word	0x08004b8f
 8004b14:	08004b8f 	.word	0x08004b8f
 8004b18:	08004b8f 	.word	0x08004b8f
 8004b1c:	08004b8f 	.word	0x08004b8f
 8004b20:	08004b8f 	.word	0x08004b8f
 8004b24:	08004b3d 	.word	0x08004b3d
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	4a79      	ldr	r2, [pc, #484]	; (8004d14 <HAL_GPIO_Init+0x2b4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b32:	e02c      	b.n	8004b8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	623b      	str	r3, [r7, #32]
          break;
 8004b3a:	e029      	b.n	8004b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	3304      	adds	r3, #4
 8004b42:	623b      	str	r3, [r7, #32]
          break;
 8004b44:	e024      	b.n	8004b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	623b      	str	r3, [r7, #32]
          break;
 8004b4e:	e01f      	b.n	8004b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	330c      	adds	r3, #12
 8004b56:	623b      	str	r3, [r7, #32]
          break;
 8004b58:	e01a      	b.n	8004b90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004b62:	2304      	movs	r3, #4
 8004b64:	623b      	str	r3, [r7, #32]
          break;
 8004b66:	e013      	b.n	8004b90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b70:	2308      	movs	r3, #8
 8004b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	611a      	str	r2, [r3, #16]
          break;
 8004b7a:	e009      	b.n	8004b90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b7c:	2308      	movs	r3, #8
 8004b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	615a      	str	r2, [r3, #20]
          break;
 8004b86:	e003      	b.n	8004b90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	623b      	str	r3, [r7, #32]
          break;
 8004b8c:	e000      	b.n	8004b90 <HAL_GPIO_Init+0x130>
          break;
 8004b8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2bff      	cmp	r3, #255	; 0xff
 8004b94:	d801      	bhi.n	8004b9a <HAL_GPIO_Init+0x13a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	e001      	b.n	8004b9e <HAL_GPIO_Init+0x13e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2bff      	cmp	r3, #255	; 0xff
 8004ba4:	d802      	bhi.n	8004bac <HAL_GPIO_Init+0x14c>
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	e002      	b.n	8004bb2 <HAL_GPIO_Init+0x152>
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	3b08      	subs	r3, #8
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	210f      	movs	r1, #15
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	6a39      	ldr	r1, [r7, #32]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80b1 	beq.w	8004d42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004be0:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <HAL_GPIO_Init+0x2b8>)
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	4a4c      	ldr	r2, [pc, #304]	; (8004d18 <HAL_GPIO_Init+0x2b8>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6193      	str	r3, [r2, #24]
 8004bec:	4b4a      	ldr	r3, [pc, #296]	; (8004d18 <HAL_GPIO_Init+0x2b8>)
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004bf8:	4a48      	ldr	r2, [pc, #288]	; (8004d1c <HAL_GPIO_Init+0x2bc>)
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	089b      	lsrs	r3, r3, #2
 8004bfe:	3302      	adds	r3, #2
 8004c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	220f      	movs	r2, #15
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a40      	ldr	r2, [pc, #256]	; (8004d20 <HAL_GPIO_Init+0x2c0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d013      	beq.n	8004c4c <HAL_GPIO_Init+0x1ec>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3f      	ldr	r2, [pc, #252]	; (8004d24 <HAL_GPIO_Init+0x2c4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00d      	beq.n	8004c48 <HAL_GPIO_Init+0x1e8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3e      	ldr	r2, [pc, #248]	; (8004d28 <HAL_GPIO_Init+0x2c8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <HAL_GPIO_Init+0x1e4>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3d      	ldr	r2, [pc, #244]	; (8004d2c <HAL_GPIO_Init+0x2cc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d101      	bne.n	8004c40 <HAL_GPIO_Init+0x1e0>
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e006      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c40:	2304      	movs	r3, #4
 8004c42:	e004      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e002      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c50:	f002 0203 	and.w	r2, r2, #3
 8004c54:	0092      	lsls	r2, r2, #2
 8004c56:	4093      	lsls	r3, r2
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004c5e:	492f      	ldr	r1, [pc, #188]	; (8004d1c <HAL_GPIO_Init+0x2bc>)
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	3302      	adds	r3, #2
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d006      	beq.n	8004c86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c78:	4b2d      	ldr	r3, [pc, #180]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	492c      	ldr	r1, [pc, #176]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]
 8004c84:	e006      	b.n	8004c94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c86:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	4928      	ldr	r1, [pc, #160]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d006      	beq.n	8004cae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ca0:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	4922      	ldr	r1, [pc, #136]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	491e      	ldr	r1, [pc, #120]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004cc8:	4b19      	ldr	r3, [pc, #100]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	4918      	ldr	r1, [pc, #96]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]
 8004cd4:	e006      	b.n	8004ce4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cd6:	4b16      	ldr	r3, [pc, #88]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	4914      	ldr	r1, [pc, #80]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d021      	beq.n	8004d34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	490e      	ldr	r1, [pc, #56]	; (8004d30 <HAL_GPIO_Init+0x2d0>)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60cb      	str	r3, [r1, #12]
 8004cfc:	e021      	b.n	8004d42 <HAL_GPIO_Init+0x2e2>
 8004cfe:	bf00      	nop
 8004d00:	10320000 	.word	0x10320000
 8004d04:	10310000 	.word	0x10310000
 8004d08:	10220000 	.word	0x10220000
 8004d0c:	10210000 	.word	0x10210000
 8004d10:	10120000 	.word	0x10120000
 8004d14:	10110000 	.word	0x10110000
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010800 	.word	0x40010800
 8004d24:	40010c00 	.word	0x40010c00
 8004d28:	40011000 	.word	0x40011000
 8004d2c:	40011400 	.word	0x40011400
 8004d30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	4909      	ldr	r1, [pc, #36]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	3301      	adds	r3, #1
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f47f ae8e 	bne.w	8004a74 <HAL_GPIO_Init+0x14>
  }
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	372c      	adds	r7, #44	; 0x2c
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	40010400 	.word	0x40010400

08004d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
 8004d74:	4613      	mov	r3, r2
 8004d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d78:	787b      	ldrb	r3, [r7, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004d84:	e003      	b.n	8004d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	041a      	lsls	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e12b      	b.n	8005002 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff f9a4 	bl	800410c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	; 0x24
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f001 fba0 	bl	8006540 <HAL_RCC_GetPCLK1Freq>
 8004e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4a81      	ldr	r2, [pc, #516]	; (800500c <HAL_I2C_Init+0x274>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d807      	bhi.n	8004e1c <HAL_I2C_Init+0x84>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a80      	ldr	r2, [pc, #512]	; (8005010 <HAL_I2C_Init+0x278>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	bf94      	ite	ls
 8004e14:	2301      	movls	r3, #1
 8004e16:	2300      	movhi	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e006      	b.n	8004e2a <HAL_I2C_Init+0x92>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4a7d      	ldr	r2, [pc, #500]	; (8005014 <HAL_I2C_Init+0x27c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	bf94      	ite	ls
 8004e24:	2301      	movls	r3, #1
 8004e26:	2300      	movhi	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e0e7      	b.n	8005002 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a78      	ldr	r2, [pc, #480]	; (8005018 <HAL_I2C_Init+0x280>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	0c9b      	lsrs	r3, r3, #18
 8004e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a6a      	ldr	r2, [pc, #424]	; (800500c <HAL_I2C_Init+0x274>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d802      	bhi.n	8004e6c <HAL_I2C_Init+0xd4>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	e009      	b.n	8004e80 <HAL_I2C_Init+0xe8>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	4a69      	ldr	r2, [pc, #420]	; (800501c <HAL_I2C_Init+0x284>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	099b      	lsrs	r3, r3, #6
 8004e7e:	3301      	adds	r3, #1
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	495c      	ldr	r1, [pc, #368]	; (800500c <HAL_I2C_Init+0x274>)
 8004e9c:	428b      	cmp	r3, r1
 8004e9e:	d819      	bhi.n	8004ed4 <HAL_I2C_Init+0x13c>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1e59      	subs	r1, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eae:	1c59      	adds	r1, r3, #1
 8004eb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004eb4:	400b      	ands	r3, r1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_I2C_Init+0x138>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1e59      	subs	r1, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ece:	e051      	b.n	8004f74 <HAL_I2C_Init+0x1dc>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	e04f      	b.n	8004f74 <HAL_I2C_Init+0x1dc>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d111      	bne.n	8004f00 <HAL_I2C_Init+0x168>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1e58      	subs	r0, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6859      	ldr	r1, [r3, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	440b      	add	r3, r1
 8004eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	e012      	b.n	8004f26 <HAL_I2C_Init+0x18e>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1e58      	subs	r0, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	0099      	lsls	r1, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f16:	3301      	adds	r3, #1
 8004f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_Init+0x196>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e022      	b.n	8004f74 <HAL_I2C_Init+0x1dc>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10e      	bne.n	8004f54 <HAL_I2C_Init+0x1bc>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1e58      	subs	r0, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	440b      	add	r3, r1
 8004f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f52:	e00f      	b.n	8004f74 <HAL_I2C_Init+0x1dc>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1e58      	subs	r0, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6859      	ldr	r1, [r3, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	0099      	lsls	r1, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	6809      	ldr	r1, [r1, #0]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6911      	ldr	r1, [r2, #16]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	4311      	orrs	r1, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	000186a0 	.word	0x000186a0
 8005010:	001e847f 	.word	0x001e847f
 8005014:	003d08ff 	.word	0x003d08ff
 8005018:	431bde83 	.word	0x431bde83
 800501c:	10624dd3 	.word	0x10624dd3

08005020 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	461a      	mov	r2, r3
 800502e:	4603      	mov	r3, r0
 8005030:	817b      	strh	r3, [r7, #10]
 8005032:	460b      	mov	r3, r1
 8005034:	813b      	strh	r3, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800503a:	f7ff fb55 	bl	80046e8 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b20      	cmp	r3, #32
 800504a:	f040 80d9 	bne.w	8005200 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	2319      	movs	r3, #25
 8005054:	2201      	movs	r2, #1
 8005056:	496d      	ldr	r1, [pc, #436]	; (800520c <HAL_I2C_Mem_Write+0x1ec>)
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fcc1 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
 8005066:	e0cc      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_I2C_Mem_Write+0x56>
 8005072:	2302      	movs	r3, #2
 8005074:	e0c5      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b01      	cmp	r3, #1
 800508a:	d007      	beq.n	800509c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2221      	movs	r2, #33	; 0x21
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2240      	movs	r2, #64	; 0x40
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4a4d      	ldr	r2, [pc, #308]	; (8005210 <HAL_I2C_Mem_Write+0x1f0>)
 80050dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050de:	88f8      	ldrh	r0, [r7, #6]
 80050e0:	893a      	ldrh	r2, [r7, #8]
 80050e2:	8979      	ldrh	r1, [r7, #10]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4603      	mov	r3, r0
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 faf8 	bl	80056e4 <I2C_RequestMemoryWrite>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d052      	beq.n	80051a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e081      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fd42 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	2b04      	cmp	r3, #4
 8005114:	d107      	bne.n	8005126 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e06b      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b04      	cmp	r3, #4
 8005166:	d11b      	bne.n	80051a0 <HAL_I2C_Mem_Write+0x180>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	2b00      	cmp	r3, #0
 800516e:	d017      	beq.n	80051a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	781a      	ldrb	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1aa      	bne.n	80050fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fd2e 	bl	8005c0e <I2C_WaitOnBTFFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d107      	bne.n	80051d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e016      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	00100002 	.word	0x00100002
 8005210:	ffff0000 	.word	0xffff0000

08005214 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08c      	sub	sp, #48	; 0x30
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	461a      	mov	r2, r3
 8005222:	4603      	mov	r3, r0
 8005224:	817b      	strh	r3, [r7, #10]
 8005226:	460b      	mov	r3, r1
 8005228:	813b      	strh	r3, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005232:	f7ff fa59 	bl	80046e8 <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b20      	cmp	r3, #32
 8005242:	f040 8244 	bne.w	80056ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2319      	movs	r3, #25
 800524c:	2201      	movs	r2, #1
 800524e:	4982      	ldr	r1, [pc, #520]	; (8005458 <HAL_I2C_Mem_Read+0x244>)
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fbc5 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
 800525e:	e237      	b.n	80056d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_I2C_Mem_Read+0x5a>
 800526a:	2302      	movs	r3, #2
 800526c:	e230      	b.n	80056d0 <HAL_I2C_Mem_Read+0x4bc>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d007      	beq.n	8005294 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2222      	movs	r2, #34	; 0x22
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2240      	movs	r2, #64	; 0x40
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80052c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a62      	ldr	r2, [pc, #392]	; (800545c <HAL_I2C_Mem_Read+0x248>)
 80052d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052d6:	88f8      	ldrh	r0, [r7, #6]
 80052d8:	893a      	ldrh	r2, [r7, #8]
 80052da:	8979      	ldrh	r1, [r7, #10]
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	4603      	mov	r3, r0
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fa92 	bl	8005810 <I2C_RequestMemoryRead>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e1ec      	b.n	80056d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d113      	bne.n	8005326 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	e1c0      	b.n	80056a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	2b01      	cmp	r3, #1
 800532c:	d11e      	bne.n	800536c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800533e:	b672      	cpsid	i
}
 8005340:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005342:	2300      	movs	r3, #0
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005366:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005368:	b662      	cpsie	i
}
 800536a:	e035      	b.n	80053d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005370:	2b02      	cmp	r3, #2
 8005372:	d11e      	bne.n	80053b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005382:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005384:	b672      	cpsid	i
}
 8005386:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80053ae:	b662      	cpsie	i
}
 80053b0:	e012      	b.n	80053d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80053d8:	e166      	b.n	80056a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053de:	2b03      	cmp	r3, #3
 80053e0:	f200 811f 	bhi.w	8005622 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d123      	bne.n	8005434 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fc4d 	bl	8005c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e167      	b.n	80056d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005432:	e139      	b.n	80056a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	2b02      	cmp	r3, #2
 800543a:	d152      	bne.n	80054e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	2200      	movs	r2, #0
 8005444:	4906      	ldr	r1, [pc, #24]	; (8005460 <HAL_I2C_Mem_Read+0x24c>)
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 faca 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e13c      	b.n	80056d0 <HAL_I2C_Mem_Read+0x4bc>
 8005456:	bf00      	nop
 8005458:	00100002 	.word	0x00100002
 800545c:	ffff0000 	.word	0xffff0000
 8005460:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005464:	b672      	cpsid	i
}
 8005466:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80054aa:	b662      	cpsie	i
}
 80054ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e0:	e0e2      	b.n	80056a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2200      	movs	r2, #0
 80054ea:	497b      	ldr	r1, [pc, #492]	; (80056d8 <HAL_I2C_Mem_Read+0x4c4>)
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fa77 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0e9      	b.n	80056d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800550c:	b672      	cpsid	i
}
 800550e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005542:	4b66      	ldr	r3, [pc, #408]	; (80056dc <HAL_I2C_Mem_Read+0x4c8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	08db      	lsrs	r3, r3, #3
 8005548:	4a65      	ldr	r2, [pc, #404]	; (80056e0 <HAL_I2C_Mem_Read+0x4cc>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	0a1a      	lsrs	r2, r3, #8
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	00da      	lsls	r2, r3, #3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	3b01      	subs	r3, #1
 8005560:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d118      	bne.n	800559a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800558a:	b662      	cpsie	i
}
 800558c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e09a      	b.n	80056d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d1d9      	bne.n	800555c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80055ea:	b662      	cpsie	i
}
 80055ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005620:	e042      	b.n	80056a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005624:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fb32 	bl	8005c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e04c      	b.n	80056d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b04      	cmp	r3, #4
 8005674:	d118      	bne.n	80056a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f47f ae94 	bne.w	80053da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e000      	b.n	80056d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
  }
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3728      	adds	r7, #40	; 0x28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	00010004 	.word	0x00010004
 80056dc:	2000006c 	.word	0x2000006c
 80056e0:	14f8b589 	.word	0x14f8b589

080056e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	4608      	mov	r0, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	817b      	strh	r3, [r7, #10]
 80056f6:	460b      	mov	r3, r1
 80056f8:	813b      	strh	r3, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800570c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	2200      	movs	r2, #0
 8005716:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f960 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005734:	d103      	bne.n	800573e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e05f      	b.n	8005802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005742:	897b      	ldrh	r3, [r7, #10]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005750:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	492d      	ldr	r1, [pc, #180]	; (800580c <I2C_RequestMemoryWrite+0x128>)
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f998 	bl	8005a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e04c      	b.n	8005802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800577e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005780:	6a39      	ldr	r1, [r7, #32]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fa02 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00d      	beq.n	80057aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b04      	cmp	r3, #4
 8005794:	d107      	bne.n	80057a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e02b      	b.n	8005802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d105      	bne.n	80057bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b0:	893b      	ldrh	r3, [r7, #8]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	611a      	str	r2, [r3, #16]
 80057ba:	e021      	b.n	8005800 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057bc:	893b      	ldrh	r3, [r7, #8]
 80057be:	0a1b      	lsrs	r3, r3, #8
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057cc:	6a39      	ldr	r1, [r7, #32]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f9dc 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00d      	beq.n	80057f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d107      	bne.n	80057f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e005      	b.n	8005802 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057f6:	893b      	ldrh	r3, [r7, #8]
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	00010002 	.word	0x00010002

08005810 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	461a      	mov	r2, r3
 800581e:	4603      	mov	r3, r0
 8005820:	817b      	strh	r3, [r7, #10]
 8005822:	460b      	mov	r3, r1
 8005824:	813b      	strh	r3, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005838:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005848:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	2200      	movs	r2, #0
 8005852:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f8c2 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005870:	d103      	bne.n	800587a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005878:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e0aa      	b.n	80059d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800587e:	897b      	ldrh	r3, [r7, #10]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800588c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	6a3a      	ldr	r2, [r7, #32]
 8005892:	4952      	ldr	r1, [pc, #328]	; (80059dc <I2C_RequestMemoryRead+0x1cc>)
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f8fa 	bl	8005a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e097      	b.n	80059d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058bc:	6a39      	ldr	r1, [r7, #32]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f964 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00d      	beq.n	80058e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d107      	bne.n	80058e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e076      	b.n	80059d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d105      	bne.n	80058f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058ec:	893b      	ldrh	r3, [r7, #8]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	611a      	str	r2, [r3, #16]
 80058f6:	e021      	b.n	800593c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058f8:	893b      	ldrh	r3, [r7, #8]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	6a39      	ldr	r1, [r7, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f93e 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00d      	beq.n	8005932 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b04      	cmp	r3, #4
 800591c:	d107      	bne.n	800592e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e050      	b.n	80059d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005932:	893b      	ldrh	r3, [r7, #8]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800593c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593e:	6a39      	ldr	r1, [r7, #32]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f923 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00d      	beq.n	8005968 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	2b04      	cmp	r3, #4
 8005952:	d107      	bne.n	8005964 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005962:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e035      	b.n	80059d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005976:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	2200      	movs	r2, #0
 8005980:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f82b 	bl	80059e0 <I2C_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00d      	beq.n	80059ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599e:	d103      	bne.n	80059a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e013      	b.n	80059d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059ac:	897b      	ldrh	r3, [r7, #10]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	6a3a      	ldr	r2, [r7, #32]
 80059c0:	4906      	ldr	r1, [pc, #24]	; (80059dc <I2C_RequestMemoryRead+0x1cc>)
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f863 	bl	8005a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	00010002 	.word	0x00010002

080059e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f0:	e025      	b.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d021      	beq.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fa:	f7fe fe75 	bl	80046e8 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d116      	bne.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f043 0220 	orr.w	r2, r3, #32
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e023      	b.n	8005a86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d10d      	bne.n	8005a64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	43da      	mvns	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4013      	ands	r3, r2
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bf0c      	ite	eq
 8005a5a:	2301      	moveq	r3, #1
 8005a5c:	2300      	movne	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	e00c      	b.n	8005a7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d0b6      	beq.n	80059f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a9c:	e051      	b.n	8005b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aac:	d123      	bne.n	8005af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ac6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f043 0204 	orr.w	r2, r3, #4
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e046      	b.n	8005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d021      	beq.n	8005b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afe:	f7fe fdf3 	bl	80046e8 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d302      	bcc.n	8005b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d116      	bne.n	8005b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f043 0220 	orr.w	r2, r3, #32
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e020      	b.n	8005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d10c      	bne.n	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	43da      	mvns	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4013      	ands	r3, r2
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bf14      	ite	ne
 8005b5e:	2301      	movne	r3, #1
 8005b60:	2300      	moveq	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	e00b      	b.n	8005b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	43da      	mvns	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf14      	ite	ne
 8005b78:	2301      	movne	r3, #1
 8005b7a:	2300      	moveq	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d18d      	bne.n	8005a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b98:	e02d      	b.n	8005bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f8ce 	bl	8005d3c <I2C_IsAcknowledgeFailed>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e02d      	b.n	8005c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d021      	beq.n	8005bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb2:	f7fe fd99 	bl	80046e8 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d116      	bne.n	8005bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f043 0220 	orr.w	r2, r3, #32
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e007      	b.n	8005c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c00:	2b80      	cmp	r3, #128	; 0x80
 8005c02:	d1ca      	bne.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c1a:	e02d      	b.n	8005c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f88d 	bl	8005d3c <I2C_IsAcknowledgeFailed>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e02d      	b.n	8005c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d021      	beq.n	8005c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c34:	f7fe fd58 	bl	80046e8 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d302      	bcc.n	8005c4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d116      	bne.n	8005c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e007      	b.n	8005c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d1ca      	bne.n	8005c1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c9c:	e042      	b.n	8005d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d119      	bne.n	8005ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0210 	mvn.w	r2, #16
 8005cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e029      	b.n	8005d34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce0:	f7fe fd02 	bl	80046e8 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d302      	bcc.n	8005cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d116      	bne.n	8005d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	f043 0220 	orr.w	r2, r3, #32
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e007      	b.n	8005d34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d1b5      	bne.n	8005c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d52:	d11b      	bne.n	8005d8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	f043 0204 	orr.w	r2, r3, #4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e272      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 8087 	beq.w	8005ec6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005db8:	4b92      	ldr	r3, [pc, #584]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 030c 	and.w	r3, r3, #12
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d00c      	beq.n	8005dde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005dc4:	4b8f      	ldr	r3, [pc, #572]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 030c 	and.w	r3, r3, #12
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d112      	bne.n	8005df6 <HAL_RCC_OscConfig+0x5e>
 8005dd0:	4b8c      	ldr	r3, [pc, #560]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ddc:	d10b      	bne.n	8005df6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dde:	4b89      	ldr	r3, [pc, #548]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d06c      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x12c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d168      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e24c      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfe:	d106      	bne.n	8005e0e <HAL_RCC_OscConfig+0x76>
 8005e00:	4b80      	ldr	r3, [pc, #512]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a7f      	ldr	r2, [pc, #508]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e02e      	b.n	8005e6c <HAL_RCC_OscConfig+0xd4>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x98>
 8005e16:	4b7b      	ldr	r3, [pc, #492]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a7a      	ldr	r2, [pc, #488]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	4b78      	ldr	r3, [pc, #480]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a77      	ldr	r2, [pc, #476]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e01d      	b.n	8005e6c <HAL_RCC_OscConfig+0xd4>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e38:	d10c      	bne.n	8005e54 <HAL_RCC_OscConfig+0xbc>
 8005e3a:	4b72      	ldr	r3, [pc, #456]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a71      	ldr	r2, [pc, #452]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	4b6f      	ldr	r3, [pc, #444]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6e      	ldr	r2, [pc, #440]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e00b      	b.n	8005e6c <HAL_RCC_OscConfig+0xd4>
 8005e54:	4b6b      	ldr	r3, [pc, #428]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a6a      	ldr	r2, [pc, #424]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	4b68      	ldr	r3, [pc, #416]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a67      	ldr	r2, [pc, #412]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d013      	beq.n	8005e9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e74:	f7fe fc38 	bl	80046e8 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e7c:	f7fe fc34 	bl	80046e8 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b64      	cmp	r3, #100	; 0x64
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e200      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8e:	4b5d      	ldr	r3, [pc, #372]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCC_OscConfig+0xe4>
 8005e9a:	e014      	b.n	8005ec6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9c:	f7fe fc24 	bl	80046e8 <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ea2:	e008      	b.n	8005eb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea4:	f7fe fc20 	bl	80046e8 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b64      	cmp	r3, #100	; 0x64
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e1ec      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eb6:	4b53      	ldr	r3, [pc, #332]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f0      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x10c>
 8005ec2:	e000      	b.n	8005ec6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d063      	beq.n	8005f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ed2:	4b4c      	ldr	r3, [pc, #304]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 030c 	and.w	r3, r3, #12
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ede:	4b49      	ldr	r3, [pc, #292]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d11c      	bne.n	8005f24 <HAL_RCC_OscConfig+0x18c>
 8005eea:	4b46      	ldr	r3, [pc, #280]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d116      	bne.n	8005f24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef6:	4b43      	ldr	r3, [pc, #268]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <HAL_RCC_OscConfig+0x176>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d001      	beq.n	8005f0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e1c0      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0e:	4b3d      	ldr	r3, [pc, #244]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4939      	ldr	r1, [pc, #228]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f22:	e03a      	b.n	8005f9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d020      	beq.n	8005f6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f2c:	4b36      	ldr	r3, [pc, #216]	; (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f32:	f7fe fbd9 	bl	80046e8 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f3a:	f7fe fbd5 	bl	80046e8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e1a1      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f4c:	4b2d      	ldr	r3, [pc, #180]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0f0      	beq.n	8005f3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f58:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	4927      	ldr	r1, [pc, #156]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	600b      	str	r3, [r1, #0]
 8005f6c:	e015      	b.n	8005f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f6e:	4b26      	ldr	r3, [pc, #152]	; (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f74:	f7fe fbb8 	bl	80046e8 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f7c:	f7fe fbb4 	bl	80046e8 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e180      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8e:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d03a      	beq.n	800601c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d019      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fae:	4b17      	ldr	r3, [pc, #92]	; (800600c <HAL_RCC_OscConfig+0x274>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb4:	f7fe fb98 	bl	80046e8 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fbc:	f7fe fb94 	bl	80046e8 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e160      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f0      	beq.n	8005fbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005fda:	2001      	movs	r0, #1
 8005fdc:	f000 fad8 	bl	8006590 <RCC_Delay>
 8005fe0:	e01c      	b.n	800601c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <HAL_RCC_OscConfig+0x274>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe8:	f7fe fb7e 	bl	80046e8 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fee:	e00f      	b.n	8006010 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ff0:	f7fe fb7a 	bl	80046e8 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d908      	bls.n	8006010 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e146      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
 8006002:	bf00      	nop
 8006004:	40021000 	.word	0x40021000
 8006008:	42420000 	.word	0x42420000
 800600c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006010:	4b92      	ldr	r3, [pc, #584]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e9      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80a6 	beq.w	8006176 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800602a:	2300      	movs	r3, #0
 800602c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800602e:	4b8b      	ldr	r3, [pc, #556]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10d      	bne.n	8006056 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800603a:	4b88      	ldr	r3, [pc, #544]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	4a87      	ldr	r2, [pc, #540]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 8006040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006044:	61d3      	str	r3, [r2, #28]
 8006046:	4b85      	ldr	r3, [pc, #532]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604e:	60bb      	str	r3, [r7, #8]
 8006050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006052:	2301      	movs	r3, #1
 8006054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006056:	4b82      	ldr	r3, [pc, #520]	; (8006260 <HAL_RCC_OscConfig+0x4c8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605e:	2b00      	cmp	r3, #0
 8006060:	d118      	bne.n	8006094 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006062:	4b7f      	ldr	r3, [pc, #508]	; (8006260 <HAL_RCC_OscConfig+0x4c8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a7e      	ldr	r2, [pc, #504]	; (8006260 <HAL_RCC_OscConfig+0x4c8>)
 8006068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800606e:	f7fe fb3b 	bl	80046e8 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006076:	f7fe fb37 	bl	80046e8 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b64      	cmp	r3, #100	; 0x64
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e103      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006088:	4b75      	ldr	r3, [pc, #468]	; (8006260 <HAL_RCC_OscConfig+0x4c8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f0      	beq.n	8006076 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d106      	bne.n	80060aa <HAL_RCC_OscConfig+0x312>
 800609c:	4b6f      	ldr	r3, [pc, #444]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	4a6e      	ldr	r2, [pc, #440]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6213      	str	r3, [r2, #32]
 80060a8:	e02d      	b.n	8006106 <HAL_RCC_OscConfig+0x36e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10c      	bne.n	80060cc <HAL_RCC_OscConfig+0x334>
 80060b2:	4b6a      	ldr	r3, [pc, #424]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	4a69      	ldr	r2, [pc, #420]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	6213      	str	r3, [r2, #32]
 80060be:	4b67      	ldr	r3, [pc, #412]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	4a66      	ldr	r2, [pc, #408]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060c4:	f023 0304 	bic.w	r3, r3, #4
 80060c8:	6213      	str	r3, [r2, #32]
 80060ca:	e01c      	b.n	8006106 <HAL_RCC_OscConfig+0x36e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d10c      	bne.n	80060ee <HAL_RCC_OscConfig+0x356>
 80060d4:	4b61      	ldr	r3, [pc, #388]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	4a60      	ldr	r2, [pc, #384]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060da:	f043 0304 	orr.w	r3, r3, #4
 80060de:	6213      	str	r3, [r2, #32]
 80060e0:	4b5e      	ldr	r3, [pc, #376]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	4a5d      	ldr	r2, [pc, #372]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6213      	str	r3, [r2, #32]
 80060ec:	e00b      	b.n	8006106 <HAL_RCC_OscConfig+0x36e>
 80060ee:	4b5b      	ldr	r3, [pc, #364]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	4a5a      	ldr	r2, [pc, #360]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	6213      	str	r3, [r2, #32]
 80060fa:	4b58      	ldr	r3, [pc, #352]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	4a57      	ldr	r2, [pc, #348]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 8006100:	f023 0304 	bic.w	r3, r3, #4
 8006104:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d015      	beq.n	800613a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610e:	f7fe faeb 	bl	80046e8 <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006114:	e00a      	b.n	800612c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006116:	f7fe fae7 	bl	80046e8 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	f241 3288 	movw	r2, #5000	; 0x1388
 8006124:	4293      	cmp	r3, r2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e0b1      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612c:	4b4b      	ldr	r3, [pc, #300]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0ee      	beq.n	8006116 <HAL_RCC_OscConfig+0x37e>
 8006138:	e014      	b.n	8006164 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613a:	f7fe fad5 	bl	80046e8 <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006140:	e00a      	b.n	8006158 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006142:	f7fe fad1 	bl	80046e8 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006150:	4293      	cmp	r3, r2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e09b      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006158:	4b40      	ldr	r3, [pc, #256]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1ee      	bne.n	8006142 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006164:	7dfb      	ldrb	r3, [r7, #23]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d105      	bne.n	8006176 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800616a:	4b3c      	ldr	r3, [pc, #240]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	4a3b      	ldr	r2, [pc, #236]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 8006170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006174:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8087 	beq.w	800628e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006180:	4b36      	ldr	r3, [pc, #216]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 030c 	and.w	r3, r3, #12
 8006188:	2b08      	cmp	r3, #8
 800618a:	d061      	beq.n	8006250 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d146      	bne.n	8006222 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006194:	4b33      	ldr	r3, [pc, #204]	; (8006264 <HAL_RCC_OscConfig+0x4cc>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619a:	f7fe faa5 	bl	80046e8 <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061a0:	e008      	b.n	80061b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a2:	f7fe faa1 	bl	80046e8 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e06d      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061b4:	4b29      	ldr	r3, [pc, #164]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f0      	bne.n	80061a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d108      	bne.n	80061dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061ca:	4b24      	ldr	r3, [pc, #144]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	4921      	ldr	r1, [pc, #132]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061dc:	4b1f      	ldr	r3, [pc, #124]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a19      	ldr	r1, [r3, #32]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	430b      	orrs	r3, r1
 80061ee:	491b      	ldr	r1, [pc, #108]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f4:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <HAL_RCC_OscConfig+0x4cc>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fa:	f7fe fa75 	bl	80046e8 <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006202:	f7fe fa71 	bl	80046e8 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e03d      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006214:	4b11      	ldr	r3, [pc, #68]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <HAL_RCC_OscConfig+0x46a>
 8006220:	e035      	b.n	800628e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006222:	4b10      	ldr	r3, [pc, #64]	; (8006264 <HAL_RCC_OscConfig+0x4cc>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006228:	f7fe fa5e 	bl	80046e8 <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006230:	f7fe fa5a 	bl	80046e8 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e026      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006242:	4b06      	ldr	r3, [pc, #24]	; (800625c <HAL_RCC_OscConfig+0x4c4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f0      	bne.n	8006230 <HAL_RCC_OscConfig+0x498>
 800624e:	e01e      	b.n	800628e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d107      	bne.n	8006268 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e019      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
 800625c:	40021000 	.word	0x40021000
 8006260:	40007000 	.word	0x40007000
 8006264:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006268:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <HAL_RCC_OscConfig+0x500>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	429a      	cmp	r2, r3
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006286:	429a      	cmp	r2, r3
 8006288:	d001      	beq.n	800628e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40021000 	.word	0x40021000

0800629c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e0d0      	b.n	8006452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062b0:	4b6a      	ldr	r3, [pc, #424]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d910      	bls.n	80062e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062be:	4b67      	ldr	r3, [pc, #412]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f023 0207 	bic.w	r2, r3, #7
 80062c6:	4965      	ldr	r1, [pc, #404]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ce:	4b63      	ldr	r3, [pc, #396]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d001      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0b8      	b.n	8006452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d020      	beq.n	800632e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062f8:	4b59      	ldr	r3, [pc, #356]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4a58      	ldr	r2, [pc, #352]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 80062fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0308 	and.w	r3, r3, #8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006310:	4b53      	ldr	r3, [pc, #332]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4a52      	ldr	r2, [pc, #328]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 8006316:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800631a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800631c:	4b50      	ldr	r3, [pc, #320]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	494d      	ldr	r1, [pc, #308]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 800632a:	4313      	orrs	r3, r2
 800632c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d040      	beq.n	80063bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d107      	bne.n	8006352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006342:	4b47      	ldr	r3, [pc, #284]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d115      	bne.n	800637a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e07f      	b.n	8006452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d107      	bne.n	800636a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800635a:	4b41      	ldr	r3, [pc, #260]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e073      	b.n	8006452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636a:	4b3d      	ldr	r3, [pc, #244]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e06b      	b.n	8006452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800637a:	4b39      	ldr	r3, [pc, #228]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f023 0203 	bic.w	r2, r3, #3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	4936      	ldr	r1, [pc, #216]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 8006388:	4313      	orrs	r3, r2
 800638a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800638c:	f7fe f9ac 	bl	80046e8 <HAL_GetTick>
 8006390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006392:	e00a      	b.n	80063aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006394:	f7fe f9a8 	bl	80046e8 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e053      	b.n	8006452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063aa:	4b2d      	ldr	r3, [pc, #180]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 020c 	and.w	r2, r3, #12
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d1eb      	bne.n	8006394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063bc:	4b27      	ldr	r3, [pc, #156]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d210      	bcs.n	80063ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ca:	4b24      	ldr	r3, [pc, #144]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f023 0207 	bic.w	r2, r3, #7
 80063d2:	4922      	ldr	r1, [pc, #136]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063da:	4b20      	ldr	r3, [pc, #128]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d001      	beq.n	80063ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e032      	b.n	8006452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063f8:	4b19      	ldr	r3, [pc, #100]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	4916      	ldr	r1, [pc, #88]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	490e      	ldr	r1, [pc, #56]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 8006426:	4313      	orrs	r3, r2
 8006428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800642a:	f000 f821 	bl	8006470 <HAL_RCC_GetSysClockFreq>
 800642e:	4602      	mov	r2, r0
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	490a      	ldr	r1, [pc, #40]	; (8006464 <HAL_RCC_ClockConfig+0x1c8>)
 800643c:	5ccb      	ldrb	r3, [r1, r3]
 800643e:	fa22 f303 	lsr.w	r3, r2, r3
 8006442:	4a09      	ldr	r2, [pc, #36]	; (8006468 <HAL_RCC_ClockConfig+0x1cc>)
 8006444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <HAL_RCC_ClockConfig+0x1d0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe f90a 	bl	8004664 <HAL_InitTick>

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40022000 	.word	0x40022000
 8006460:	40021000 	.word	0x40021000
 8006464:	0800b900 	.word	0x0800b900
 8006468:	2000006c 	.word	0x2000006c
 800646c:	20000070 	.word	0x20000070

08006470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006470:	b490      	push	{r4, r7}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006476:	4b29      	ldr	r3, [pc, #164]	; (800651c <HAL_RCC_GetSysClockFreq+0xac>)
 8006478:	1d3c      	adds	r4, r7, #4
 800647a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800647c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006480:	f240 2301 	movw	r3, #513	; 0x201
 8006484:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	61fb      	str	r3, [r7, #28]
 800648a:	2300      	movs	r3, #0
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	2300      	movs	r3, #0
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800649a:	4b21      	ldr	r3, [pc, #132]	; (8006520 <HAL_RCC_GetSysClockFreq+0xb0>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f003 030c 	and.w	r3, r3, #12
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d002      	beq.n	80064b0 <HAL_RCC_GetSysClockFreq+0x40>
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d003      	beq.n	80064b6 <HAL_RCC_GetSysClockFreq+0x46>
 80064ae:	e02b      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064b0:	4b1c      	ldr	r3, [pc, #112]	; (8006524 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064b2:	623b      	str	r3, [r7, #32]
      break;
 80064b4:	e02b      	b.n	800650e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	0c9b      	lsrs	r3, r3, #18
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	3328      	adds	r3, #40	; 0x28
 80064c0:	443b      	add	r3, r7
 80064c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d012      	beq.n	80064f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064d2:	4b13      	ldr	r3, [pc, #76]	; (8006520 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	0c5b      	lsrs	r3, r3, #17
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	3328      	adds	r3, #40	; 0x28
 80064de:	443b      	add	r3, r7
 80064e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	4a0e      	ldr	r2, [pc, #56]	; (8006524 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064ea:	fb03 f202 	mul.w	r2, r3, r2
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
 80064f6:	e004      	b.n	8006502 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4a0b      	ldr	r2, [pc, #44]	; (8006528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	623b      	str	r3, [r7, #32]
      break;
 8006506:	e002      	b.n	800650e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <HAL_RCC_GetSysClockFreq+0xb4>)
 800650a:	623b      	str	r3, [r7, #32]
      break;
 800650c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800650e:	6a3b      	ldr	r3, [r7, #32]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3728      	adds	r7, #40	; 0x28
 8006514:	46bd      	mov	sp, r7
 8006516:	bc90      	pop	{r4, r7}
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	0800b8b0 	.word	0x0800b8b0
 8006520:	40021000 	.word	0x40021000
 8006524:	007a1200 	.word	0x007a1200
 8006528:	003d0900 	.word	0x003d0900

0800652c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006530:	4b02      	ldr	r3, [pc, #8]	; (800653c <HAL_RCC_GetHCLKFreq+0x10>)
 8006532:	681b      	ldr	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr
 800653c:	2000006c 	.word	0x2000006c

08006540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006544:	f7ff fff2 	bl	800652c <HAL_RCC_GetHCLKFreq>
 8006548:	4602      	mov	r2, r0
 800654a:	4b05      	ldr	r3, [pc, #20]	; (8006560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	0a1b      	lsrs	r3, r3, #8
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	4903      	ldr	r1, [pc, #12]	; (8006564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006556:	5ccb      	ldrb	r3, [r1, r3]
 8006558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800655c:	4618      	mov	r0, r3
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40021000 	.word	0x40021000
 8006564:	0800b910 	.word	0x0800b910

08006568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800656c:	f7ff ffde 	bl	800652c <HAL_RCC_GetHCLKFreq>
 8006570:	4602      	mov	r2, r0
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	0adb      	lsrs	r3, r3, #11
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	4903      	ldr	r1, [pc, #12]	; (800658c <HAL_RCC_GetPCLK2Freq+0x24>)
 800657e:	5ccb      	ldrb	r3, [r1, r3]
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006584:	4618      	mov	r0, r3
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40021000 	.word	0x40021000
 800658c:	0800b910 	.word	0x0800b910

08006590 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <RCC_Delay+0x34>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <RCC_Delay+0x38>)
 800659e:	fba2 2303 	umull	r2, r3, r2, r3
 80065a2:	0a5b      	lsrs	r3, r3, #9
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065ac:	bf00      	nop
  }
  while (Delay --);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	60fa      	str	r2, [r7, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f9      	bne.n	80065ac <RCC_Delay+0x1c>
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr
 80065c4:	2000006c 	.word	0x2000006c
 80065c8:	10624dd3 	.word	0x10624dd3

080065cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e041      	b.n	8006662 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fd fdf6 	bl	80041e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f000 fa7a 	bl	8006b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b01      	cmp	r3, #1
 800667e:	d001      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e03a      	b.n	80066fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a18      	ldr	r2, [pc, #96]	; (8006704 <HAL_TIM_Base_Start_IT+0x98>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00e      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x58>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ae:	d009      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x58>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a14      	ldr	r2, [pc, #80]	; (8006708 <HAL_TIM_Base_Start_IT+0x9c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x58>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a13      	ldr	r2, [pc, #76]	; (800670c <HAL_TIM_Base_Start_IT+0xa0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d111      	bne.n	80066e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b06      	cmp	r3, #6
 80066d4:	d010      	beq.n	80066f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0201 	orr.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e6:	e007      	b.n	80066f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800

08006710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d122      	bne.n	800676c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b02      	cmp	r3, #2
 8006732:	d11b      	bne.n	800676c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0202 	mvn.w	r2, #2
 800673c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f9ba 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
 8006758:	e005      	b.n	8006766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9ad 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f9bc 	bl	8006ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b04      	cmp	r3, #4
 8006778:	d122      	bne.n	80067c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b04      	cmp	r3, #4
 8006786:	d11b      	bne.n	80067c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0204 	mvn.w	r2, #4
 8006790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2202      	movs	r2, #2
 8006796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f990 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
 80067ac:	e005      	b.n	80067ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f983 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f992 	bl	8006ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d122      	bne.n	8006814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d11b      	bne.n	8006814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0208 	mvn.w	r2, #8
 80067e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2204      	movs	r2, #4
 80067ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f966 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
 8006800:	e005      	b.n	800680e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f959 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f968 	bl	8006ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b10      	cmp	r3, #16
 8006820:	d122      	bne.n	8006868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b10      	cmp	r3, #16
 800682e:	d11b      	bne.n	8006868 <HAL_TIM_IRQHandler+0x158>
    {

    	__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0210 	mvn.w	r2, #16
 8006838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2208      	movs	r2, #8
 800683e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f93c 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
 8006854:	e005      	b.n	8006862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f92f 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f93e 	bl	8006ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b01      	cmp	r3, #1
 8006874:	d10e      	bne.n	8006894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b01      	cmp	r3, #1
 8006882:	d107      	bne.n	8006894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f06f 0201 	mvn.w	r2, #1
 800688c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f90a 	bl	8006aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689e:	2b80      	cmp	r3, #128	; 0x80
 80068a0:	d10e      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ac:	2b80      	cmp	r3, #128	; 0x80
 80068ae:	d107      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa81 	bl	8006dc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d10e      	bne.n	80068ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d107      	bne.n	80068ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f902 	bl	8006af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d10e      	bne.n	8006918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b20      	cmp	r3, #32
 8006906:	d107      	bne.n	8006918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0220 	mvn.w	r2, #32
 8006910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa4c 	bl	8006db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIM_ConfigClockSource+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e0b3      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x180>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006970:	d03e      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0xd0>
 8006972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006976:	f200 8087 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x168>
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	f000 8085 	beq.w	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 8006982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006986:	d87f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x168>
 8006988:	2b70      	cmp	r3, #112	; 0x70
 800698a:	d01a      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0xa2>
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d87b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x168>
 8006990:	2b60      	cmp	r3, #96	; 0x60
 8006992:	d050      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x116>
 8006994:	2b60      	cmp	r3, #96	; 0x60
 8006996:	d877      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x168>
 8006998:	2b50      	cmp	r3, #80	; 0x50
 800699a:	d03c      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0xf6>
 800699c:	2b50      	cmp	r3, #80	; 0x50
 800699e:	d873      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x168>
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d058      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x136>
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d86f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x168>
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d064      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x156>
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d86b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x168>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d060      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x156>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d867      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x168>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d05c      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x156>
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d05a      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80069c0:	e062      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6899      	ldr	r1, [r3, #8]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f000 f970 	bl	8006cb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	609a      	str	r2, [r3, #8]
      break;
 80069ee:	e04e      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	6899      	ldr	r1, [r3, #8]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f000 f959 	bl	8006cb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a12:	609a      	str	r2, [r3, #8]
      break;
 8006a14:	e03b      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f000 f8d0 	bl	8006bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2150      	movs	r1, #80	; 0x50
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f927 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 8006a34:	e02b      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f000 f8ee 	bl	8006c24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2160      	movs	r1, #96	; 0x60
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f917 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 8006a54:	e01b      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6859      	ldr	r1, [r3, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f000 f8b0 	bl	8006bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2140      	movs	r1, #64	; 0x40
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f907 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 8006a74:	e00b      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f000 f8fe 	bl	8006c82 <TIM_ITRx_SetConfig>
        break;
 8006a86:	e002      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a88:	bf00      	nop
 8006a8a:	e000      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr

08006aba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr

08006ade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
	...

08006b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a29      	ldr	r2, [pc, #164]	; (8006bbc <TIM_Base_SetConfig+0xb8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00b      	beq.n	8006b34 <TIM_Base_SetConfig+0x30>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b22:	d007      	beq.n	8006b34 <TIM_Base_SetConfig+0x30>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a26      	ldr	r2, [pc, #152]	; (8006bc0 <TIM_Base_SetConfig+0xbc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_Base_SetConfig+0x30>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a25      	ldr	r2, [pc, #148]	; (8006bc4 <TIM_Base_SetConfig+0xc0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d108      	bne.n	8006b46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1c      	ldr	r2, [pc, #112]	; (8006bbc <TIM_Base_SetConfig+0xb8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00b      	beq.n	8006b66 <TIM_Base_SetConfig+0x62>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b54:	d007      	beq.n	8006b66 <TIM_Base_SetConfig+0x62>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a19      	ldr	r2, [pc, #100]	; (8006bc0 <TIM_Base_SetConfig+0xbc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_Base_SetConfig+0x62>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a18      	ldr	r2, [pc, #96]	; (8006bc4 <TIM_Base_SetConfig+0xc0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a07      	ldr	r2, [pc, #28]	; (8006bbc <TIM_Base_SetConfig+0xb8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d103      	bne.n	8006bac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	615a      	str	r2, [r3, #20]
}
 8006bb2:	bf00      	nop
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800

08006bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0201 	bic.w	r2, r3, #1
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 030a 	bic.w	r3, r3, #10
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr

08006c24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f023 0210 	bic.w	r2, r3, #16
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	031b      	lsls	r3, r3, #12
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	621a      	str	r2, [r3, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bc80      	pop	{r7}
 8006c80:	4770      	bx	lr

08006c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f043 0307 	orr.w	r3, r3, #7
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b087      	sub	sp, #28
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
 8006cc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	021a      	lsls	r2, r3, #8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	609a      	str	r2, [r3, #8]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e046      	b.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a16      	ldr	r2, [pc, #88]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d58:	d009      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a12      	ldr	r2, [pc, #72]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a10      	ldr	r2, [pc, #64]	; (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10c      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800

08006db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e03f      	b.n	8006e66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fd fa18 	bl	8004230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2224      	movs	r2, #36	; 0x24
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fc85 	bl	8007728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b08a      	sub	sp, #40	; 0x28
 8006e72:	af02      	add	r7, sp, #8
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d17c      	bne.n	8006f88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <HAL_UART_Transmit+0x2c>
 8006e94:	88fb      	ldrh	r3, [r7, #6]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e075      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_UART_Transmit+0x3e>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e06e      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2221      	movs	r2, #33	; 0x21
 8006ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ec2:	f7fd fc11 	bl	80046e8 <HAL_GetTick>
 8006ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	88fa      	ldrh	r2, [r7, #6]
 8006ecc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	88fa      	ldrh	r2, [r7, #6]
 8006ed2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006edc:	d108      	bne.n	8006ef0 <HAL_UART_Transmit+0x82>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d104      	bne.n	8006ef0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	e003      	b.n	8006ef8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f00:	e02a      	b.n	8006f58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2180      	movs	r1, #128	; 0x80
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 fa38 	bl	8007382 <UART_WaitOnFlagUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e036      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10b      	bne.n	8006f3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	3302      	adds	r3, #2
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	e007      	b.n	8006f4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	781a      	ldrb	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	3301      	adds	r3, #1
 8006f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1cf      	bne.n	8006f02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2140      	movs	r1, #64	; 0x40
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fa08 	bl	8007382 <UART_WaitOnFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e006      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	e000      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f88:	2302      	movs	r3, #2
  }
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3720      	adds	r7, #32
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b20      	cmp	r3, #32
 8006faa:	d11d      	bne.n	8006fe8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_UART_Receive_IT+0x26>
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e016      	b.n	8006fea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_UART_Receive_IT+0x38>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e00f      	b.n	8006fea <HAL_UART_Receive_IT+0x58>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fa19 	bl	8007416 <UART_Start_Receive_IT>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	e000      	b.n	8006fea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006fe8:	2302      	movs	r3, #2
  }
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08a      	sub	sp, #40	; 0x28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10d      	bne.n	8007046 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	f003 0320 	and.w	r3, r3, #32
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_UART_IRQHandler+0x52>
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fac9 	bl	80075d6 <UART_Receive_IT>
      return;
 8007044:	e17b      	b.n	800733e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80b1 	beq.w	80071b0 <HAL_UART_IRQHandler+0x1bc>
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d105      	bne.n	8007064 <HAL_UART_IRQHandler+0x70>
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 80a6 	beq.w	80071b0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_UART_IRQHandler+0x90>
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	f043 0201 	orr.w	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <HAL_UART_IRQHandler+0xb0>
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	f043 0202 	orr.w	r2, r3, #2
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <HAL_UART_IRQHandler+0xd0>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	f043 0204 	orr.w	r2, r3, #4
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00f      	beq.n	80070ee <HAL_UART_IRQHandler+0xfa>
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <HAL_UART_IRQHandler+0xee>
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	f043 0208 	orr.w	r2, r3, #8
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 811e 	beq.w	8007334 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <HAL_UART_IRQHandler+0x11e>
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa62 	bl	80075d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	bf14      	ite	ne
 8007120:	2301      	movne	r3, #1
 8007122:	2300      	moveq	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <HAL_UART_IRQHandler+0x146>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d031      	beq.n	800719e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f9a4 	bl	8007488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714a:	2b00      	cmp	r3, #0
 800714c:	d023      	beq.n	8007196 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695a      	ldr	r2, [r3, #20]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	2b00      	cmp	r3, #0
 8007164:	d013      	beq.n	800718e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	4a76      	ldr	r2, [pc, #472]	; (8007344 <HAL_UART_IRQHandler+0x350>)
 800716c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	4618      	mov	r0, r3
 8007174:	f7fd fbfe 	bl	8004974 <HAL_DMA_Abort_IT>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d016      	beq.n	80071ac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718c:	e00e      	b.n	80071ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f8e3 	bl	800735a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007194:	e00a      	b.n	80071ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8df 	bl	800735a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719c:	e006      	b.n	80071ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f8db 	bl	800735a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071aa:	e0c3      	b.n	8007334 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ac:	bf00      	nop
    return;
 80071ae:	e0c1      	b.n	8007334 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	f040 80a1 	bne.w	80072fc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 809b 	beq.w	80072fc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 8095 	beq.w	80072fc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d04e      	beq.n	8007294 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007200:	8a3b      	ldrh	r3, [r7, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 8098 	beq.w	8007338 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800720c:	8a3a      	ldrh	r2, [r7, #16]
 800720e:	429a      	cmp	r2, r3
 8007210:	f080 8092 	bcs.w	8007338 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	8a3a      	ldrh	r2, [r7, #16]
 8007218:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b20      	cmp	r3, #32
 8007222:	d02b      	beq.n	800727c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007232:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695a      	ldr	r2, [r3, #20]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695a      	ldr	r2, [r3, #20]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007252:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0210 	bic.w	r2, r2, #16
 8007270:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	4618      	mov	r0, r3
 8007278:	f7fd fb42 	bl	8004900 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007284:	b29b      	uxth	r3, r3
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	b29b      	uxth	r3, r3
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f86d 	bl	800736c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007292:	e051      	b.n	8007338 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800729c:	b29b      	uxth	r3, r3
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d047      	beq.n	800733c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80072ac:	8a7b      	ldrh	r3, [r7, #18]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d044      	beq.n	800733c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072c0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695a      	ldr	r2, [r3, #20]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0201 	bic.w	r2, r2, #1
 80072d0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0210 	bic.w	r2, r2, #16
 80072ee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072f0:	8a7b      	ldrh	r3, [r7, #18]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f839 	bl	800736c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80072fa:	e01f      	b.n	800733c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	2b00      	cmp	r3, #0
 8007304:	d008      	beq.n	8007318 <HAL_UART_IRQHandler+0x324>
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f8f9 	bl	8007508 <UART_Transmit_IT>
    return;
 8007316:	e012      	b.n	800733e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00d      	beq.n	800733e <HAL_UART_IRQHandler+0x34a>
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f93a 	bl	80075a6 <UART_EndTransmit_IT>
    return;
 8007332:	e004      	b.n	800733e <HAL_UART_IRQHandler+0x34a>
    return;
 8007334:	bf00      	nop
 8007336:	e002      	b.n	800733e <HAL_UART_IRQHandler+0x34a>
      return;
 8007338:	bf00      	nop
 800733a:	e000      	b.n	800733e <HAL_UART_IRQHandler+0x34a>
      return;
 800733c:	bf00      	nop
  }
}
 800733e:	3728      	adds	r7, #40	; 0x28
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	080074e1 	.word	0x080074e1

08007348 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	bc80      	pop	{r7}
 8007358:	4770      	bx	lr

0800735a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr

0800736c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr

08007382 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007392:	e02c      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739a:	d028      	beq.n	80073ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80073a2:	f7fd f9a1 	bl	80046e8 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d21d      	bcs.n	80073ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695a      	ldr	r2, [r3, #20]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0201 	bic.w	r2, r2, #1
 80073d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2220      	movs	r2, #32
 80073de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e00f      	b.n	800740e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	bf0c      	ite	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	2300      	movne	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	429a      	cmp	r2, r3
 800740a:	d0c3      	beq.n	8007394 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	4613      	mov	r3, r2
 8007422:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2222      	movs	r2, #34	; 0x22
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800745a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695a      	ldr	r2, [r3, #20]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0220 	orr.w	r2, r2, #32
 800747a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr

08007488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800749e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695a      	ldr	r2, [r3, #20]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0201 	bic.w	r2, r2, #1
 80074ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d107      	bne.n	80074c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0210 	bic.w	r2, r2, #16
 80074c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr

080074e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff ff2d 	bl	800735a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b21      	cmp	r3, #33	; 0x21
 800751a:	d13e      	bne.n	800759a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007524:	d114      	bne.n	8007550 <UART_Transmit_IT+0x48>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d110      	bne.n	8007550 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007542:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	1c9a      	adds	r2, r3, #2
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	621a      	str	r2, [r3, #32]
 800754e:	e008      	b.n	8007562 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	1c59      	adds	r1, r3, #1
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6211      	str	r1, [r2, #32]
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29b      	uxth	r3, r3
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4619      	mov	r1, r3
 8007570:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10f      	bne.n	8007596 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007584:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007594:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	e000      	b.n	800759c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800759a:	2302      	movs	r3, #2
  }
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff febe 	bl	8007348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b22      	cmp	r3, #34	; 0x22
 80075e8:	f040 8099 	bne.w	800771e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f4:	d117      	bne.n	8007626 <UART_Receive_IT+0x50>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d113      	bne.n	8007626 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	b29b      	uxth	r3, r3
 8007610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007614:	b29a      	uxth	r2, r3
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	1c9a      	adds	r2, r3, #2
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	629a      	str	r2, [r3, #40]	; 0x28
 8007624:	e026      	b.n	8007674 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007638:	d007      	beq.n	800764a <UART_Receive_IT+0x74>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <UART_Receive_IT+0x82>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	e008      	b.n	800766a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007664:	b2da      	uxtb	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29b      	uxth	r3, r3
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	4619      	mov	r1, r3
 8007682:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007684:	2b00      	cmp	r3, #0
 8007686:	d148      	bne.n	800771a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0220 	bic.w	r2, r2, #32
 8007696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695a      	ldr	r2, [r3, #20]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 0201 	bic.w	r2, r2, #1
 80076b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d123      	bne.n	8007710 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0210 	bic.w	r2, r2, #16
 80076dc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d10a      	bne.n	8007702 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff fe2f 	bl	800736c <HAL_UARTEx_RxEventCallback>
 800770e:	e002      	b.n	8007716 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7fc fcbd 	bl	8004090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	e002      	b.n	8007720 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e000      	b.n	8007720 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800771e:	2302      	movs	r3, #2
  }
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007762:	f023 030c 	bic.w	r3, r3, #12
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	430b      	orrs	r3, r1
 800776e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a2c      	ldr	r2, [pc, #176]	; (800783c <UART_SetConfig+0x114>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d103      	bne.n	8007798 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007790:	f7fe feea 	bl	8006568 <HAL_RCC_GetPCLK2Freq>
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	e002      	b.n	800779e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007798:	f7fe fed2 	bl	8006540 <HAL_RCC_GetPCLK1Freq>
 800779c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009a      	lsls	r2, r3, #2
 80077a8:	441a      	add	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b4:	4a22      	ldr	r2, [pc, #136]	; (8007840 <UART_SetConfig+0x118>)
 80077b6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	0119      	lsls	r1, r3, #4
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009a      	lsls	r2, r3, #2
 80077c8:	441a      	add	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80077d4:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <UART_SetConfig+0x118>)
 80077d6:	fba3 0302 	umull	r0, r3, r3, r2
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	2064      	movs	r0, #100	; 0x64
 80077de:	fb00 f303 	mul.w	r3, r0, r3
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	3332      	adds	r3, #50	; 0x32
 80077e8:	4a15      	ldr	r2, [pc, #84]	; (8007840 <UART_SetConfig+0x118>)
 80077ea:	fba2 2303 	umull	r2, r3, r2, r3
 80077ee:	095b      	lsrs	r3, r3, #5
 80077f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077f4:	4419      	add	r1, r3
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009a      	lsls	r2, r3, #2
 8007800:	441a      	add	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	fbb2 f2f3 	udiv	r2, r2, r3
 800780c:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <UART_SetConfig+0x118>)
 800780e:	fba3 0302 	umull	r0, r3, r3, r2
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	2064      	movs	r0, #100	; 0x64
 8007816:	fb00 f303 	mul.w	r3, r0, r3
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	3332      	adds	r3, #50	; 0x32
 8007820:	4a07      	ldr	r2, [pc, #28]	; (8007840 <UART_SetConfig+0x118>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	f003 020f 	and.w	r2, r3, #15
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	440a      	add	r2, r1
 8007832:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	40013800 	.word	0x40013800
 8007840:	51eb851f 	.word	0x51eb851f

08007844 <__errno>:
 8007844:	4b01      	ldr	r3, [pc, #4]	; (800784c <__errno+0x8>)
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	20000078 	.word	0x20000078

08007850 <__libc_init_array>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	2600      	movs	r6, #0
 8007854:	4d0c      	ldr	r5, [pc, #48]	; (8007888 <__libc_init_array+0x38>)
 8007856:	4c0d      	ldr	r4, [pc, #52]	; (800788c <__libc_init_array+0x3c>)
 8007858:	1b64      	subs	r4, r4, r5
 800785a:	10a4      	asrs	r4, r4, #2
 800785c:	42a6      	cmp	r6, r4
 800785e:	d109      	bne.n	8007874 <__libc_init_array+0x24>
 8007860:	f003 fff8 	bl	800b854 <_init>
 8007864:	2600      	movs	r6, #0
 8007866:	4d0a      	ldr	r5, [pc, #40]	; (8007890 <__libc_init_array+0x40>)
 8007868:	4c0a      	ldr	r4, [pc, #40]	; (8007894 <__libc_init_array+0x44>)
 800786a:	1b64      	subs	r4, r4, r5
 800786c:	10a4      	asrs	r4, r4, #2
 800786e:	42a6      	cmp	r6, r4
 8007870:	d105      	bne.n	800787e <__libc_init_array+0x2e>
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	f855 3b04 	ldr.w	r3, [r5], #4
 8007878:	4798      	blx	r3
 800787a:	3601      	adds	r6, #1
 800787c:	e7ee      	b.n	800785c <__libc_init_array+0xc>
 800787e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007882:	4798      	blx	r3
 8007884:	3601      	adds	r6, #1
 8007886:	e7f2      	b.n	800786e <__libc_init_array+0x1e>
 8007888:	0800bdf0 	.word	0x0800bdf0
 800788c:	0800bdf0 	.word	0x0800bdf0
 8007890:	0800bdf0 	.word	0x0800bdf0
 8007894:	0800bdf4 	.word	0x0800bdf4

08007898 <memcpy>:
 8007898:	440a      	add	r2, r1
 800789a:	4291      	cmp	r1, r2
 800789c:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a0:	d100      	bne.n	80078a4 <memcpy+0xc>
 80078a2:	4770      	bx	lr
 80078a4:	b510      	push	{r4, lr}
 80078a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078aa:	4291      	cmp	r1, r2
 80078ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b0:	d1f9      	bne.n	80078a6 <memcpy+0xe>
 80078b2:	bd10      	pop	{r4, pc}

080078b4 <memset>:
 80078b4:	4603      	mov	r3, r0
 80078b6:	4402      	add	r2, r0
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d100      	bne.n	80078be <memset+0xa>
 80078bc:	4770      	bx	lr
 80078be:	f803 1b01 	strb.w	r1, [r3], #1
 80078c2:	e7f9      	b.n	80078b8 <memset+0x4>

080078c4 <strncmp>:
 80078c4:	4603      	mov	r3, r0
 80078c6:	b510      	push	{r4, lr}
 80078c8:	b172      	cbz	r2, 80078e8 <strncmp+0x24>
 80078ca:	3901      	subs	r1, #1
 80078cc:	1884      	adds	r4, r0, r2
 80078ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80078d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80078d6:	4290      	cmp	r0, r2
 80078d8:	d101      	bne.n	80078de <strncmp+0x1a>
 80078da:	42a3      	cmp	r3, r4
 80078dc:	d101      	bne.n	80078e2 <strncmp+0x1e>
 80078de:	1a80      	subs	r0, r0, r2
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d1f3      	bne.n	80078ce <strncmp+0xa>
 80078e6:	e7fa      	b.n	80078de <strncmp+0x1a>
 80078e8:	4610      	mov	r0, r2
 80078ea:	e7f9      	b.n	80078e0 <strncmp+0x1c>

080078ec <sulp>:
 80078ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f0:	460f      	mov	r7, r1
 80078f2:	4690      	mov	r8, r2
 80078f4:	f001 fcf8 	bl	80092e8 <__ulp>
 80078f8:	4604      	mov	r4, r0
 80078fa:	460d      	mov	r5, r1
 80078fc:	f1b8 0f00 	cmp.w	r8, #0
 8007900:	d011      	beq.n	8007926 <sulp+0x3a>
 8007902:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007906:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd0b      	ble.n	8007926 <sulp+0x3a>
 800790e:	2400      	movs	r4, #0
 8007910:	051b      	lsls	r3, r3, #20
 8007912:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007916:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800791a:	4622      	mov	r2, r4
 800791c:	462b      	mov	r3, r5
 800791e:	f7f8 fddb 	bl	80004d8 <__aeabi_dmul>
 8007922:	4604      	mov	r4, r0
 8007924:	460d      	mov	r5, r1
 8007926:	4620      	mov	r0, r4
 8007928:	4629      	mov	r1, r5
 800792a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007930 <_strtod_l>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	469b      	mov	fp, r3
 8007936:	2300      	movs	r3, #0
 8007938:	b09f      	sub	sp, #124	; 0x7c
 800793a:	931a      	str	r3, [sp, #104]	; 0x68
 800793c:	4b9e      	ldr	r3, [pc, #632]	; (8007bb8 <_strtod_l+0x288>)
 800793e:	4682      	mov	sl, r0
 8007940:	681f      	ldr	r7, [r3, #0]
 8007942:	460e      	mov	r6, r1
 8007944:	4638      	mov	r0, r7
 8007946:	9215      	str	r2, [sp, #84]	; 0x54
 8007948:	f7f8 fc02 	bl	8000150 <strlen>
 800794c:	f04f 0800 	mov.w	r8, #0
 8007950:	4604      	mov	r4, r0
 8007952:	f04f 0900 	mov.w	r9, #0
 8007956:	9619      	str	r6, [sp, #100]	; 0x64
 8007958:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800795a:	781a      	ldrb	r2, [r3, #0]
 800795c:	2a2b      	cmp	r2, #43	; 0x2b
 800795e:	d04c      	beq.n	80079fa <_strtod_l+0xca>
 8007960:	d83a      	bhi.n	80079d8 <_strtod_l+0xa8>
 8007962:	2a0d      	cmp	r2, #13
 8007964:	d833      	bhi.n	80079ce <_strtod_l+0x9e>
 8007966:	2a08      	cmp	r2, #8
 8007968:	d833      	bhi.n	80079d2 <_strtod_l+0xa2>
 800796a:	2a00      	cmp	r2, #0
 800796c:	d03d      	beq.n	80079ea <_strtod_l+0xba>
 800796e:	2300      	movs	r3, #0
 8007970:	930a      	str	r3, [sp, #40]	; 0x28
 8007972:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007974:	782b      	ldrb	r3, [r5, #0]
 8007976:	2b30      	cmp	r3, #48	; 0x30
 8007978:	f040 80aa 	bne.w	8007ad0 <_strtod_l+0x1a0>
 800797c:	786b      	ldrb	r3, [r5, #1]
 800797e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007982:	2b58      	cmp	r3, #88	; 0x58
 8007984:	d166      	bne.n	8007a54 <_strtod_l+0x124>
 8007986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007988:	4650      	mov	r0, sl
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	ab1a      	add	r3, sp, #104	; 0x68
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	4a8a      	ldr	r2, [pc, #552]	; (8007bbc <_strtod_l+0x28c>)
 8007992:	f8cd b008 	str.w	fp, [sp, #8]
 8007996:	ab1b      	add	r3, sp, #108	; 0x6c
 8007998:	a919      	add	r1, sp, #100	; 0x64
 800799a:	f000 fe25 	bl	80085e8 <__gethex>
 800799e:	f010 0607 	ands.w	r6, r0, #7
 80079a2:	4604      	mov	r4, r0
 80079a4:	d005      	beq.n	80079b2 <_strtod_l+0x82>
 80079a6:	2e06      	cmp	r6, #6
 80079a8:	d129      	bne.n	80079fe <_strtod_l+0xce>
 80079aa:	2300      	movs	r3, #0
 80079ac:	3501      	adds	r5, #1
 80079ae:	9519      	str	r5, [sp, #100]	; 0x64
 80079b0:	930a      	str	r3, [sp, #40]	; 0x28
 80079b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f040 858a 	bne.w	80084ce <_strtod_l+0xb9e>
 80079ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079bc:	b1d3      	cbz	r3, 80079f4 <_strtod_l+0xc4>
 80079be:	4642      	mov	r2, r8
 80079c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80079c4:	4610      	mov	r0, r2
 80079c6:	4619      	mov	r1, r3
 80079c8:	b01f      	add	sp, #124	; 0x7c
 80079ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ce:	2a20      	cmp	r2, #32
 80079d0:	d1cd      	bne.n	800796e <_strtod_l+0x3e>
 80079d2:	3301      	adds	r3, #1
 80079d4:	9319      	str	r3, [sp, #100]	; 0x64
 80079d6:	e7bf      	b.n	8007958 <_strtod_l+0x28>
 80079d8:	2a2d      	cmp	r2, #45	; 0x2d
 80079da:	d1c8      	bne.n	800796e <_strtod_l+0x3e>
 80079dc:	2201      	movs	r2, #1
 80079de:	920a      	str	r2, [sp, #40]	; 0x28
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	9219      	str	r2, [sp, #100]	; 0x64
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1c3      	bne.n	8007972 <_strtod_l+0x42>
 80079ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079ec:	9619      	str	r6, [sp, #100]	; 0x64
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f040 856b 	bne.w	80084ca <_strtod_l+0xb9a>
 80079f4:	4642      	mov	r2, r8
 80079f6:	464b      	mov	r3, r9
 80079f8:	e7e4      	b.n	80079c4 <_strtod_l+0x94>
 80079fa:	2200      	movs	r2, #0
 80079fc:	e7ef      	b.n	80079de <_strtod_l+0xae>
 80079fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a00:	b13a      	cbz	r2, 8007a12 <_strtod_l+0xe2>
 8007a02:	2135      	movs	r1, #53	; 0x35
 8007a04:	a81c      	add	r0, sp, #112	; 0x70
 8007a06:	f001 fd73 	bl	80094f0 <__copybits>
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a0e:	f001 f93b 	bl	8008c88 <_Bfree>
 8007a12:	3e01      	subs	r6, #1
 8007a14:	2e04      	cmp	r6, #4
 8007a16:	d806      	bhi.n	8007a26 <_strtod_l+0xf6>
 8007a18:	e8df f006 	tbb	[pc, r6]
 8007a1c:	1714030a 	.word	0x1714030a
 8007a20:	0a          	.byte	0x0a
 8007a21:	00          	.byte	0x00
 8007a22:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007a26:	0721      	lsls	r1, r4, #28
 8007a28:	d5c3      	bpl.n	80079b2 <_strtod_l+0x82>
 8007a2a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007a2e:	e7c0      	b.n	80079b2 <_strtod_l+0x82>
 8007a30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007a32:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007a36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a3e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007a42:	e7f0      	b.n	8007a26 <_strtod_l+0xf6>
 8007a44:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007bc0 <_strtod_l+0x290>
 8007a48:	e7ed      	b.n	8007a26 <_strtod_l+0xf6>
 8007a4a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007a4e:	f04f 38ff 	mov.w	r8, #4294967295
 8007a52:	e7e8      	b.n	8007a26 <_strtod_l+0xf6>
 8007a54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	9219      	str	r2, [sp, #100]	; 0x64
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	2b30      	cmp	r3, #48	; 0x30
 8007a5e:	d0f9      	beq.n	8007a54 <_strtod_l+0x124>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0a6      	beq.n	80079b2 <_strtod_l+0x82>
 8007a64:	2301      	movs	r3, #1
 8007a66:	9307      	str	r3, [sp, #28]
 8007a68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a6a:	220a      	movs	r2, #10
 8007a6c:	9308      	str	r3, [sp, #32]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	469b      	mov	fp, r3
 8007a72:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007a76:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007a78:	7805      	ldrb	r5, [r0, #0]
 8007a7a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007a7e:	b2d9      	uxtb	r1, r3
 8007a80:	2909      	cmp	r1, #9
 8007a82:	d927      	bls.n	8007ad4 <_strtod_l+0x1a4>
 8007a84:	4622      	mov	r2, r4
 8007a86:	4639      	mov	r1, r7
 8007a88:	f7ff ff1c 	bl	80078c4 <strncmp>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d033      	beq.n	8007af8 <_strtod_l+0x1c8>
 8007a90:	2000      	movs	r0, #0
 8007a92:	462a      	mov	r2, r5
 8007a94:	465c      	mov	r4, fp
 8007a96:	4603      	mov	r3, r0
 8007a98:	9004      	str	r0, [sp, #16]
 8007a9a:	2a65      	cmp	r2, #101	; 0x65
 8007a9c:	d001      	beq.n	8007aa2 <_strtod_l+0x172>
 8007a9e:	2a45      	cmp	r2, #69	; 0x45
 8007aa0:	d114      	bne.n	8007acc <_strtod_l+0x19c>
 8007aa2:	b91c      	cbnz	r4, 8007aac <_strtod_l+0x17c>
 8007aa4:	9a07      	ldr	r2, [sp, #28]
 8007aa6:	4302      	orrs	r2, r0
 8007aa8:	d09f      	beq.n	80079ea <_strtod_l+0xba>
 8007aaa:	2400      	movs	r4, #0
 8007aac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007aae:	1c72      	adds	r2, r6, #1
 8007ab0:	9219      	str	r2, [sp, #100]	; 0x64
 8007ab2:	7872      	ldrb	r2, [r6, #1]
 8007ab4:	2a2b      	cmp	r2, #43	; 0x2b
 8007ab6:	d079      	beq.n	8007bac <_strtod_l+0x27c>
 8007ab8:	2a2d      	cmp	r2, #45	; 0x2d
 8007aba:	f000 8083 	beq.w	8007bc4 <_strtod_l+0x294>
 8007abe:	2700      	movs	r7, #0
 8007ac0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007ac4:	2909      	cmp	r1, #9
 8007ac6:	f240 8083 	bls.w	8007bd0 <_strtod_l+0x2a0>
 8007aca:	9619      	str	r6, [sp, #100]	; 0x64
 8007acc:	2500      	movs	r5, #0
 8007ace:	e09f      	b.n	8007c10 <_strtod_l+0x2e0>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e7c8      	b.n	8007a66 <_strtod_l+0x136>
 8007ad4:	f1bb 0f08 	cmp.w	fp, #8
 8007ad8:	bfd5      	itete	le
 8007ada:	9906      	ldrle	r1, [sp, #24]
 8007adc:	9905      	ldrgt	r1, [sp, #20]
 8007ade:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ae2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007ae6:	f100 0001 	add.w	r0, r0, #1
 8007aea:	bfd4      	ite	le
 8007aec:	9306      	strle	r3, [sp, #24]
 8007aee:	9305      	strgt	r3, [sp, #20]
 8007af0:	f10b 0b01 	add.w	fp, fp, #1
 8007af4:	9019      	str	r0, [sp, #100]	; 0x64
 8007af6:	e7be      	b.n	8007a76 <_strtod_l+0x146>
 8007af8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007afa:	191a      	adds	r2, r3, r4
 8007afc:	9219      	str	r2, [sp, #100]	; 0x64
 8007afe:	5d1a      	ldrb	r2, [r3, r4]
 8007b00:	f1bb 0f00 	cmp.w	fp, #0
 8007b04:	d036      	beq.n	8007b74 <_strtod_l+0x244>
 8007b06:	465c      	mov	r4, fp
 8007b08:	9004      	str	r0, [sp, #16]
 8007b0a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007b0e:	2b09      	cmp	r3, #9
 8007b10:	d912      	bls.n	8007b38 <_strtod_l+0x208>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e7c1      	b.n	8007a9a <_strtod_l+0x16a>
 8007b16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b18:	3001      	adds	r0, #1
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	9219      	str	r2, [sp, #100]	; 0x64
 8007b1e:	785a      	ldrb	r2, [r3, #1]
 8007b20:	2a30      	cmp	r2, #48	; 0x30
 8007b22:	d0f8      	beq.n	8007b16 <_strtod_l+0x1e6>
 8007b24:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	f200 84d5 	bhi.w	80084d8 <_strtod_l+0xba8>
 8007b2e:	9004      	str	r0, [sp, #16]
 8007b30:	2000      	movs	r0, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b36:	9308      	str	r3, [sp, #32]
 8007b38:	3a30      	subs	r2, #48	; 0x30
 8007b3a:	f100 0301 	add.w	r3, r0, #1
 8007b3e:	d013      	beq.n	8007b68 <_strtod_l+0x238>
 8007b40:	9904      	ldr	r1, [sp, #16]
 8007b42:	1905      	adds	r5, r0, r4
 8007b44:	4419      	add	r1, r3
 8007b46:	9104      	str	r1, [sp, #16]
 8007b48:	4623      	mov	r3, r4
 8007b4a:	210a      	movs	r1, #10
 8007b4c:	42ab      	cmp	r3, r5
 8007b4e:	d113      	bne.n	8007b78 <_strtod_l+0x248>
 8007b50:	1823      	adds	r3, r4, r0
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	f104 0401 	add.w	r4, r4, #1
 8007b58:	4404      	add	r4, r0
 8007b5a:	dc1b      	bgt.n	8007b94 <_strtod_l+0x264>
 8007b5c:	230a      	movs	r3, #10
 8007b5e:	9906      	ldr	r1, [sp, #24]
 8007b60:	fb03 2301 	mla	r3, r3, r1, r2
 8007b64:	9306      	str	r3, [sp, #24]
 8007b66:	2300      	movs	r3, #0
 8007b68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	1c51      	adds	r1, r2, #1
 8007b6e:	9119      	str	r1, [sp, #100]	; 0x64
 8007b70:	7852      	ldrb	r2, [r2, #1]
 8007b72:	e7ca      	b.n	8007b0a <_strtod_l+0x1da>
 8007b74:	4658      	mov	r0, fp
 8007b76:	e7d3      	b.n	8007b20 <_strtod_l+0x1f0>
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	dc04      	bgt.n	8007b86 <_strtod_l+0x256>
 8007b7c:	9f06      	ldr	r7, [sp, #24]
 8007b7e:	434f      	muls	r7, r1
 8007b80:	9706      	str	r7, [sp, #24]
 8007b82:	3301      	adds	r3, #1
 8007b84:	e7e2      	b.n	8007b4c <_strtod_l+0x21c>
 8007b86:	1c5f      	adds	r7, r3, #1
 8007b88:	2f10      	cmp	r7, #16
 8007b8a:	bfde      	ittt	le
 8007b8c:	9f05      	ldrle	r7, [sp, #20]
 8007b8e:	434f      	mulle	r7, r1
 8007b90:	9705      	strle	r7, [sp, #20]
 8007b92:	e7f6      	b.n	8007b82 <_strtod_l+0x252>
 8007b94:	2c10      	cmp	r4, #16
 8007b96:	bfdf      	itttt	le
 8007b98:	230a      	movle	r3, #10
 8007b9a:	9905      	ldrle	r1, [sp, #20]
 8007b9c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007ba0:	9305      	strle	r3, [sp, #20]
 8007ba2:	e7e0      	b.n	8007b66 <_strtod_l+0x236>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e77b      	b.n	8007aa4 <_strtod_l+0x174>
 8007bac:	2700      	movs	r7, #0
 8007bae:	1cb2      	adds	r2, r6, #2
 8007bb0:	9219      	str	r2, [sp, #100]	; 0x64
 8007bb2:	78b2      	ldrb	r2, [r6, #2]
 8007bb4:	e784      	b.n	8007ac0 <_strtod_l+0x190>
 8007bb6:	bf00      	nop
 8007bb8:	0800b9f0 	.word	0x0800b9f0
 8007bbc:	0800b928 	.word	0x0800b928
 8007bc0:	7ff00000 	.word	0x7ff00000
 8007bc4:	2701      	movs	r7, #1
 8007bc6:	e7f2      	b.n	8007bae <_strtod_l+0x27e>
 8007bc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007bca:	1c51      	adds	r1, r2, #1
 8007bcc:	9119      	str	r1, [sp, #100]	; 0x64
 8007bce:	7852      	ldrb	r2, [r2, #1]
 8007bd0:	2a30      	cmp	r2, #48	; 0x30
 8007bd2:	d0f9      	beq.n	8007bc8 <_strtod_l+0x298>
 8007bd4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007bd8:	2908      	cmp	r1, #8
 8007bda:	f63f af77 	bhi.w	8007acc <_strtod_l+0x19c>
 8007bde:	f04f 0e0a 	mov.w	lr, #10
 8007be2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007be6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007be8:	9209      	str	r2, [sp, #36]	; 0x24
 8007bea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007bec:	1c51      	adds	r1, r2, #1
 8007bee:	9119      	str	r1, [sp, #100]	; 0x64
 8007bf0:	7852      	ldrb	r2, [r2, #1]
 8007bf2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007bf6:	2d09      	cmp	r5, #9
 8007bf8:	d935      	bls.n	8007c66 <_strtod_l+0x336>
 8007bfa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007bfc:	1b49      	subs	r1, r1, r5
 8007bfe:	2908      	cmp	r1, #8
 8007c00:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007c04:	dc02      	bgt.n	8007c0c <_strtod_l+0x2dc>
 8007c06:	4565      	cmp	r5, ip
 8007c08:	bfa8      	it	ge
 8007c0a:	4665      	movge	r5, ip
 8007c0c:	b107      	cbz	r7, 8007c10 <_strtod_l+0x2e0>
 8007c0e:	426d      	negs	r5, r5
 8007c10:	2c00      	cmp	r4, #0
 8007c12:	d14c      	bne.n	8007cae <_strtod_l+0x37e>
 8007c14:	9907      	ldr	r1, [sp, #28]
 8007c16:	4301      	orrs	r1, r0
 8007c18:	f47f aecb 	bne.w	80079b2 <_strtod_l+0x82>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f47f aee4 	bne.w	80079ea <_strtod_l+0xba>
 8007c22:	2a69      	cmp	r2, #105	; 0x69
 8007c24:	d026      	beq.n	8007c74 <_strtod_l+0x344>
 8007c26:	dc23      	bgt.n	8007c70 <_strtod_l+0x340>
 8007c28:	2a49      	cmp	r2, #73	; 0x49
 8007c2a:	d023      	beq.n	8007c74 <_strtod_l+0x344>
 8007c2c:	2a4e      	cmp	r2, #78	; 0x4e
 8007c2e:	f47f aedc 	bne.w	80079ea <_strtod_l+0xba>
 8007c32:	499d      	ldr	r1, [pc, #628]	; (8007ea8 <_strtod_l+0x578>)
 8007c34:	a819      	add	r0, sp, #100	; 0x64
 8007c36:	f000 ff25 	bl	8008a84 <__match>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f43f aed5 	beq.w	80079ea <_strtod_l+0xba>
 8007c40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b28      	cmp	r3, #40	; 0x28
 8007c46:	d12c      	bne.n	8007ca2 <_strtod_l+0x372>
 8007c48:	4998      	ldr	r1, [pc, #608]	; (8007eac <_strtod_l+0x57c>)
 8007c4a:	aa1c      	add	r2, sp, #112	; 0x70
 8007c4c:	a819      	add	r0, sp, #100	; 0x64
 8007c4e:	f000 ff2d 	bl	8008aac <__hexnan>
 8007c52:	2805      	cmp	r0, #5
 8007c54:	d125      	bne.n	8007ca2 <_strtod_l+0x372>
 8007c56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c58:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007c5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007c60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007c64:	e6a5      	b.n	80079b2 <_strtod_l+0x82>
 8007c66:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007c6a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007c6e:	e7bc      	b.n	8007bea <_strtod_l+0x2ba>
 8007c70:	2a6e      	cmp	r2, #110	; 0x6e
 8007c72:	e7dc      	b.n	8007c2e <_strtod_l+0x2fe>
 8007c74:	498e      	ldr	r1, [pc, #568]	; (8007eb0 <_strtod_l+0x580>)
 8007c76:	a819      	add	r0, sp, #100	; 0x64
 8007c78:	f000 ff04 	bl	8008a84 <__match>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	f43f aeb4 	beq.w	80079ea <_strtod_l+0xba>
 8007c82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c84:	498b      	ldr	r1, [pc, #556]	; (8007eb4 <_strtod_l+0x584>)
 8007c86:	3b01      	subs	r3, #1
 8007c88:	a819      	add	r0, sp, #100	; 0x64
 8007c8a:	9319      	str	r3, [sp, #100]	; 0x64
 8007c8c:	f000 fefa 	bl	8008a84 <__match>
 8007c90:	b910      	cbnz	r0, 8007c98 <_strtod_l+0x368>
 8007c92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c94:	3301      	adds	r3, #1
 8007c96:	9319      	str	r3, [sp, #100]	; 0x64
 8007c98:	f04f 0800 	mov.w	r8, #0
 8007c9c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007eb8 <_strtod_l+0x588>
 8007ca0:	e687      	b.n	80079b2 <_strtod_l+0x82>
 8007ca2:	4886      	ldr	r0, [pc, #536]	; (8007ebc <_strtod_l+0x58c>)
 8007ca4:	f001 fd10 	bl	80096c8 <nan>
 8007ca8:	4680      	mov	r8, r0
 8007caa:	4689      	mov	r9, r1
 8007cac:	e681      	b.n	80079b2 <_strtod_l+0x82>
 8007cae:	9b04      	ldr	r3, [sp, #16]
 8007cb0:	f1bb 0f00 	cmp.w	fp, #0
 8007cb4:	bf08      	it	eq
 8007cb6:	46a3      	moveq	fp, r4
 8007cb8:	1aeb      	subs	r3, r5, r3
 8007cba:	2c10      	cmp	r4, #16
 8007cbc:	9806      	ldr	r0, [sp, #24]
 8007cbe:	4626      	mov	r6, r4
 8007cc0:	9307      	str	r3, [sp, #28]
 8007cc2:	bfa8      	it	ge
 8007cc4:	2610      	movge	r6, #16
 8007cc6:	f7f8 fb8d 	bl	80003e4 <__aeabi_ui2d>
 8007cca:	2c09      	cmp	r4, #9
 8007ccc:	4680      	mov	r8, r0
 8007cce:	4689      	mov	r9, r1
 8007cd0:	dd13      	ble.n	8007cfa <_strtod_l+0x3ca>
 8007cd2:	4b7b      	ldr	r3, [pc, #492]	; (8007ec0 <_strtod_l+0x590>)
 8007cd4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007cd8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007cdc:	f7f8 fbfc 	bl	80004d8 <__aeabi_dmul>
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	9805      	ldr	r0, [sp, #20]
 8007ce4:	4689      	mov	r9, r1
 8007ce6:	f7f8 fb7d 	bl	80003e4 <__aeabi_ui2d>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4640      	mov	r0, r8
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	f7f8 fa3b 	bl	800016c <__adddf3>
 8007cf6:	4680      	mov	r8, r0
 8007cf8:	4689      	mov	r9, r1
 8007cfa:	2c0f      	cmp	r4, #15
 8007cfc:	dc36      	bgt.n	8007d6c <_strtod_l+0x43c>
 8007cfe:	9b07      	ldr	r3, [sp, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f43f ae56 	beq.w	80079b2 <_strtod_l+0x82>
 8007d06:	dd22      	ble.n	8007d4e <_strtod_l+0x41e>
 8007d08:	2b16      	cmp	r3, #22
 8007d0a:	dc09      	bgt.n	8007d20 <_strtod_l+0x3f0>
 8007d0c:	496c      	ldr	r1, [pc, #432]	; (8007ec0 <_strtod_l+0x590>)
 8007d0e:	4642      	mov	r2, r8
 8007d10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d14:	464b      	mov	r3, r9
 8007d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d1a:	f7f8 fbdd 	bl	80004d8 <__aeabi_dmul>
 8007d1e:	e7c3      	b.n	8007ca8 <_strtod_l+0x378>
 8007d20:	9a07      	ldr	r2, [sp, #28]
 8007d22:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007d26:	4293      	cmp	r3, r2
 8007d28:	db20      	blt.n	8007d6c <_strtod_l+0x43c>
 8007d2a:	4d65      	ldr	r5, [pc, #404]	; (8007ec0 <_strtod_l+0x590>)
 8007d2c:	f1c4 040f 	rsb	r4, r4, #15
 8007d30:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007d34:	4642      	mov	r2, r8
 8007d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	f7f8 fbcc 	bl	80004d8 <__aeabi_dmul>
 8007d40:	9b07      	ldr	r3, [sp, #28]
 8007d42:	1b1c      	subs	r4, r3, r4
 8007d44:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007d48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d4c:	e7e5      	b.n	8007d1a <_strtod_l+0x3ea>
 8007d4e:	9b07      	ldr	r3, [sp, #28]
 8007d50:	3316      	adds	r3, #22
 8007d52:	db0b      	blt.n	8007d6c <_strtod_l+0x43c>
 8007d54:	9b04      	ldr	r3, [sp, #16]
 8007d56:	4640      	mov	r0, r8
 8007d58:	1b5d      	subs	r5, r3, r5
 8007d5a:	4b59      	ldr	r3, [pc, #356]	; (8007ec0 <_strtod_l+0x590>)
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007d62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d66:	f7f8 fce1 	bl	800072c <__aeabi_ddiv>
 8007d6a:	e79d      	b.n	8007ca8 <_strtod_l+0x378>
 8007d6c:	9b07      	ldr	r3, [sp, #28]
 8007d6e:	1ba6      	subs	r6, r4, r6
 8007d70:	441e      	add	r6, r3
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	dd74      	ble.n	8007e60 <_strtod_l+0x530>
 8007d76:	f016 030f 	ands.w	r3, r6, #15
 8007d7a:	d00a      	beq.n	8007d92 <_strtod_l+0x462>
 8007d7c:	4950      	ldr	r1, [pc, #320]	; (8007ec0 <_strtod_l+0x590>)
 8007d7e:	4642      	mov	r2, r8
 8007d80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d88:	464b      	mov	r3, r9
 8007d8a:	f7f8 fba5 	bl	80004d8 <__aeabi_dmul>
 8007d8e:	4680      	mov	r8, r0
 8007d90:	4689      	mov	r9, r1
 8007d92:	f036 060f 	bics.w	r6, r6, #15
 8007d96:	d052      	beq.n	8007e3e <_strtod_l+0x50e>
 8007d98:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007d9c:	dd27      	ble.n	8007dee <_strtod_l+0x4be>
 8007d9e:	f04f 0b00 	mov.w	fp, #0
 8007da2:	f8cd b010 	str.w	fp, [sp, #16]
 8007da6:	f8cd b020 	str.w	fp, [sp, #32]
 8007daa:	f8cd b018 	str.w	fp, [sp, #24]
 8007dae:	2322      	movs	r3, #34	; 0x22
 8007db0:	f04f 0800 	mov.w	r8, #0
 8007db4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007eb8 <_strtod_l+0x588>
 8007db8:	f8ca 3000 	str.w	r3, [sl]
 8007dbc:	9b08      	ldr	r3, [sp, #32]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f43f adf7 	beq.w	80079b2 <_strtod_l+0x82>
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007dc8:	f000 ff5e 	bl	8008c88 <_Bfree>
 8007dcc:	4650      	mov	r0, sl
 8007dce:	9906      	ldr	r1, [sp, #24]
 8007dd0:	f000 ff5a 	bl	8008c88 <_Bfree>
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	9904      	ldr	r1, [sp, #16]
 8007dd8:	f000 ff56 	bl	8008c88 <_Bfree>
 8007ddc:	4650      	mov	r0, sl
 8007dde:	9908      	ldr	r1, [sp, #32]
 8007de0:	f000 ff52 	bl	8008c88 <_Bfree>
 8007de4:	4659      	mov	r1, fp
 8007de6:	4650      	mov	r0, sl
 8007de8:	f000 ff4e 	bl	8008c88 <_Bfree>
 8007dec:	e5e1      	b.n	80079b2 <_strtod_l+0x82>
 8007dee:	4b35      	ldr	r3, [pc, #212]	; (8007ec4 <_strtod_l+0x594>)
 8007df0:	4640      	mov	r0, r8
 8007df2:	9305      	str	r3, [sp, #20]
 8007df4:	2300      	movs	r3, #0
 8007df6:	4649      	mov	r1, r9
 8007df8:	461f      	mov	r7, r3
 8007dfa:	1136      	asrs	r6, r6, #4
 8007dfc:	2e01      	cmp	r6, #1
 8007dfe:	dc21      	bgt.n	8007e44 <_strtod_l+0x514>
 8007e00:	b10b      	cbz	r3, 8007e06 <_strtod_l+0x4d6>
 8007e02:	4680      	mov	r8, r0
 8007e04:	4689      	mov	r9, r1
 8007e06:	4b2f      	ldr	r3, [pc, #188]	; (8007ec4 <_strtod_l+0x594>)
 8007e08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007e0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e10:	4642      	mov	r2, r8
 8007e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e16:	464b      	mov	r3, r9
 8007e18:	f7f8 fb5e 	bl	80004d8 <__aeabi_dmul>
 8007e1c:	4b26      	ldr	r3, [pc, #152]	; (8007eb8 <_strtod_l+0x588>)
 8007e1e:	460a      	mov	r2, r1
 8007e20:	400b      	ands	r3, r1
 8007e22:	4929      	ldr	r1, [pc, #164]	; (8007ec8 <_strtod_l+0x598>)
 8007e24:	4680      	mov	r8, r0
 8007e26:	428b      	cmp	r3, r1
 8007e28:	d8b9      	bhi.n	8007d9e <_strtod_l+0x46e>
 8007e2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e2e:	428b      	cmp	r3, r1
 8007e30:	bf86      	itte	hi
 8007e32:	f04f 38ff 	movhi.w	r8, #4294967295
 8007e36:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007ecc <_strtod_l+0x59c>
 8007e3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9305      	str	r3, [sp, #20]
 8007e42:	e07f      	b.n	8007f44 <_strtod_l+0x614>
 8007e44:	07f2      	lsls	r2, r6, #31
 8007e46:	d505      	bpl.n	8007e54 <_strtod_l+0x524>
 8007e48:	9b05      	ldr	r3, [sp, #20]
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	f7f8 fb43 	bl	80004d8 <__aeabi_dmul>
 8007e52:	2301      	movs	r3, #1
 8007e54:	9a05      	ldr	r2, [sp, #20]
 8007e56:	3701      	adds	r7, #1
 8007e58:	3208      	adds	r2, #8
 8007e5a:	1076      	asrs	r6, r6, #1
 8007e5c:	9205      	str	r2, [sp, #20]
 8007e5e:	e7cd      	b.n	8007dfc <_strtod_l+0x4cc>
 8007e60:	d0ed      	beq.n	8007e3e <_strtod_l+0x50e>
 8007e62:	4276      	negs	r6, r6
 8007e64:	f016 020f 	ands.w	r2, r6, #15
 8007e68:	d00a      	beq.n	8007e80 <_strtod_l+0x550>
 8007e6a:	4b15      	ldr	r3, [pc, #84]	; (8007ec0 <_strtod_l+0x590>)
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e72:	4649      	mov	r1, r9
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f7f8 fc58 	bl	800072c <__aeabi_ddiv>
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	4689      	mov	r9, r1
 8007e80:	1136      	asrs	r6, r6, #4
 8007e82:	d0dc      	beq.n	8007e3e <_strtod_l+0x50e>
 8007e84:	2e1f      	cmp	r6, #31
 8007e86:	dd23      	ble.n	8007ed0 <_strtod_l+0x5a0>
 8007e88:	f04f 0b00 	mov.w	fp, #0
 8007e8c:	f8cd b010 	str.w	fp, [sp, #16]
 8007e90:	f8cd b020 	str.w	fp, [sp, #32]
 8007e94:	f8cd b018 	str.w	fp, [sp, #24]
 8007e98:	2322      	movs	r3, #34	; 0x22
 8007e9a:	f04f 0800 	mov.w	r8, #0
 8007e9e:	f04f 0900 	mov.w	r9, #0
 8007ea2:	f8ca 3000 	str.w	r3, [sl]
 8007ea6:	e789      	b.n	8007dbc <_strtod_l+0x48c>
 8007ea8:	0800b925 	.word	0x0800b925
 8007eac:	0800b93c 	.word	0x0800b93c
 8007eb0:	0800b91c 	.word	0x0800b91c
 8007eb4:	0800b91f 	.word	0x0800b91f
 8007eb8:	7ff00000 	.word	0x7ff00000
 8007ebc:	0800bbaf 	.word	0x0800bbaf
 8007ec0:	0800baa0 	.word	0x0800baa0
 8007ec4:	0800ba78 	.word	0x0800ba78
 8007ec8:	7ca00000 	.word	0x7ca00000
 8007ecc:	7fefffff 	.word	0x7fefffff
 8007ed0:	f016 0310 	ands.w	r3, r6, #16
 8007ed4:	bf18      	it	ne
 8007ed6:	236a      	movne	r3, #106	; 0x6a
 8007ed8:	4640      	mov	r0, r8
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	4649      	mov	r1, r9
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4fb0      	ldr	r7, [pc, #704]	; (80081a4 <_strtod_l+0x874>)
 8007ee2:	07f2      	lsls	r2, r6, #31
 8007ee4:	d504      	bpl.n	8007ef0 <_strtod_l+0x5c0>
 8007ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eea:	f7f8 faf5 	bl	80004d8 <__aeabi_dmul>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	1076      	asrs	r6, r6, #1
 8007ef2:	f107 0708 	add.w	r7, r7, #8
 8007ef6:	d1f4      	bne.n	8007ee2 <_strtod_l+0x5b2>
 8007ef8:	b10b      	cbz	r3, 8007efe <_strtod_l+0x5ce>
 8007efa:	4680      	mov	r8, r0
 8007efc:	4689      	mov	r9, r1
 8007efe:	9b05      	ldr	r3, [sp, #20]
 8007f00:	b1c3      	cbz	r3, 8007f34 <_strtod_l+0x604>
 8007f02:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007f06:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	dd11      	ble.n	8007f34 <_strtod_l+0x604>
 8007f10:	2b1f      	cmp	r3, #31
 8007f12:	f340 8127 	ble.w	8008164 <_strtod_l+0x834>
 8007f16:	2b34      	cmp	r3, #52	; 0x34
 8007f18:	bfd8      	it	le
 8007f1a:	f04f 33ff 	movle.w	r3, #4294967295
 8007f1e:	f04f 0800 	mov.w	r8, #0
 8007f22:	bfcf      	iteee	gt
 8007f24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007f28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007f2c:	fa03 f202 	lslle.w	r2, r3, r2
 8007f30:	ea02 0901 	andle.w	r9, r2, r1
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	f7f8 fd34 	bl	80009a8 <__aeabi_dcmpeq>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1a1      	bne.n	8007e88 <_strtod_l+0x558>
 8007f44:	9b06      	ldr	r3, [sp, #24]
 8007f46:	465a      	mov	r2, fp
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	9908      	ldr	r1, [sp, #32]
 8007f50:	f000 ff02 	bl	8008d58 <__s2b>
 8007f54:	9008      	str	r0, [sp, #32]
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f43f af21 	beq.w	8007d9e <_strtod_l+0x46e>
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	f04f 0b00 	mov.w	fp, #0
 8007f62:	1b5d      	subs	r5, r3, r5
 8007f64:	9b07      	ldr	r3, [sp, #28]
 8007f66:	f8cd b010 	str.w	fp, [sp, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bfb4      	ite	lt
 8007f6e:	462b      	movlt	r3, r5
 8007f70:	2300      	movge	r3, #0
 8007f72:	930e      	str	r3, [sp, #56]	; 0x38
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f7a:	9314      	str	r3, [sp, #80]	; 0x50
 8007f7c:	9b08      	ldr	r3, [sp, #32]
 8007f7e:	4650      	mov	r0, sl
 8007f80:	6859      	ldr	r1, [r3, #4]
 8007f82:	f000 fe41 	bl	8008c08 <_Balloc>
 8007f86:	9006      	str	r0, [sp, #24]
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f43f af10 	beq.w	8007dae <_strtod_l+0x47e>
 8007f8e:	9b08      	ldr	r3, [sp, #32]
 8007f90:	300c      	adds	r0, #12
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	f103 010c 	add.w	r1, r3, #12
 8007f98:	3202      	adds	r2, #2
 8007f9a:	0092      	lsls	r2, r2, #2
 8007f9c:	f7ff fc7c 	bl	8007898 <memcpy>
 8007fa0:	ab1c      	add	r3, sp, #112	; 0x70
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	ab1b      	add	r3, sp, #108	; 0x6c
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	4650      	mov	r0, sl
 8007fae:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007fb2:	f001 fa13 	bl	80093dc <__d2b>
 8007fb6:	901a      	str	r0, [sp, #104]	; 0x68
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	f43f aef8 	beq.w	8007dae <_strtod_l+0x47e>
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	4650      	mov	r0, sl
 8007fc2:	f000 ff61 	bl	8008e88 <__i2b>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	9004      	str	r0, [sp, #16]
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	f43f aeef 	beq.w	8007dae <_strtod_l+0x47e>
 8007fd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007fd2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007fd4:	2d00      	cmp	r5, #0
 8007fd6:	bfab      	itete	ge
 8007fd8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007fda:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007fdc:	18ee      	addge	r6, r5, r3
 8007fde:	1b5c      	sublt	r4, r3, r5
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	bfa8      	it	ge
 8007fe4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007fe6:	eba5 0503 	sub.w	r5, r5, r3
 8007fea:	4415      	add	r5, r2
 8007fec:	4b6e      	ldr	r3, [pc, #440]	; (80081a8 <_strtod_l+0x878>)
 8007fee:	f105 35ff 	add.w	r5, r5, #4294967295
 8007ff2:	bfb8      	it	lt
 8007ff4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007ff6:	429d      	cmp	r5, r3
 8007ff8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ffc:	f280 80c4 	bge.w	8008188 <_strtod_l+0x858>
 8008000:	1b5b      	subs	r3, r3, r5
 8008002:	2b1f      	cmp	r3, #31
 8008004:	f04f 0701 	mov.w	r7, #1
 8008008:	eba2 0203 	sub.w	r2, r2, r3
 800800c:	f300 80b1 	bgt.w	8008172 <_strtod_l+0x842>
 8008010:	2500      	movs	r5, #0
 8008012:	fa07 f303 	lsl.w	r3, r7, r3
 8008016:	930f      	str	r3, [sp, #60]	; 0x3c
 8008018:	18b7      	adds	r7, r6, r2
 800801a:	9b05      	ldr	r3, [sp, #20]
 800801c:	42be      	cmp	r6, r7
 800801e:	4414      	add	r4, r2
 8008020:	441c      	add	r4, r3
 8008022:	4633      	mov	r3, r6
 8008024:	bfa8      	it	ge
 8008026:	463b      	movge	r3, r7
 8008028:	42a3      	cmp	r3, r4
 800802a:	bfa8      	it	ge
 800802c:	4623      	movge	r3, r4
 800802e:	2b00      	cmp	r3, #0
 8008030:	bfc2      	ittt	gt
 8008032:	1aff      	subgt	r7, r7, r3
 8008034:	1ae4      	subgt	r4, r4, r3
 8008036:	1af6      	subgt	r6, r6, r3
 8008038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800803a:	2b00      	cmp	r3, #0
 800803c:	dd17      	ble.n	800806e <_strtod_l+0x73e>
 800803e:	461a      	mov	r2, r3
 8008040:	4650      	mov	r0, sl
 8008042:	9904      	ldr	r1, [sp, #16]
 8008044:	f000 ffde 	bl	8009004 <__pow5mult>
 8008048:	9004      	str	r0, [sp, #16]
 800804a:	2800      	cmp	r0, #0
 800804c:	f43f aeaf 	beq.w	8007dae <_strtod_l+0x47e>
 8008050:	4601      	mov	r1, r0
 8008052:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008054:	4650      	mov	r0, sl
 8008056:	f000 ff2d 	bl	8008eb4 <__multiply>
 800805a:	9009      	str	r0, [sp, #36]	; 0x24
 800805c:	2800      	cmp	r0, #0
 800805e:	f43f aea6 	beq.w	8007dae <_strtod_l+0x47e>
 8008062:	4650      	mov	r0, sl
 8008064:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008066:	f000 fe0f 	bl	8008c88 <_Bfree>
 800806a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800806c:	931a      	str	r3, [sp, #104]	; 0x68
 800806e:	2f00      	cmp	r7, #0
 8008070:	f300 808e 	bgt.w	8008190 <_strtod_l+0x860>
 8008074:	9b07      	ldr	r3, [sp, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	dd08      	ble.n	800808c <_strtod_l+0x75c>
 800807a:	4650      	mov	r0, sl
 800807c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800807e:	9906      	ldr	r1, [sp, #24]
 8008080:	f000 ffc0 	bl	8009004 <__pow5mult>
 8008084:	9006      	str	r0, [sp, #24]
 8008086:	2800      	cmp	r0, #0
 8008088:	f43f ae91 	beq.w	8007dae <_strtod_l+0x47e>
 800808c:	2c00      	cmp	r4, #0
 800808e:	dd08      	ble.n	80080a2 <_strtod_l+0x772>
 8008090:	4622      	mov	r2, r4
 8008092:	4650      	mov	r0, sl
 8008094:	9906      	ldr	r1, [sp, #24]
 8008096:	f001 f80f 	bl	80090b8 <__lshift>
 800809a:	9006      	str	r0, [sp, #24]
 800809c:	2800      	cmp	r0, #0
 800809e:	f43f ae86 	beq.w	8007dae <_strtod_l+0x47e>
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	dd08      	ble.n	80080b8 <_strtod_l+0x788>
 80080a6:	4632      	mov	r2, r6
 80080a8:	4650      	mov	r0, sl
 80080aa:	9904      	ldr	r1, [sp, #16]
 80080ac:	f001 f804 	bl	80090b8 <__lshift>
 80080b0:	9004      	str	r0, [sp, #16]
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f43f ae7b 	beq.w	8007dae <_strtod_l+0x47e>
 80080b8:	4650      	mov	r0, sl
 80080ba:	9a06      	ldr	r2, [sp, #24]
 80080bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080be:	f001 f887 	bl	80091d0 <__mdiff>
 80080c2:	4683      	mov	fp, r0
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f43f ae72 	beq.w	8007dae <_strtod_l+0x47e>
 80080ca:	2400      	movs	r4, #0
 80080cc:	68c3      	ldr	r3, [r0, #12]
 80080ce:	9904      	ldr	r1, [sp, #16]
 80080d0:	60c4      	str	r4, [r0, #12]
 80080d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080d4:	f001 f860 	bl	8009198 <__mcmp>
 80080d8:	42a0      	cmp	r0, r4
 80080da:	da6b      	bge.n	80081b4 <_strtod_l+0x884>
 80080dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080de:	ea53 0308 	orrs.w	r3, r3, r8
 80080e2:	f040 8091 	bne.w	8008208 <_strtod_l+0x8d8>
 80080e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f040 808c 	bne.w	8008208 <_strtod_l+0x8d8>
 80080f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080f4:	0d1b      	lsrs	r3, r3, #20
 80080f6:	051b      	lsls	r3, r3, #20
 80080f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080fc:	f240 8084 	bls.w	8008208 <_strtod_l+0x8d8>
 8008100:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008104:	b91b      	cbnz	r3, 800810e <_strtod_l+0x7de>
 8008106:	f8db 3010 	ldr.w	r3, [fp, #16]
 800810a:	2b01      	cmp	r3, #1
 800810c:	dd7c      	ble.n	8008208 <_strtod_l+0x8d8>
 800810e:	4659      	mov	r1, fp
 8008110:	2201      	movs	r2, #1
 8008112:	4650      	mov	r0, sl
 8008114:	f000 ffd0 	bl	80090b8 <__lshift>
 8008118:	9904      	ldr	r1, [sp, #16]
 800811a:	4683      	mov	fp, r0
 800811c:	f001 f83c 	bl	8009198 <__mcmp>
 8008120:	2800      	cmp	r0, #0
 8008122:	dd71      	ble.n	8008208 <_strtod_l+0x8d8>
 8008124:	9905      	ldr	r1, [sp, #20]
 8008126:	464b      	mov	r3, r9
 8008128:	4a20      	ldr	r2, [pc, #128]	; (80081ac <_strtod_l+0x87c>)
 800812a:	2900      	cmp	r1, #0
 800812c:	f000 808c 	beq.w	8008248 <_strtod_l+0x918>
 8008130:	ea02 0109 	and.w	r1, r2, r9
 8008134:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008138:	f300 8086 	bgt.w	8008248 <_strtod_l+0x918>
 800813c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008140:	f77f aeaa 	ble.w	8007e98 <_strtod_l+0x568>
 8008144:	4640      	mov	r0, r8
 8008146:	4649      	mov	r1, r9
 8008148:	4b19      	ldr	r3, [pc, #100]	; (80081b0 <_strtod_l+0x880>)
 800814a:	2200      	movs	r2, #0
 800814c:	f7f8 f9c4 	bl	80004d8 <__aeabi_dmul>
 8008150:	460b      	mov	r3, r1
 8008152:	4303      	orrs	r3, r0
 8008154:	bf08      	it	eq
 8008156:	2322      	moveq	r3, #34	; 0x22
 8008158:	4680      	mov	r8, r0
 800815a:	4689      	mov	r9, r1
 800815c:	bf08      	it	eq
 800815e:	f8ca 3000 	streq.w	r3, [sl]
 8008162:	e62f      	b.n	8007dc4 <_strtod_l+0x494>
 8008164:	f04f 32ff 	mov.w	r2, #4294967295
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	ea03 0808 	and.w	r8, r3, r8
 8008170:	e6e0      	b.n	8007f34 <_strtod_l+0x604>
 8008172:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008176:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800817a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800817e:	35e2      	adds	r5, #226	; 0xe2
 8008180:	fa07 f505 	lsl.w	r5, r7, r5
 8008184:	970f      	str	r7, [sp, #60]	; 0x3c
 8008186:	e747      	b.n	8008018 <_strtod_l+0x6e8>
 8008188:	2301      	movs	r3, #1
 800818a:	2500      	movs	r5, #0
 800818c:	930f      	str	r3, [sp, #60]	; 0x3c
 800818e:	e743      	b.n	8008018 <_strtod_l+0x6e8>
 8008190:	463a      	mov	r2, r7
 8008192:	4650      	mov	r0, sl
 8008194:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008196:	f000 ff8f 	bl	80090b8 <__lshift>
 800819a:	901a      	str	r0, [sp, #104]	; 0x68
 800819c:	2800      	cmp	r0, #0
 800819e:	f47f af69 	bne.w	8008074 <_strtod_l+0x744>
 80081a2:	e604      	b.n	8007dae <_strtod_l+0x47e>
 80081a4:	0800b950 	.word	0x0800b950
 80081a8:	fffffc02 	.word	0xfffffc02
 80081ac:	7ff00000 	.word	0x7ff00000
 80081b0:	39500000 	.word	0x39500000
 80081b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80081b8:	d165      	bne.n	8008286 <_strtod_l+0x956>
 80081ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081c0:	b35a      	cbz	r2, 800821a <_strtod_l+0x8ea>
 80081c2:	4a99      	ldr	r2, [pc, #612]	; (8008428 <_strtod_l+0xaf8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d12b      	bne.n	8008220 <_strtod_l+0x8f0>
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	4641      	mov	r1, r8
 80081cc:	b303      	cbz	r3, 8008210 <_strtod_l+0x8e0>
 80081ce:	464a      	mov	r2, r9
 80081d0:	4b96      	ldr	r3, [pc, #600]	; (800842c <_strtod_l+0xafc>)
 80081d2:	4013      	ands	r3, r2
 80081d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081d8:	f04f 32ff 	mov.w	r2, #4294967295
 80081dc:	d81b      	bhi.n	8008216 <_strtod_l+0x8e6>
 80081de:	0d1b      	lsrs	r3, r3, #20
 80081e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	4299      	cmp	r1, r3
 80081ea:	d119      	bne.n	8008220 <_strtod_l+0x8f0>
 80081ec:	4b90      	ldr	r3, [pc, #576]	; (8008430 <_strtod_l+0xb00>)
 80081ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d102      	bne.n	80081fa <_strtod_l+0x8ca>
 80081f4:	3101      	adds	r1, #1
 80081f6:	f43f adda 	beq.w	8007dae <_strtod_l+0x47e>
 80081fa:	f04f 0800 	mov.w	r8, #0
 80081fe:	4b8b      	ldr	r3, [pc, #556]	; (800842c <_strtod_l+0xafc>)
 8008200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008202:	401a      	ands	r2, r3
 8008204:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008208:	9b05      	ldr	r3, [sp, #20]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d19a      	bne.n	8008144 <_strtod_l+0x814>
 800820e:	e5d9      	b.n	8007dc4 <_strtod_l+0x494>
 8008210:	f04f 33ff 	mov.w	r3, #4294967295
 8008214:	e7e8      	b.n	80081e8 <_strtod_l+0x8b8>
 8008216:	4613      	mov	r3, r2
 8008218:	e7e6      	b.n	80081e8 <_strtod_l+0x8b8>
 800821a:	ea53 0308 	orrs.w	r3, r3, r8
 800821e:	d081      	beq.n	8008124 <_strtod_l+0x7f4>
 8008220:	b1e5      	cbz	r5, 800825c <_strtod_l+0x92c>
 8008222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008224:	421d      	tst	r5, r3
 8008226:	d0ef      	beq.n	8008208 <_strtod_l+0x8d8>
 8008228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800822a:	4640      	mov	r0, r8
 800822c:	4649      	mov	r1, r9
 800822e:	9a05      	ldr	r2, [sp, #20]
 8008230:	b1c3      	cbz	r3, 8008264 <_strtod_l+0x934>
 8008232:	f7ff fb5b 	bl	80078ec <sulp>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800823e:	f7f7 ff95 	bl	800016c <__adddf3>
 8008242:	4680      	mov	r8, r0
 8008244:	4689      	mov	r9, r1
 8008246:	e7df      	b.n	8008208 <_strtod_l+0x8d8>
 8008248:	4013      	ands	r3, r2
 800824a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800824e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008252:	f04f 38ff 	mov.w	r8, #4294967295
 8008256:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800825a:	e7d5      	b.n	8008208 <_strtod_l+0x8d8>
 800825c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800825e:	ea13 0f08 	tst.w	r3, r8
 8008262:	e7e0      	b.n	8008226 <_strtod_l+0x8f6>
 8008264:	f7ff fb42 	bl	80078ec <sulp>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008270:	f7f7 ff7a 	bl	8000168 <__aeabi_dsub>
 8008274:	2200      	movs	r2, #0
 8008276:	2300      	movs	r3, #0
 8008278:	4680      	mov	r8, r0
 800827a:	4689      	mov	r9, r1
 800827c:	f7f8 fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8008280:	2800      	cmp	r0, #0
 8008282:	d0c1      	beq.n	8008208 <_strtod_l+0x8d8>
 8008284:	e608      	b.n	8007e98 <_strtod_l+0x568>
 8008286:	4658      	mov	r0, fp
 8008288:	9904      	ldr	r1, [sp, #16]
 800828a:	f001 f903 	bl	8009494 <__ratio>
 800828e:	2200      	movs	r2, #0
 8008290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008294:	4606      	mov	r6, r0
 8008296:	460f      	mov	r7, r1
 8008298:	f7f8 fb9a 	bl	80009d0 <__aeabi_dcmple>
 800829c:	2800      	cmp	r0, #0
 800829e:	d070      	beq.n	8008382 <_strtod_l+0xa52>
 80082a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d042      	beq.n	800832c <_strtod_l+0x9fc>
 80082a6:	2600      	movs	r6, #0
 80082a8:	4f62      	ldr	r7, [pc, #392]	; (8008434 <_strtod_l+0xb04>)
 80082aa:	4d62      	ldr	r5, [pc, #392]	; (8008434 <_strtod_l+0xb04>)
 80082ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082b2:	0d1b      	lsrs	r3, r3, #20
 80082b4:	051b      	lsls	r3, r3, #20
 80082b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082ba:	4b5f      	ldr	r3, [pc, #380]	; (8008438 <_strtod_l+0xb08>)
 80082bc:	429a      	cmp	r2, r3
 80082be:	f040 80c3 	bne.w	8008448 <_strtod_l+0xb18>
 80082c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c4:	4640      	mov	r0, r8
 80082c6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80082ca:	4649      	mov	r1, r9
 80082cc:	f001 f80c 	bl	80092e8 <__ulp>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4630      	mov	r0, r6
 80082d6:	4639      	mov	r1, r7
 80082d8:	f7f8 f8fe 	bl	80004d8 <__aeabi_dmul>
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	f7f7 ff44 	bl	800016c <__adddf3>
 80082e4:	460b      	mov	r3, r1
 80082e6:	4951      	ldr	r1, [pc, #324]	; (800842c <_strtod_l+0xafc>)
 80082e8:	4a54      	ldr	r2, [pc, #336]	; (800843c <_strtod_l+0xb0c>)
 80082ea:	4019      	ands	r1, r3
 80082ec:	4291      	cmp	r1, r2
 80082ee:	4680      	mov	r8, r0
 80082f0:	d95d      	bls.n	80083ae <_strtod_l+0xa7e>
 80082f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082f4:	4b4e      	ldr	r3, [pc, #312]	; (8008430 <_strtod_l+0xb00>)
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d103      	bne.n	8008302 <_strtod_l+0x9d2>
 80082fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082fc:	3301      	adds	r3, #1
 80082fe:	f43f ad56 	beq.w	8007dae <_strtod_l+0x47e>
 8008302:	f04f 38ff 	mov.w	r8, #4294967295
 8008306:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008430 <_strtod_l+0xb00>
 800830a:	4650      	mov	r0, sl
 800830c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800830e:	f000 fcbb 	bl	8008c88 <_Bfree>
 8008312:	4650      	mov	r0, sl
 8008314:	9906      	ldr	r1, [sp, #24]
 8008316:	f000 fcb7 	bl	8008c88 <_Bfree>
 800831a:	4650      	mov	r0, sl
 800831c:	9904      	ldr	r1, [sp, #16]
 800831e:	f000 fcb3 	bl	8008c88 <_Bfree>
 8008322:	4659      	mov	r1, fp
 8008324:	4650      	mov	r0, sl
 8008326:	f000 fcaf 	bl	8008c88 <_Bfree>
 800832a:	e627      	b.n	8007f7c <_strtod_l+0x64c>
 800832c:	f1b8 0f00 	cmp.w	r8, #0
 8008330:	d119      	bne.n	8008366 <_strtod_l+0xa36>
 8008332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008338:	b9e3      	cbnz	r3, 8008374 <_strtod_l+0xa44>
 800833a:	2200      	movs	r2, #0
 800833c:	4630      	mov	r0, r6
 800833e:	4639      	mov	r1, r7
 8008340:	4b3c      	ldr	r3, [pc, #240]	; (8008434 <_strtod_l+0xb04>)
 8008342:	f7f8 fb3b 	bl	80009bc <__aeabi_dcmplt>
 8008346:	b9c8      	cbnz	r0, 800837c <_strtod_l+0xa4c>
 8008348:	2200      	movs	r2, #0
 800834a:	4630      	mov	r0, r6
 800834c:	4639      	mov	r1, r7
 800834e:	4b3c      	ldr	r3, [pc, #240]	; (8008440 <_strtod_l+0xb10>)
 8008350:	f7f8 f8c2 	bl	80004d8 <__aeabi_dmul>
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800835c:	9416      	str	r4, [sp, #88]	; 0x58
 800835e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008360:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008364:	e7a2      	b.n	80082ac <_strtod_l+0x97c>
 8008366:	f1b8 0f01 	cmp.w	r8, #1
 800836a:	d103      	bne.n	8008374 <_strtod_l+0xa44>
 800836c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	f43f ad92 	beq.w	8007e98 <_strtod_l+0x568>
 8008374:	2600      	movs	r6, #0
 8008376:	2400      	movs	r4, #0
 8008378:	4f32      	ldr	r7, [pc, #200]	; (8008444 <_strtod_l+0xb14>)
 800837a:	e796      	b.n	80082aa <_strtod_l+0x97a>
 800837c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800837e:	4d30      	ldr	r5, [pc, #192]	; (8008440 <_strtod_l+0xb10>)
 8008380:	e7ea      	b.n	8008358 <_strtod_l+0xa28>
 8008382:	4b2f      	ldr	r3, [pc, #188]	; (8008440 <_strtod_l+0xb10>)
 8008384:	2200      	movs	r2, #0
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	f7f8 f8a5 	bl	80004d8 <__aeabi_dmul>
 800838e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008390:	4604      	mov	r4, r0
 8008392:	460d      	mov	r5, r1
 8008394:	b933      	cbnz	r3, 80083a4 <_strtod_l+0xa74>
 8008396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800839a:	9010      	str	r0, [sp, #64]	; 0x40
 800839c:	9311      	str	r3, [sp, #68]	; 0x44
 800839e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80083a2:	e783      	b.n	80082ac <_strtod_l+0x97c>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80083ac:	e7f7      	b.n	800839e <_strtod_l+0xa6e>
 80083ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80083b2:	9b05      	ldr	r3, [sp, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1a8      	bne.n	800830a <_strtod_l+0x9da>
 80083b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083be:	0d1b      	lsrs	r3, r3, #20
 80083c0:	051b      	lsls	r3, r3, #20
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d1a1      	bne.n	800830a <_strtod_l+0x9da>
 80083c6:	4620      	mov	r0, r4
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7f8 fde3 	bl	8000f94 <__aeabi_d2lz>
 80083ce:	f7f8 f855 	bl	800047c <__aeabi_l2d>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	4620      	mov	r0, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f7 fec5 	bl	8000168 <__aeabi_dsub>
 80083de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083e4:	ea43 0308 	orr.w	r3, r3, r8
 80083e8:	4313      	orrs	r3, r2
 80083ea:	4604      	mov	r4, r0
 80083ec:	460d      	mov	r5, r1
 80083ee:	d066      	beq.n	80084be <_strtod_l+0xb8e>
 80083f0:	a309      	add	r3, pc, #36	; (adr r3, 8008418 <_strtod_l+0xae8>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f7f8 fae1 	bl	80009bc <__aeabi_dcmplt>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f47f ace2 	bne.w	8007dc4 <_strtod_l+0x494>
 8008400:	a307      	add	r3, pc, #28	; (adr r3, 8008420 <_strtod_l+0xaf0>)
 8008402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008406:	4620      	mov	r0, r4
 8008408:	4629      	mov	r1, r5
 800840a:	f7f8 faf5 	bl	80009f8 <__aeabi_dcmpgt>
 800840e:	2800      	cmp	r0, #0
 8008410:	f43f af7b 	beq.w	800830a <_strtod_l+0x9da>
 8008414:	e4d6      	b.n	8007dc4 <_strtod_l+0x494>
 8008416:	bf00      	nop
 8008418:	94a03595 	.word	0x94a03595
 800841c:	3fdfffff 	.word	0x3fdfffff
 8008420:	35afe535 	.word	0x35afe535
 8008424:	3fe00000 	.word	0x3fe00000
 8008428:	000fffff 	.word	0x000fffff
 800842c:	7ff00000 	.word	0x7ff00000
 8008430:	7fefffff 	.word	0x7fefffff
 8008434:	3ff00000 	.word	0x3ff00000
 8008438:	7fe00000 	.word	0x7fe00000
 800843c:	7c9fffff 	.word	0x7c9fffff
 8008440:	3fe00000 	.word	0x3fe00000
 8008444:	bff00000 	.word	0xbff00000
 8008448:	9b05      	ldr	r3, [sp, #20]
 800844a:	b313      	cbz	r3, 8008492 <_strtod_l+0xb62>
 800844c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800844e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008452:	d81e      	bhi.n	8008492 <_strtod_l+0xb62>
 8008454:	a326      	add	r3, pc, #152	; (adr r3, 80084f0 <_strtod_l+0xbc0>)
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	4620      	mov	r0, r4
 800845c:	4629      	mov	r1, r5
 800845e:	f7f8 fab7 	bl	80009d0 <__aeabi_dcmple>
 8008462:	b190      	cbz	r0, 800848a <_strtod_l+0xb5a>
 8008464:	4629      	mov	r1, r5
 8008466:	4620      	mov	r0, r4
 8008468:	f7f8 fb0e 	bl	8000a88 <__aeabi_d2uiz>
 800846c:	2801      	cmp	r0, #1
 800846e:	bf38      	it	cc
 8008470:	2001      	movcc	r0, #1
 8008472:	f7f7 ffb7 	bl	80003e4 <__aeabi_ui2d>
 8008476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008478:	4604      	mov	r4, r0
 800847a:	460d      	mov	r5, r1
 800847c:	b9d3      	cbnz	r3, 80084b4 <_strtod_l+0xb84>
 800847e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008482:	9012      	str	r0, [sp, #72]	; 0x48
 8008484:	9313      	str	r3, [sp, #76]	; 0x4c
 8008486:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800848a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800848c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008490:	1a9f      	subs	r7, r3, r2
 8008492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008496:	f000 ff27 	bl	80092e8 <__ulp>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f8 f819 	bl	80004d8 <__aeabi_dmul>
 80084a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084aa:	f7f7 fe5f 	bl	800016c <__adddf3>
 80084ae:	4680      	mov	r8, r0
 80084b0:	4689      	mov	r9, r1
 80084b2:	e77e      	b.n	80083b2 <_strtod_l+0xa82>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80084bc:	e7e3      	b.n	8008486 <_strtod_l+0xb56>
 80084be:	a30e      	add	r3, pc, #56	; (adr r3, 80084f8 <_strtod_l+0xbc8>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f7f8 fa7a 	bl	80009bc <__aeabi_dcmplt>
 80084c8:	e7a1      	b.n	800840e <_strtod_l+0xade>
 80084ca:	2300      	movs	r3, #0
 80084cc:	930a      	str	r3, [sp, #40]	; 0x28
 80084ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	f7ff ba71 	b.w	80079ba <_strtod_l+0x8a>
 80084d8:	2a65      	cmp	r2, #101	; 0x65
 80084da:	f43f ab63 	beq.w	8007ba4 <_strtod_l+0x274>
 80084de:	2a45      	cmp	r2, #69	; 0x45
 80084e0:	f43f ab60 	beq.w	8007ba4 <_strtod_l+0x274>
 80084e4:	2301      	movs	r3, #1
 80084e6:	f7ff bb95 	b.w	8007c14 <_strtod_l+0x2e4>
 80084ea:	bf00      	nop
 80084ec:	f3af 8000 	nop.w
 80084f0:	ffc00000 	.word	0xffc00000
 80084f4:	41dfffff 	.word	0x41dfffff
 80084f8:	94a03595 	.word	0x94a03595
 80084fc:	3fcfffff 	.word	0x3fcfffff

08008500 <strtod>:
 8008500:	460a      	mov	r2, r1
 8008502:	4601      	mov	r1, r0
 8008504:	4802      	ldr	r0, [pc, #8]	; (8008510 <strtod+0x10>)
 8008506:	4b03      	ldr	r3, [pc, #12]	; (8008514 <strtod+0x14>)
 8008508:	6800      	ldr	r0, [r0, #0]
 800850a:	f7ff ba11 	b.w	8007930 <_strtod_l>
 800850e:	bf00      	nop
 8008510:	20000078 	.word	0x20000078
 8008514:	200000e0 	.word	0x200000e0

08008518 <rshift>:
 8008518:	6903      	ldr	r3, [r0, #16]
 800851a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800851e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008522:	f100 0414 	add.w	r4, r0, #20
 8008526:	ea4f 1261 	mov.w	r2, r1, asr #5
 800852a:	dd46      	ble.n	80085ba <rshift+0xa2>
 800852c:	f011 011f 	ands.w	r1, r1, #31
 8008530:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008534:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008538:	d10c      	bne.n	8008554 <rshift+0x3c>
 800853a:	4629      	mov	r1, r5
 800853c:	f100 0710 	add.w	r7, r0, #16
 8008540:	42b1      	cmp	r1, r6
 8008542:	d335      	bcc.n	80085b0 <rshift+0x98>
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	1eea      	subs	r2, r5, #3
 800854a:	4296      	cmp	r6, r2
 800854c:	bf38      	it	cc
 800854e:	2300      	movcc	r3, #0
 8008550:	4423      	add	r3, r4
 8008552:	e015      	b.n	8008580 <rshift+0x68>
 8008554:	46a1      	mov	r9, r4
 8008556:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800855a:	f1c1 0820 	rsb	r8, r1, #32
 800855e:	40cf      	lsrs	r7, r1
 8008560:	f105 0e04 	add.w	lr, r5, #4
 8008564:	4576      	cmp	r6, lr
 8008566:	46f4      	mov	ip, lr
 8008568:	d816      	bhi.n	8008598 <rshift+0x80>
 800856a:	1a9a      	subs	r2, r3, r2
 800856c:	0092      	lsls	r2, r2, #2
 800856e:	3a04      	subs	r2, #4
 8008570:	3501      	adds	r5, #1
 8008572:	42ae      	cmp	r6, r5
 8008574:	bf38      	it	cc
 8008576:	2200      	movcc	r2, #0
 8008578:	18a3      	adds	r3, r4, r2
 800857a:	50a7      	str	r7, [r4, r2]
 800857c:	b107      	cbz	r7, 8008580 <rshift+0x68>
 800857e:	3304      	adds	r3, #4
 8008580:	42a3      	cmp	r3, r4
 8008582:	eba3 0204 	sub.w	r2, r3, r4
 8008586:	bf08      	it	eq
 8008588:	2300      	moveq	r3, #0
 800858a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800858e:	6102      	str	r2, [r0, #16]
 8008590:	bf08      	it	eq
 8008592:	6143      	streq	r3, [r0, #20]
 8008594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008598:	f8dc c000 	ldr.w	ip, [ip]
 800859c:	fa0c fc08 	lsl.w	ip, ip, r8
 80085a0:	ea4c 0707 	orr.w	r7, ip, r7
 80085a4:	f849 7b04 	str.w	r7, [r9], #4
 80085a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085ac:	40cf      	lsrs	r7, r1
 80085ae:	e7d9      	b.n	8008564 <rshift+0x4c>
 80085b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80085b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80085b8:	e7c2      	b.n	8008540 <rshift+0x28>
 80085ba:	4623      	mov	r3, r4
 80085bc:	e7e0      	b.n	8008580 <rshift+0x68>

080085be <__hexdig_fun>:
 80085be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	d802      	bhi.n	80085cc <__hexdig_fun+0xe>
 80085c6:	3820      	subs	r0, #32
 80085c8:	b2c0      	uxtb	r0, r0
 80085ca:	4770      	bx	lr
 80085cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80085d0:	2b05      	cmp	r3, #5
 80085d2:	d801      	bhi.n	80085d8 <__hexdig_fun+0x1a>
 80085d4:	3847      	subs	r0, #71	; 0x47
 80085d6:	e7f7      	b.n	80085c8 <__hexdig_fun+0xa>
 80085d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80085dc:	2b05      	cmp	r3, #5
 80085de:	d801      	bhi.n	80085e4 <__hexdig_fun+0x26>
 80085e0:	3827      	subs	r0, #39	; 0x27
 80085e2:	e7f1      	b.n	80085c8 <__hexdig_fun+0xa>
 80085e4:	2000      	movs	r0, #0
 80085e6:	4770      	bx	lr

080085e8 <__gethex>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	b08b      	sub	sp, #44	; 0x2c
 80085ee:	9305      	str	r3, [sp, #20]
 80085f0:	4bb2      	ldr	r3, [pc, #712]	; (80088bc <__gethex+0x2d4>)
 80085f2:	9002      	str	r0, [sp, #8]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	468b      	mov	fp, r1
 80085f8:	4618      	mov	r0, r3
 80085fa:	4690      	mov	r8, r2
 80085fc:	9303      	str	r3, [sp, #12]
 80085fe:	f7f7 fda7 	bl	8000150 <strlen>
 8008602:	4682      	mov	sl, r0
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	f8db 2000 	ldr.w	r2, [fp]
 800860a:	4403      	add	r3, r0
 800860c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008610:	9306      	str	r3, [sp, #24]
 8008612:	1c93      	adds	r3, r2, #2
 8008614:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008618:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800861c:	32fe      	adds	r2, #254	; 0xfe
 800861e:	18d1      	adds	r1, r2, r3
 8008620:	461f      	mov	r7, r3
 8008622:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008626:	9101      	str	r1, [sp, #4]
 8008628:	2830      	cmp	r0, #48	; 0x30
 800862a:	d0f8      	beq.n	800861e <__gethex+0x36>
 800862c:	f7ff ffc7 	bl	80085be <__hexdig_fun>
 8008630:	4604      	mov	r4, r0
 8008632:	2800      	cmp	r0, #0
 8008634:	d13a      	bne.n	80086ac <__gethex+0xc4>
 8008636:	4652      	mov	r2, sl
 8008638:	4638      	mov	r0, r7
 800863a:	9903      	ldr	r1, [sp, #12]
 800863c:	f7ff f942 	bl	80078c4 <strncmp>
 8008640:	4605      	mov	r5, r0
 8008642:	2800      	cmp	r0, #0
 8008644:	d166      	bne.n	8008714 <__gethex+0x12c>
 8008646:	f817 000a 	ldrb.w	r0, [r7, sl]
 800864a:	eb07 060a 	add.w	r6, r7, sl
 800864e:	f7ff ffb6 	bl	80085be <__hexdig_fun>
 8008652:	2800      	cmp	r0, #0
 8008654:	d060      	beq.n	8008718 <__gethex+0x130>
 8008656:	4633      	mov	r3, r6
 8008658:	7818      	ldrb	r0, [r3, #0]
 800865a:	461f      	mov	r7, r3
 800865c:	2830      	cmp	r0, #48	; 0x30
 800865e:	f103 0301 	add.w	r3, r3, #1
 8008662:	d0f9      	beq.n	8008658 <__gethex+0x70>
 8008664:	f7ff ffab 	bl	80085be <__hexdig_fun>
 8008668:	2301      	movs	r3, #1
 800866a:	fab0 f480 	clz	r4, r0
 800866e:	4635      	mov	r5, r6
 8008670:	0964      	lsrs	r4, r4, #5
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	463a      	mov	r2, r7
 8008676:	4616      	mov	r6, r2
 8008678:	7830      	ldrb	r0, [r6, #0]
 800867a:	3201      	adds	r2, #1
 800867c:	f7ff ff9f 	bl	80085be <__hexdig_fun>
 8008680:	2800      	cmp	r0, #0
 8008682:	d1f8      	bne.n	8008676 <__gethex+0x8e>
 8008684:	4652      	mov	r2, sl
 8008686:	4630      	mov	r0, r6
 8008688:	9903      	ldr	r1, [sp, #12]
 800868a:	f7ff f91b 	bl	80078c4 <strncmp>
 800868e:	b980      	cbnz	r0, 80086b2 <__gethex+0xca>
 8008690:	b94d      	cbnz	r5, 80086a6 <__gethex+0xbe>
 8008692:	eb06 050a 	add.w	r5, r6, sl
 8008696:	462a      	mov	r2, r5
 8008698:	4616      	mov	r6, r2
 800869a:	7830      	ldrb	r0, [r6, #0]
 800869c:	3201      	adds	r2, #1
 800869e:	f7ff ff8e 	bl	80085be <__hexdig_fun>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d1f8      	bne.n	8008698 <__gethex+0xb0>
 80086a6:	1bad      	subs	r5, r5, r6
 80086a8:	00ad      	lsls	r5, r5, #2
 80086aa:	e004      	b.n	80086b6 <__gethex+0xce>
 80086ac:	2400      	movs	r4, #0
 80086ae:	4625      	mov	r5, r4
 80086b0:	e7e0      	b.n	8008674 <__gethex+0x8c>
 80086b2:	2d00      	cmp	r5, #0
 80086b4:	d1f7      	bne.n	80086a6 <__gethex+0xbe>
 80086b6:	7833      	ldrb	r3, [r6, #0]
 80086b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086bc:	2b50      	cmp	r3, #80	; 0x50
 80086be:	d139      	bne.n	8008734 <__gethex+0x14c>
 80086c0:	7873      	ldrb	r3, [r6, #1]
 80086c2:	2b2b      	cmp	r3, #43	; 0x2b
 80086c4:	d02a      	beq.n	800871c <__gethex+0x134>
 80086c6:	2b2d      	cmp	r3, #45	; 0x2d
 80086c8:	d02c      	beq.n	8008724 <__gethex+0x13c>
 80086ca:	f04f 0900 	mov.w	r9, #0
 80086ce:	1c71      	adds	r1, r6, #1
 80086d0:	7808      	ldrb	r0, [r1, #0]
 80086d2:	f7ff ff74 	bl	80085be <__hexdig_fun>
 80086d6:	1e43      	subs	r3, r0, #1
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b18      	cmp	r3, #24
 80086dc:	d82a      	bhi.n	8008734 <__gethex+0x14c>
 80086de:	f1a0 0210 	sub.w	r2, r0, #16
 80086e2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80086e6:	f7ff ff6a 	bl	80085be <__hexdig_fun>
 80086ea:	1e43      	subs	r3, r0, #1
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b18      	cmp	r3, #24
 80086f0:	d91b      	bls.n	800872a <__gethex+0x142>
 80086f2:	f1b9 0f00 	cmp.w	r9, #0
 80086f6:	d000      	beq.n	80086fa <__gethex+0x112>
 80086f8:	4252      	negs	r2, r2
 80086fa:	4415      	add	r5, r2
 80086fc:	f8cb 1000 	str.w	r1, [fp]
 8008700:	b1d4      	cbz	r4, 8008738 <__gethex+0x150>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	bf14      	ite	ne
 8008708:	2700      	movne	r7, #0
 800870a:	2706      	moveq	r7, #6
 800870c:	4638      	mov	r0, r7
 800870e:	b00b      	add	sp, #44	; 0x2c
 8008710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008714:	463e      	mov	r6, r7
 8008716:	4625      	mov	r5, r4
 8008718:	2401      	movs	r4, #1
 800871a:	e7cc      	b.n	80086b6 <__gethex+0xce>
 800871c:	f04f 0900 	mov.w	r9, #0
 8008720:	1cb1      	adds	r1, r6, #2
 8008722:	e7d5      	b.n	80086d0 <__gethex+0xe8>
 8008724:	f04f 0901 	mov.w	r9, #1
 8008728:	e7fa      	b.n	8008720 <__gethex+0x138>
 800872a:	230a      	movs	r3, #10
 800872c:	fb03 0202 	mla	r2, r3, r2, r0
 8008730:	3a10      	subs	r2, #16
 8008732:	e7d6      	b.n	80086e2 <__gethex+0xfa>
 8008734:	4631      	mov	r1, r6
 8008736:	e7e1      	b.n	80086fc <__gethex+0x114>
 8008738:	4621      	mov	r1, r4
 800873a:	1bf3      	subs	r3, r6, r7
 800873c:	3b01      	subs	r3, #1
 800873e:	2b07      	cmp	r3, #7
 8008740:	dc0a      	bgt.n	8008758 <__gethex+0x170>
 8008742:	9802      	ldr	r0, [sp, #8]
 8008744:	f000 fa60 	bl	8008c08 <_Balloc>
 8008748:	4604      	mov	r4, r0
 800874a:	b940      	cbnz	r0, 800875e <__gethex+0x176>
 800874c:	4602      	mov	r2, r0
 800874e:	21de      	movs	r1, #222	; 0xde
 8008750:	4b5b      	ldr	r3, [pc, #364]	; (80088c0 <__gethex+0x2d8>)
 8008752:	485c      	ldr	r0, [pc, #368]	; (80088c4 <__gethex+0x2dc>)
 8008754:	f000 ffdc 	bl	8009710 <__assert_func>
 8008758:	3101      	adds	r1, #1
 800875a:	105b      	asrs	r3, r3, #1
 800875c:	e7ef      	b.n	800873e <__gethex+0x156>
 800875e:	f04f 0b00 	mov.w	fp, #0
 8008762:	f100 0914 	add.w	r9, r0, #20
 8008766:	f1ca 0301 	rsb	r3, sl, #1
 800876a:	f8cd 9010 	str.w	r9, [sp, #16]
 800876e:	f8cd b004 	str.w	fp, [sp, #4]
 8008772:	9308      	str	r3, [sp, #32]
 8008774:	42b7      	cmp	r7, r6
 8008776:	d33f      	bcc.n	80087f8 <__gethex+0x210>
 8008778:	9f04      	ldr	r7, [sp, #16]
 800877a:	9b01      	ldr	r3, [sp, #4]
 800877c:	f847 3b04 	str.w	r3, [r7], #4
 8008780:	eba7 0709 	sub.w	r7, r7, r9
 8008784:	10bf      	asrs	r7, r7, #2
 8008786:	6127      	str	r7, [r4, #16]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fb2f 	bl	8008dec <__hi0bits>
 800878e:	017f      	lsls	r7, r7, #5
 8008790:	f8d8 6000 	ldr.w	r6, [r8]
 8008794:	1a3f      	subs	r7, r7, r0
 8008796:	42b7      	cmp	r7, r6
 8008798:	dd62      	ble.n	8008860 <__gethex+0x278>
 800879a:	1bbf      	subs	r7, r7, r6
 800879c:	4639      	mov	r1, r7
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 fec9 	bl	8009536 <__any_on>
 80087a4:	4682      	mov	sl, r0
 80087a6:	b1a8      	cbz	r0, 80087d4 <__gethex+0x1ec>
 80087a8:	f04f 0a01 	mov.w	sl, #1
 80087ac:	1e7b      	subs	r3, r7, #1
 80087ae:	1159      	asrs	r1, r3, #5
 80087b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80087b4:	f003 021f 	and.w	r2, r3, #31
 80087b8:	fa0a f202 	lsl.w	r2, sl, r2
 80087bc:	420a      	tst	r2, r1
 80087be:	d009      	beq.n	80087d4 <__gethex+0x1ec>
 80087c0:	4553      	cmp	r3, sl
 80087c2:	dd05      	ble.n	80087d0 <__gethex+0x1e8>
 80087c4:	4620      	mov	r0, r4
 80087c6:	1eb9      	subs	r1, r7, #2
 80087c8:	f000 feb5 	bl	8009536 <__any_on>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d144      	bne.n	800885a <__gethex+0x272>
 80087d0:	f04f 0a02 	mov.w	sl, #2
 80087d4:	4639      	mov	r1, r7
 80087d6:	4620      	mov	r0, r4
 80087d8:	f7ff fe9e 	bl	8008518 <rshift>
 80087dc:	443d      	add	r5, r7
 80087de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087e2:	42ab      	cmp	r3, r5
 80087e4:	da4a      	bge.n	800887c <__gethex+0x294>
 80087e6:	4621      	mov	r1, r4
 80087e8:	9802      	ldr	r0, [sp, #8]
 80087ea:	f000 fa4d 	bl	8008c88 <_Bfree>
 80087ee:	2300      	movs	r3, #0
 80087f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087f2:	27a3      	movs	r7, #163	; 0xa3
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	e789      	b.n	800870c <__gethex+0x124>
 80087f8:	1e73      	subs	r3, r6, #1
 80087fa:	9a06      	ldr	r2, [sp, #24]
 80087fc:	9307      	str	r3, [sp, #28]
 80087fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008802:	4293      	cmp	r3, r2
 8008804:	d019      	beq.n	800883a <__gethex+0x252>
 8008806:	f1bb 0f20 	cmp.w	fp, #32
 800880a:	d107      	bne.n	800881c <__gethex+0x234>
 800880c:	9b04      	ldr	r3, [sp, #16]
 800880e:	9a01      	ldr	r2, [sp, #4]
 8008810:	f843 2b04 	str.w	r2, [r3], #4
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	2300      	movs	r3, #0
 8008818:	469b      	mov	fp, r3
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008820:	f7ff fecd 	bl	80085be <__hexdig_fun>
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	f000 000f 	and.w	r0, r0, #15
 800882a:	fa00 f00b 	lsl.w	r0, r0, fp
 800882e:	4303      	orrs	r3, r0
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	f10b 0b04 	add.w	fp, fp, #4
 8008836:	9b07      	ldr	r3, [sp, #28]
 8008838:	e00d      	b.n	8008856 <__gethex+0x26e>
 800883a:	9a08      	ldr	r2, [sp, #32]
 800883c:	1e73      	subs	r3, r6, #1
 800883e:	4413      	add	r3, r2
 8008840:	42bb      	cmp	r3, r7
 8008842:	d3e0      	bcc.n	8008806 <__gethex+0x21e>
 8008844:	4618      	mov	r0, r3
 8008846:	4652      	mov	r2, sl
 8008848:	9903      	ldr	r1, [sp, #12]
 800884a:	9309      	str	r3, [sp, #36]	; 0x24
 800884c:	f7ff f83a 	bl	80078c4 <strncmp>
 8008850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008852:	2800      	cmp	r0, #0
 8008854:	d1d7      	bne.n	8008806 <__gethex+0x21e>
 8008856:	461e      	mov	r6, r3
 8008858:	e78c      	b.n	8008774 <__gethex+0x18c>
 800885a:	f04f 0a03 	mov.w	sl, #3
 800885e:	e7b9      	b.n	80087d4 <__gethex+0x1ec>
 8008860:	da09      	bge.n	8008876 <__gethex+0x28e>
 8008862:	1bf7      	subs	r7, r6, r7
 8008864:	4621      	mov	r1, r4
 8008866:	463a      	mov	r2, r7
 8008868:	9802      	ldr	r0, [sp, #8]
 800886a:	f000 fc25 	bl	80090b8 <__lshift>
 800886e:	4604      	mov	r4, r0
 8008870:	1bed      	subs	r5, r5, r7
 8008872:	f100 0914 	add.w	r9, r0, #20
 8008876:	f04f 0a00 	mov.w	sl, #0
 800887a:	e7b0      	b.n	80087de <__gethex+0x1f6>
 800887c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008880:	42a8      	cmp	r0, r5
 8008882:	dd72      	ble.n	800896a <__gethex+0x382>
 8008884:	1b45      	subs	r5, r0, r5
 8008886:	42ae      	cmp	r6, r5
 8008888:	dc35      	bgt.n	80088f6 <__gethex+0x30e>
 800888a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d029      	beq.n	80088e6 <__gethex+0x2fe>
 8008892:	2b03      	cmp	r3, #3
 8008894:	d02b      	beq.n	80088ee <__gethex+0x306>
 8008896:	2b01      	cmp	r3, #1
 8008898:	d11c      	bne.n	80088d4 <__gethex+0x2ec>
 800889a:	42ae      	cmp	r6, r5
 800889c:	d11a      	bne.n	80088d4 <__gethex+0x2ec>
 800889e:	2e01      	cmp	r6, #1
 80088a0:	d112      	bne.n	80088c8 <__gethex+0x2e0>
 80088a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80088a6:	9a05      	ldr	r2, [sp, #20]
 80088a8:	2762      	movs	r7, #98	; 0x62
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	2301      	movs	r3, #1
 80088ae:	6123      	str	r3, [r4, #16]
 80088b0:	f8c9 3000 	str.w	r3, [r9]
 80088b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088b6:	601c      	str	r4, [r3, #0]
 80088b8:	e728      	b.n	800870c <__gethex+0x124>
 80088ba:	bf00      	nop
 80088bc:	0800b9f0 	.word	0x0800b9f0
 80088c0:	0800b978 	.word	0x0800b978
 80088c4:	0800b989 	.word	0x0800b989
 80088c8:	4620      	mov	r0, r4
 80088ca:	1e71      	subs	r1, r6, #1
 80088cc:	f000 fe33 	bl	8009536 <__any_on>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d1e6      	bne.n	80088a2 <__gethex+0x2ba>
 80088d4:	4621      	mov	r1, r4
 80088d6:	9802      	ldr	r0, [sp, #8]
 80088d8:	f000 f9d6 	bl	8008c88 <_Bfree>
 80088dc:	2300      	movs	r3, #0
 80088de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088e0:	2750      	movs	r7, #80	; 0x50
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	e712      	b.n	800870c <__gethex+0x124>
 80088e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1f3      	bne.n	80088d4 <__gethex+0x2ec>
 80088ec:	e7d9      	b.n	80088a2 <__gethex+0x2ba>
 80088ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1d6      	bne.n	80088a2 <__gethex+0x2ba>
 80088f4:	e7ee      	b.n	80088d4 <__gethex+0x2ec>
 80088f6:	1e6f      	subs	r7, r5, #1
 80088f8:	f1ba 0f00 	cmp.w	sl, #0
 80088fc:	d132      	bne.n	8008964 <__gethex+0x37c>
 80088fe:	b127      	cbz	r7, 800890a <__gethex+0x322>
 8008900:	4639      	mov	r1, r7
 8008902:	4620      	mov	r0, r4
 8008904:	f000 fe17 	bl	8009536 <__any_on>
 8008908:	4682      	mov	sl, r0
 800890a:	2101      	movs	r1, #1
 800890c:	117b      	asrs	r3, r7, #5
 800890e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008912:	f007 071f 	and.w	r7, r7, #31
 8008916:	fa01 f707 	lsl.w	r7, r1, r7
 800891a:	421f      	tst	r7, r3
 800891c:	f04f 0702 	mov.w	r7, #2
 8008920:	4629      	mov	r1, r5
 8008922:	4620      	mov	r0, r4
 8008924:	bf18      	it	ne
 8008926:	f04a 0a02 	orrne.w	sl, sl, #2
 800892a:	1b76      	subs	r6, r6, r5
 800892c:	f7ff fdf4 	bl	8008518 <rshift>
 8008930:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008934:	f1ba 0f00 	cmp.w	sl, #0
 8008938:	d048      	beq.n	80089cc <__gethex+0x3e4>
 800893a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800893e:	2b02      	cmp	r3, #2
 8008940:	d015      	beq.n	800896e <__gethex+0x386>
 8008942:	2b03      	cmp	r3, #3
 8008944:	d017      	beq.n	8008976 <__gethex+0x38e>
 8008946:	2b01      	cmp	r3, #1
 8008948:	d109      	bne.n	800895e <__gethex+0x376>
 800894a:	f01a 0f02 	tst.w	sl, #2
 800894e:	d006      	beq.n	800895e <__gethex+0x376>
 8008950:	f8d9 0000 	ldr.w	r0, [r9]
 8008954:	ea4a 0a00 	orr.w	sl, sl, r0
 8008958:	f01a 0f01 	tst.w	sl, #1
 800895c:	d10e      	bne.n	800897c <__gethex+0x394>
 800895e:	f047 0710 	orr.w	r7, r7, #16
 8008962:	e033      	b.n	80089cc <__gethex+0x3e4>
 8008964:	f04f 0a01 	mov.w	sl, #1
 8008968:	e7cf      	b.n	800890a <__gethex+0x322>
 800896a:	2701      	movs	r7, #1
 800896c:	e7e2      	b.n	8008934 <__gethex+0x34c>
 800896e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008970:	f1c3 0301 	rsb	r3, r3, #1
 8008974:	9315      	str	r3, [sp, #84]	; 0x54
 8008976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0f0      	beq.n	800895e <__gethex+0x376>
 800897c:	f04f 0c00 	mov.w	ip, #0
 8008980:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008984:	f104 0314 	add.w	r3, r4, #20
 8008988:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800898c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008990:	4618      	mov	r0, r3
 8008992:	f853 2b04 	ldr.w	r2, [r3], #4
 8008996:	f1b2 3fff 	cmp.w	r2, #4294967295
 800899a:	d01c      	beq.n	80089d6 <__gethex+0x3ee>
 800899c:	3201      	adds	r2, #1
 800899e:	6002      	str	r2, [r0, #0]
 80089a0:	2f02      	cmp	r7, #2
 80089a2:	f104 0314 	add.w	r3, r4, #20
 80089a6:	d13d      	bne.n	8008a24 <__gethex+0x43c>
 80089a8:	f8d8 2000 	ldr.w	r2, [r8]
 80089ac:	3a01      	subs	r2, #1
 80089ae:	42b2      	cmp	r2, r6
 80089b0:	d10a      	bne.n	80089c8 <__gethex+0x3e0>
 80089b2:	2201      	movs	r2, #1
 80089b4:	1171      	asrs	r1, r6, #5
 80089b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089ba:	f006 061f 	and.w	r6, r6, #31
 80089be:	fa02 f606 	lsl.w	r6, r2, r6
 80089c2:	421e      	tst	r6, r3
 80089c4:	bf18      	it	ne
 80089c6:	4617      	movne	r7, r2
 80089c8:	f047 0720 	orr.w	r7, r7, #32
 80089cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089ce:	601c      	str	r4, [r3, #0]
 80089d0:	9b05      	ldr	r3, [sp, #20]
 80089d2:	601d      	str	r5, [r3, #0]
 80089d4:	e69a      	b.n	800870c <__gethex+0x124>
 80089d6:	4299      	cmp	r1, r3
 80089d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80089dc:	d8d8      	bhi.n	8008990 <__gethex+0x3a8>
 80089de:	68a3      	ldr	r3, [r4, #8]
 80089e0:	459b      	cmp	fp, r3
 80089e2:	db17      	blt.n	8008a14 <__gethex+0x42c>
 80089e4:	6861      	ldr	r1, [r4, #4]
 80089e6:	9802      	ldr	r0, [sp, #8]
 80089e8:	3101      	adds	r1, #1
 80089ea:	f000 f90d 	bl	8008c08 <_Balloc>
 80089ee:	4681      	mov	r9, r0
 80089f0:	b918      	cbnz	r0, 80089fa <__gethex+0x412>
 80089f2:	4602      	mov	r2, r0
 80089f4:	2184      	movs	r1, #132	; 0x84
 80089f6:	4b19      	ldr	r3, [pc, #100]	; (8008a5c <__gethex+0x474>)
 80089f8:	e6ab      	b.n	8008752 <__gethex+0x16a>
 80089fa:	6922      	ldr	r2, [r4, #16]
 80089fc:	f104 010c 	add.w	r1, r4, #12
 8008a00:	3202      	adds	r2, #2
 8008a02:	0092      	lsls	r2, r2, #2
 8008a04:	300c      	adds	r0, #12
 8008a06:	f7fe ff47 	bl	8007898 <memcpy>
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	9802      	ldr	r0, [sp, #8]
 8008a0e:	f000 f93b 	bl	8008c88 <_Bfree>
 8008a12:	464c      	mov	r4, r9
 8008a14:	6923      	ldr	r3, [r4, #16]
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	6122      	str	r2, [r4, #16]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a20:	615a      	str	r2, [r3, #20]
 8008a22:	e7bd      	b.n	80089a0 <__gethex+0x3b8>
 8008a24:	6922      	ldr	r2, [r4, #16]
 8008a26:	455a      	cmp	r2, fp
 8008a28:	dd0b      	ble.n	8008a42 <__gethex+0x45a>
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f7ff fd73 	bl	8008518 <rshift>
 8008a32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a36:	3501      	adds	r5, #1
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	f6ff aed4 	blt.w	80087e6 <__gethex+0x1fe>
 8008a3e:	2701      	movs	r7, #1
 8008a40:	e7c2      	b.n	80089c8 <__gethex+0x3e0>
 8008a42:	f016 061f 	ands.w	r6, r6, #31
 8008a46:	d0fa      	beq.n	8008a3e <__gethex+0x456>
 8008a48:	4453      	add	r3, sl
 8008a4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008a4e:	f000 f9cd 	bl	8008dec <__hi0bits>
 8008a52:	f1c6 0620 	rsb	r6, r6, #32
 8008a56:	42b0      	cmp	r0, r6
 8008a58:	dbe7      	blt.n	8008a2a <__gethex+0x442>
 8008a5a:	e7f0      	b.n	8008a3e <__gethex+0x456>
 8008a5c:	0800b978 	.word	0x0800b978

08008a60 <L_shift>:
 8008a60:	f1c2 0208 	rsb	r2, r2, #8
 8008a64:	0092      	lsls	r2, r2, #2
 8008a66:	b570      	push	{r4, r5, r6, lr}
 8008a68:	f1c2 0620 	rsb	r6, r2, #32
 8008a6c:	6843      	ldr	r3, [r0, #4]
 8008a6e:	6804      	ldr	r4, [r0, #0]
 8008a70:	fa03 f506 	lsl.w	r5, r3, r6
 8008a74:	432c      	orrs	r4, r5
 8008a76:	40d3      	lsrs	r3, r2
 8008a78:	6004      	str	r4, [r0, #0]
 8008a7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a7e:	4288      	cmp	r0, r1
 8008a80:	d3f4      	bcc.n	8008a6c <L_shift+0xc>
 8008a82:	bd70      	pop	{r4, r5, r6, pc}

08008a84 <__match>:
 8008a84:	b530      	push	{r4, r5, lr}
 8008a86:	6803      	ldr	r3, [r0, #0]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a8e:	b914      	cbnz	r4, 8008a96 <__match+0x12>
 8008a90:	6003      	str	r3, [r0, #0]
 8008a92:	2001      	movs	r0, #1
 8008a94:	bd30      	pop	{r4, r5, pc}
 8008a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008a9e:	2d19      	cmp	r5, #25
 8008aa0:	bf98      	it	ls
 8008aa2:	3220      	addls	r2, #32
 8008aa4:	42a2      	cmp	r2, r4
 8008aa6:	d0f0      	beq.n	8008a8a <__match+0x6>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e7f3      	b.n	8008a94 <__match+0x10>

08008aac <__hexnan>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	2500      	movs	r5, #0
 8008ab2:	680b      	ldr	r3, [r1, #0]
 8008ab4:	4682      	mov	sl, r0
 8008ab6:	115e      	asrs	r6, r3, #5
 8008ab8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008abc:	f013 031f 	ands.w	r3, r3, #31
 8008ac0:	bf18      	it	ne
 8008ac2:	3604      	addne	r6, #4
 8008ac4:	1f37      	subs	r7, r6, #4
 8008ac6:	46b9      	mov	r9, r7
 8008ac8:	463c      	mov	r4, r7
 8008aca:	46ab      	mov	fp, r5
 8008acc:	b087      	sub	sp, #28
 8008ace:	4690      	mov	r8, r2
 8008ad0:	6802      	ldr	r2, [r0, #0]
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ad8:	9502      	str	r5, [sp, #8]
 8008ada:	7851      	ldrb	r1, [r2, #1]
 8008adc:	1c53      	adds	r3, r2, #1
 8008ade:	9303      	str	r3, [sp, #12]
 8008ae0:	b341      	cbz	r1, 8008b34 <__hexnan+0x88>
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	9205      	str	r2, [sp, #20]
 8008ae6:	9104      	str	r1, [sp, #16]
 8008ae8:	f7ff fd69 	bl	80085be <__hexdig_fun>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d14f      	bne.n	8008b90 <__hexnan+0xe4>
 8008af0:	9904      	ldr	r1, [sp, #16]
 8008af2:	9a05      	ldr	r2, [sp, #20]
 8008af4:	2920      	cmp	r1, #32
 8008af6:	d818      	bhi.n	8008b2a <__hexnan+0x7e>
 8008af8:	9b02      	ldr	r3, [sp, #8]
 8008afa:	459b      	cmp	fp, r3
 8008afc:	dd13      	ble.n	8008b26 <__hexnan+0x7a>
 8008afe:	454c      	cmp	r4, r9
 8008b00:	d206      	bcs.n	8008b10 <__hexnan+0x64>
 8008b02:	2d07      	cmp	r5, #7
 8008b04:	dc04      	bgt.n	8008b10 <__hexnan+0x64>
 8008b06:	462a      	mov	r2, r5
 8008b08:	4649      	mov	r1, r9
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff ffa8 	bl	8008a60 <L_shift>
 8008b10:	4544      	cmp	r4, r8
 8008b12:	d950      	bls.n	8008bb6 <__hexnan+0x10a>
 8008b14:	2300      	movs	r3, #0
 8008b16:	f1a4 0904 	sub.w	r9, r4, #4
 8008b1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b1e:	461d      	mov	r5, r3
 8008b20:	464c      	mov	r4, r9
 8008b22:	f8cd b008 	str.w	fp, [sp, #8]
 8008b26:	9a03      	ldr	r2, [sp, #12]
 8008b28:	e7d7      	b.n	8008ada <__hexnan+0x2e>
 8008b2a:	2929      	cmp	r1, #41	; 0x29
 8008b2c:	d156      	bne.n	8008bdc <__hexnan+0x130>
 8008b2e:	3202      	adds	r2, #2
 8008b30:	f8ca 2000 	str.w	r2, [sl]
 8008b34:	f1bb 0f00 	cmp.w	fp, #0
 8008b38:	d050      	beq.n	8008bdc <__hexnan+0x130>
 8008b3a:	454c      	cmp	r4, r9
 8008b3c:	d206      	bcs.n	8008b4c <__hexnan+0xa0>
 8008b3e:	2d07      	cmp	r5, #7
 8008b40:	dc04      	bgt.n	8008b4c <__hexnan+0xa0>
 8008b42:	462a      	mov	r2, r5
 8008b44:	4649      	mov	r1, r9
 8008b46:	4620      	mov	r0, r4
 8008b48:	f7ff ff8a 	bl	8008a60 <L_shift>
 8008b4c:	4544      	cmp	r4, r8
 8008b4e:	d934      	bls.n	8008bba <__hexnan+0x10e>
 8008b50:	4623      	mov	r3, r4
 8008b52:	f1a8 0204 	sub.w	r2, r8, #4
 8008b56:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b5a:	429f      	cmp	r7, r3
 8008b5c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b60:	d2f9      	bcs.n	8008b56 <__hexnan+0xaa>
 8008b62:	1b3b      	subs	r3, r7, r4
 8008b64:	f023 0303 	bic.w	r3, r3, #3
 8008b68:	3304      	adds	r3, #4
 8008b6a:	3401      	adds	r4, #1
 8008b6c:	3e03      	subs	r6, #3
 8008b6e:	42b4      	cmp	r4, r6
 8008b70:	bf88      	it	hi
 8008b72:	2304      	movhi	r3, #4
 8008b74:	2200      	movs	r2, #0
 8008b76:	4443      	add	r3, r8
 8008b78:	f843 2b04 	str.w	r2, [r3], #4
 8008b7c:	429f      	cmp	r7, r3
 8008b7e:	d2fb      	bcs.n	8008b78 <__hexnan+0xcc>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	b91b      	cbnz	r3, 8008b8c <__hexnan+0xe0>
 8008b84:	4547      	cmp	r7, r8
 8008b86:	d127      	bne.n	8008bd8 <__hexnan+0x12c>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	2005      	movs	r0, #5
 8008b8e:	e026      	b.n	8008bde <__hexnan+0x132>
 8008b90:	3501      	adds	r5, #1
 8008b92:	2d08      	cmp	r5, #8
 8008b94:	f10b 0b01 	add.w	fp, fp, #1
 8008b98:	dd06      	ble.n	8008ba8 <__hexnan+0xfc>
 8008b9a:	4544      	cmp	r4, r8
 8008b9c:	d9c3      	bls.n	8008b26 <__hexnan+0x7a>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2501      	movs	r5, #1
 8008ba2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ba6:	3c04      	subs	r4, #4
 8008ba8:	6822      	ldr	r2, [r4, #0]
 8008baa:	f000 000f 	and.w	r0, r0, #15
 8008bae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008bb2:	6022      	str	r2, [r4, #0]
 8008bb4:	e7b7      	b.n	8008b26 <__hexnan+0x7a>
 8008bb6:	2508      	movs	r5, #8
 8008bb8:	e7b5      	b.n	8008b26 <__hexnan+0x7a>
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0df      	beq.n	8008b80 <__hexnan+0xd4>
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc4:	f1c3 0320 	rsb	r3, r3, #32
 8008bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008bd0:	401a      	ands	r2, r3
 8008bd2:	f846 2c04 	str.w	r2, [r6, #-4]
 8008bd6:	e7d3      	b.n	8008b80 <__hexnan+0xd4>
 8008bd8:	3f04      	subs	r7, #4
 8008bda:	e7d1      	b.n	8008b80 <__hexnan+0xd4>
 8008bdc:	2004      	movs	r0, #4
 8008bde:	b007      	add	sp, #28
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008be4 <__ascii_mbtowc>:
 8008be4:	b082      	sub	sp, #8
 8008be6:	b901      	cbnz	r1, 8008bea <__ascii_mbtowc+0x6>
 8008be8:	a901      	add	r1, sp, #4
 8008bea:	b142      	cbz	r2, 8008bfe <__ascii_mbtowc+0x1a>
 8008bec:	b14b      	cbz	r3, 8008c02 <__ascii_mbtowc+0x1e>
 8008bee:	7813      	ldrb	r3, [r2, #0]
 8008bf0:	600b      	str	r3, [r1, #0]
 8008bf2:	7812      	ldrb	r2, [r2, #0]
 8008bf4:	1e10      	subs	r0, r2, #0
 8008bf6:	bf18      	it	ne
 8008bf8:	2001      	movne	r0, #1
 8008bfa:	b002      	add	sp, #8
 8008bfc:	4770      	bx	lr
 8008bfe:	4610      	mov	r0, r2
 8008c00:	e7fb      	b.n	8008bfa <__ascii_mbtowc+0x16>
 8008c02:	f06f 0001 	mvn.w	r0, #1
 8008c06:	e7f8      	b.n	8008bfa <__ascii_mbtowc+0x16>

08008c08 <_Balloc>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	b976      	cbnz	r6, 8008c30 <_Balloc+0x28>
 8008c12:	2010      	movs	r0, #16
 8008c14:	f000 fdac 	bl	8009770 <malloc>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c1c:	b920      	cbnz	r0, 8008c28 <_Balloc+0x20>
 8008c1e:	2166      	movs	r1, #102	; 0x66
 8008c20:	4b17      	ldr	r3, [pc, #92]	; (8008c80 <_Balloc+0x78>)
 8008c22:	4818      	ldr	r0, [pc, #96]	; (8008c84 <_Balloc+0x7c>)
 8008c24:	f000 fd74 	bl	8009710 <__assert_func>
 8008c28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c2c:	6006      	str	r6, [r0, #0]
 8008c2e:	60c6      	str	r6, [r0, #12]
 8008c30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c32:	68f3      	ldr	r3, [r6, #12]
 8008c34:	b183      	cbz	r3, 8008c58 <_Balloc+0x50>
 8008c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c3e:	b9b8      	cbnz	r0, 8008c70 <_Balloc+0x68>
 8008c40:	2101      	movs	r1, #1
 8008c42:	fa01 f605 	lsl.w	r6, r1, r5
 8008c46:	1d72      	adds	r2, r6, #5
 8008c48:	4620      	mov	r0, r4
 8008c4a:	0092      	lsls	r2, r2, #2
 8008c4c:	f000 fc94 	bl	8009578 <_calloc_r>
 8008c50:	b160      	cbz	r0, 8008c6c <_Balloc+0x64>
 8008c52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c56:	e00e      	b.n	8008c76 <_Balloc+0x6e>
 8008c58:	2221      	movs	r2, #33	; 0x21
 8008c5a:	2104      	movs	r1, #4
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 fc8b 	bl	8009578 <_calloc_r>
 8008c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c64:	60f0      	str	r0, [r6, #12]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e4      	bne.n	8008c36 <_Balloc+0x2e>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	6802      	ldr	r2, [r0, #0]
 8008c72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c76:	2300      	movs	r3, #0
 8008c78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c7c:	e7f7      	b.n	8008c6e <_Balloc+0x66>
 8008c7e:	bf00      	nop
 8008c80:	0800ba04 	.word	0x0800ba04
 8008c84:	0800ba1b 	.word	0x0800ba1b

08008c88 <_Bfree>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	b976      	cbnz	r6, 8008cb0 <_Bfree+0x28>
 8008c92:	2010      	movs	r0, #16
 8008c94:	f000 fd6c 	bl	8009770 <malloc>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6268      	str	r0, [r5, #36]	; 0x24
 8008c9c:	b920      	cbnz	r0, 8008ca8 <_Bfree+0x20>
 8008c9e:	218a      	movs	r1, #138	; 0x8a
 8008ca0:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <_Bfree+0x3c>)
 8008ca2:	4809      	ldr	r0, [pc, #36]	; (8008cc8 <_Bfree+0x40>)
 8008ca4:	f000 fd34 	bl	8009710 <__assert_func>
 8008ca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cac:	6006      	str	r6, [r0, #0]
 8008cae:	60c6      	str	r6, [r0, #12]
 8008cb0:	b13c      	cbz	r4, 8008cc2 <_Bfree+0x3a>
 8008cb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cb4:	6862      	ldr	r2, [r4, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cbc:	6021      	str	r1, [r4, #0]
 8008cbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	0800ba04 	.word	0x0800ba04
 8008cc8:	0800ba1b 	.word	0x0800ba1b

08008ccc <__multadd>:
 8008ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	461e      	mov	r6, r3
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	690d      	ldr	r5, [r1, #16]
 8008cda:	f101 0c14 	add.w	ip, r1, #20
 8008cde:	f8dc 3000 	ldr.w	r3, [ip]
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	b299      	uxth	r1, r3
 8008ce6:	fb02 6101 	mla	r1, r2, r1, r6
 8008cea:	0c1e      	lsrs	r6, r3, #16
 8008cec:	0c0b      	lsrs	r3, r1, #16
 8008cee:	fb02 3306 	mla	r3, r2, r6, r3
 8008cf2:	b289      	uxth	r1, r1
 8008cf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cf8:	4285      	cmp	r5, r0
 8008cfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cfe:	f84c 1b04 	str.w	r1, [ip], #4
 8008d02:	dcec      	bgt.n	8008cde <__multadd+0x12>
 8008d04:	b30e      	cbz	r6, 8008d4a <__multadd+0x7e>
 8008d06:	68a3      	ldr	r3, [r4, #8]
 8008d08:	42ab      	cmp	r3, r5
 8008d0a:	dc19      	bgt.n	8008d40 <__multadd+0x74>
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	4638      	mov	r0, r7
 8008d10:	3101      	adds	r1, #1
 8008d12:	f7ff ff79 	bl	8008c08 <_Balloc>
 8008d16:	4680      	mov	r8, r0
 8008d18:	b928      	cbnz	r0, 8008d26 <__multadd+0x5a>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	21b5      	movs	r1, #181	; 0xb5
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <__multadd+0x84>)
 8008d20:	480c      	ldr	r0, [pc, #48]	; (8008d54 <__multadd+0x88>)
 8008d22:	f000 fcf5 	bl	8009710 <__assert_func>
 8008d26:	6922      	ldr	r2, [r4, #16]
 8008d28:	f104 010c 	add.w	r1, r4, #12
 8008d2c:	3202      	adds	r2, #2
 8008d2e:	0092      	lsls	r2, r2, #2
 8008d30:	300c      	adds	r0, #12
 8008d32:	f7fe fdb1 	bl	8007898 <memcpy>
 8008d36:	4621      	mov	r1, r4
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ffa5 	bl	8008c88 <_Bfree>
 8008d3e:	4644      	mov	r4, r8
 8008d40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d44:	3501      	adds	r5, #1
 8008d46:	615e      	str	r6, [r3, #20]
 8008d48:	6125      	str	r5, [r4, #16]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d50:	0800b978 	.word	0x0800b978
 8008d54:	0800ba1b 	.word	0x0800ba1b

08008d58 <__s2b>:
 8008d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d5c:	4615      	mov	r5, r2
 8008d5e:	2209      	movs	r2, #9
 8008d60:	461f      	mov	r7, r3
 8008d62:	3308      	adds	r3, #8
 8008d64:	460c      	mov	r4, r1
 8008d66:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	2100      	movs	r1, #0
 8008d70:	429a      	cmp	r2, r3
 8008d72:	db09      	blt.n	8008d88 <__s2b+0x30>
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7ff ff47 	bl	8008c08 <_Balloc>
 8008d7a:	b940      	cbnz	r0, 8008d8e <__s2b+0x36>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	21ce      	movs	r1, #206	; 0xce
 8008d80:	4b18      	ldr	r3, [pc, #96]	; (8008de4 <__s2b+0x8c>)
 8008d82:	4819      	ldr	r0, [pc, #100]	; (8008de8 <__s2b+0x90>)
 8008d84:	f000 fcc4 	bl	8009710 <__assert_func>
 8008d88:	0052      	lsls	r2, r2, #1
 8008d8a:	3101      	adds	r1, #1
 8008d8c:	e7f0      	b.n	8008d70 <__s2b+0x18>
 8008d8e:	9b08      	ldr	r3, [sp, #32]
 8008d90:	2d09      	cmp	r5, #9
 8008d92:	6143      	str	r3, [r0, #20]
 8008d94:	f04f 0301 	mov.w	r3, #1
 8008d98:	6103      	str	r3, [r0, #16]
 8008d9a:	dd16      	ble.n	8008dca <__s2b+0x72>
 8008d9c:	f104 0909 	add.w	r9, r4, #9
 8008da0:	46c8      	mov	r8, r9
 8008da2:	442c      	add	r4, r5
 8008da4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008da8:	4601      	mov	r1, r0
 8008daa:	220a      	movs	r2, #10
 8008dac:	4630      	mov	r0, r6
 8008dae:	3b30      	subs	r3, #48	; 0x30
 8008db0:	f7ff ff8c 	bl	8008ccc <__multadd>
 8008db4:	45a0      	cmp	r8, r4
 8008db6:	d1f5      	bne.n	8008da4 <__s2b+0x4c>
 8008db8:	f1a5 0408 	sub.w	r4, r5, #8
 8008dbc:	444c      	add	r4, r9
 8008dbe:	1b2d      	subs	r5, r5, r4
 8008dc0:	1963      	adds	r3, r4, r5
 8008dc2:	42bb      	cmp	r3, r7
 8008dc4:	db04      	blt.n	8008dd0 <__s2b+0x78>
 8008dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dca:	2509      	movs	r5, #9
 8008dcc:	340a      	adds	r4, #10
 8008dce:	e7f6      	b.n	8008dbe <__s2b+0x66>
 8008dd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008dd4:	4601      	mov	r1, r0
 8008dd6:	220a      	movs	r2, #10
 8008dd8:	4630      	mov	r0, r6
 8008dda:	3b30      	subs	r3, #48	; 0x30
 8008ddc:	f7ff ff76 	bl	8008ccc <__multadd>
 8008de0:	e7ee      	b.n	8008dc0 <__s2b+0x68>
 8008de2:	bf00      	nop
 8008de4:	0800b978 	.word	0x0800b978
 8008de8:	0800ba1b 	.word	0x0800ba1b

08008dec <__hi0bits>:
 8008dec:	0c02      	lsrs	r2, r0, #16
 8008dee:	0412      	lsls	r2, r2, #16
 8008df0:	4603      	mov	r3, r0
 8008df2:	b9ca      	cbnz	r2, 8008e28 <__hi0bits+0x3c>
 8008df4:	0403      	lsls	r3, r0, #16
 8008df6:	2010      	movs	r0, #16
 8008df8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008dfc:	bf04      	itt	eq
 8008dfe:	021b      	lsleq	r3, r3, #8
 8008e00:	3008      	addeq	r0, #8
 8008e02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e06:	bf04      	itt	eq
 8008e08:	011b      	lsleq	r3, r3, #4
 8008e0a:	3004      	addeq	r0, #4
 8008e0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e10:	bf04      	itt	eq
 8008e12:	009b      	lsleq	r3, r3, #2
 8008e14:	3002      	addeq	r0, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	db05      	blt.n	8008e26 <__hi0bits+0x3a>
 8008e1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008e1e:	f100 0001 	add.w	r0, r0, #1
 8008e22:	bf08      	it	eq
 8008e24:	2020      	moveq	r0, #32
 8008e26:	4770      	bx	lr
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e7e5      	b.n	8008df8 <__hi0bits+0xc>

08008e2c <__lo0bits>:
 8008e2c:	6803      	ldr	r3, [r0, #0]
 8008e2e:	4602      	mov	r2, r0
 8008e30:	f013 0007 	ands.w	r0, r3, #7
 8008e34:	d00b      	beq.n	8008e4e <__lo0bits+0x22>
 8008e36:	07d9      	lsls	r1, r3, #31
 8008e38:	d421      	bmi.n	8008e7e <__lo0bits+0x52>
 8008e3a:	0798      	lsls	r0, r3, #30
 8008e3c:	bf49      	itett	mi
 8008e3e:	085b      	lsrmi	r3, r3, #1
 8008e40:	089b      	lsrpl	r3, r3, #2
 8008e42:	2001      	movmi	r0, #1
 8008e44:	6013      	strmi	r3, [r2, #0]
 8008e46:	bf5c      	itt	pl
 8008e48:	2002      	movpl	r0, #2
 8008e4a:	6013      	strpl	r3, [r2, #0]
 8008e4c:	4770      	bx	lr
 8008e4e:	b299      	uxth	r1, r3
 8008e50:	b909      	cbnz	r1, 8008e56 <__lo0bits+0x2a>
 8008e52:	2010      	movs	r0, #16
 8008e54:	0c1b      	lsrs	r3, r3, #16
 8008e56:	b2d9      	uxtb	r1, r3
 8008e58:	b909      	cbnz	r1, 8008e5e <__lo0bits+0x32>
 8008e5a:	3008      	adds	r0, #8
 8008e5c:	0a1b      	lsrs	r3, r3, #8
 8008e5e:	0719      	lsls	r1, r3, #28
 8008e60:	bf04      	itt	eq
 8008e62:	091b      	lsreq	r3, r3, #4
 8008e64:	3004      	addeq	r0, #4
 8008e66:	0799      	lsls	r1, r3, #30
 8008e68:	bf04      	itt	eq
 8008e6a:	089b      	lsreq	r3, r3, #2
 8008e6c:	3002      	addeq	r0, #2
 8008e6e:	07d9      	lsls	r1, r3, #31
 8008e70:	d403      	bmi.n	8008e7a <__lo0bits+0x4e>
 8008e72:	085b      	lsrs	r3, r3, #1
 8008e74:	f100 0001 	add.w	r0, r0, #1
 8008e78:	d003      	beq.n	8008e82 <__lo0bits+0x56>
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	4770      	bx	lr
 8008e7e:	2000      	movs	r0, #0
 8008e80:	4770      	bx	lr
 8008e82:	2020      	movs	r0, #32
 8008e84:	4770      	bx	lr
	...

08008e88 <__i2b>:
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	f7ff febb 	bl	8008c08 <_Balloc>
 8008e92:	4602      	mov	r2, r0
 8008e94:	b928      	cbnz	r0, 8008ea2 <__i2b+0x1a>
 8008e96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e9a:	4b04      	ldr	r3, [pc, #16]	; (8008eac <__i2b+0x24>)
 8008e9c:	4804      	ldr	r0, [pc, #16]	; (8008eb0 <__i2b+0x28>)
 8008e9e:	f000 fc37 	bl	8009710 <__assert_func>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	6144      	str	r4, [r0, #20]
 8008ea6:	6103      	str	r3, [r0, #16]
 8008ea8:	bd10      	pop	{r4, pc}
 8008eaa:	bf00      	nop
 8008eac:	0800b978 	.word	0x0800b978
 8008eb0:	0800ba1b 	.word	0x0800ba1b

08008eb4 <__multiply>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	4691      	mov	r9, r2
 8008eba:	690a      	ldr	r2, [r1, #16]
 8008ebc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	bfbe      	ittt	lt
 8008ec6:	460b      	movlt	r3, r1
 8008ec8:	464c      	movlt	r4, r9
 8008eca:	4699      	movlt	r9, r3
 8008ecc:	6927      	ldr	r7, [r4, #16]
 8008ece:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	6861      	ldr	r1, [r4, #4]
 8008ed6:	eb07 060a 	add.w	r6, r7, sl
 8008eda:	42b3      	cmp	r3, r6
 8008edc:	b085      	sub	sp, #20
 8008ede:	bfb8      	it	lt
 8008ee0:	3101      	addlt	r1, #1
 8008ee2:	f7ff fe91 	bl	8008c08 <_Balloc>
 8008ee6:	b930      	cbnz	r0, 8008ef6 <__multiply+0x42>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	f240 115d 	movw	r1, #349	; 0x15d
 8008eee:	4b43      	ldr	r3, [pc, #268]	; (8008ffc <__multiply+0x148>)
 8008ef0:	4843      	ldr	r0, [pc, #268]	; (8009000 <__multiply+0x14c>)
 8008ef2:	f000 fc0d 	bl	8009710 <__assert_func>
 8008ef6:	f100 0514 	add.w	r5, r0, #20
 8008efa:	462b      	mov	r3, r5
 8008efc:	2200      	movs	r2, #0
 8008efe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f02:	4543      	cmp	r3, r8
 8008f04:	d321      	bcc.n	8008f4a <__multiply+0x96>
 8008f06:	f104 0314 	add.w	r3, r4, #20
 8008f0a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f0e:	f109 0314 	add.w	r3, r9, #20
 8008f12:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f16:	9202      	str	r2, [sp, #8]
 8008f18:	1b3a      	subs	r2, r7, r4
 8008f1a:	3a15      	subs	r2, #21
 8008f1c:	f022 0203 	bic.w	r2, r2, #3
 8008f20:	3204      	adds	r2, #4
 8008f22:	f104 0115 	add.w	r1, r4, #21
 8008f26:	428f      	cmp	r7, r1
 8008f28:	bf38      	it	cc
 8008f2a:	2204      	movcc	r2, #4
 8008f2c:	9201      	str	r2, [sp, #4]
 8008f2e:	9a02      	ldr	r2, [sp, #8]
 8008f30:	9303      	str	r3, [sp, #12]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d80c      	bhi.n	8008f50 <__multiply+0x9c>
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	dd03      	ble.n	8008f42 <__multiply+0x8e>
 8008f3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d059      	beq.n	8008ff6 <__multiply+0x142>
 8008f42:	6106      	str	r6, [r0, #16]
 8008f44:	b005      	add	sp, #20
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	f843 2b04 	str.w	r2, [r3], #4
 8008f4e:	e7d8      	b.n	8008f02 <__multiply+0x4e>
 8008f50:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f54:	f1ba 0f00 	cmp.w	sl, #0
 8008f58:	d023      	beq.n	8008fa2 <__multiply+0xee>
 8008f5a:	46a9      	mov	r9, r5
 8008f5c:	f04f 0c00 	mov.w	ip, #0
 8008f60:	f104 0e14 	add.w	lr, r4, #20
 8008f64:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f68:	f8d9 1000 	ldr.w	r1, [r9]
 8008f6c:	fa1f fb82 	uxth.w	fp, r2
 8008f70:	b289      	uxth	r1, r1
 8008f72:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f76:	4461      	add	r1, ip
 8008f78:	f8d9 c000 	ldr.w	ip, [r9]
 8008f7c:	0c12      	lsrs	r2, r2, #16
 8008f7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008f82:	fb0a c202 	mla	r2, sl, r2, ip
 8008f86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f8a:	b289      	uxth	r1, r1
 8008f8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f90:	4577      	cmp	r7, lr
 8008f92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f96:	f849 1b04 	str.w	r1, [r9], #4
 8008f9a:	d8e3      	bhi.n	8008f64 <__multiply+0xb0>
 8008f9c:	9a01      	ldr	r2, [sp, #4]
 8008f9e:	f845 c002 	str.w	ip, [r5, r2]
 8008fa2:	9a03      	ldr	r2, [sp, #12]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008faa:	f1b9 0f00 	cmp.w	r9, #0
 8008fae:	d020      	beq.n	8008ff2 <__multiply+0x13e>
 8008fb0:	46ae      	mov	lr, r5
 8008fb2:	f04f 0a00 	mov.w	sl, #0
 8008fb6:	6829      	ldr	r1, [r5, #0]
 8008fb8:	f104 0c14 	add.w	ip, r4, #20
 8008fbc:	f8bc b000 	ldrh.w	fp, [ip]
 8008fc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008fc4:	b289      	uxth	r1, r1
 8008fc6:	fb09 220b 	mla	r2, r9, fp, r2
 8008fca:	4492      	add	sl, r2
 8008fcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008fd0:	f84e 1b04 	str.w	r1, [lr], #4
 8008fd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fd8:	f8be 1000 	ldrh.w	r1, [lr]
 8008fdc:	0c12      	lsrs	r2, r2, #16
 8008fde:	fb09 1102 	mla	r1, r9, r2, r1
 8008fe2:	4567      	cmp	r7, ip
 8008fe4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008fe8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fec:	d8e6      	bhi.n	8008fbc <__multiply+0x108>
 8008fee:	9a01      	ldr	r2, [sp, #4]
 8008ff0:	50a9      	str	r1, [r5, r2]
 8008ff2:	3504      	adds	r5, #4
 8008ff4:	e79b      	b.n	8008f2e <__multiply+0x7a>
 8008ff6:	3e01      	subs	r6, #1
 8008ff8:	e79d      	b.n	8008f36 <__multiply+0x82>
 8008ffa:	bf00      	nop
 8008ffc:	0800b978 	.word	0x0800b978
 8009000:	0800ba1b 	.word	0x0800ba1b

08009004 <__pow5mult>:
 8009004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009008:	4615      	mov	r5, r2
 800900a:	f012 0203 	ands.w	r2, r2, #3
 800900e:	4606      	mov	r6, r0
 8009010:	460f      	mov	r7, r1
 8009012:	d007      	beq.n	8009024 <__pow5mult+0x20>
 8009014:	4c25      	ldr	r4, [pc, #148]	; (80090ac <__pow5mult+0xa8>)
 8009016:	3a01      	subs	r2, #1
 8009018:	2300      	movs	r3, #0
 800901a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800901e:	f7ff fe55 	bl	8008ccc <__multadd>
 8009022:	4607      	mov	r7, r0
 8009024:	10ad      	asrs	r5, r5, #2
 8009026:	d03d      	beq.n	80090a4 <__pow5mult+0xa0>
 8009028:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800902a:	b97c      	cbnz	r4, 800904c <__pow5mult+0x48>
 800902c:	2010      	movs	r0, #16
 800902e:	f000 fb9f 	bl	8009770 <malloc>
 8009032:	4602      	mov	r2, r0
 8009034:	6270      	str	r0, [r6, #36]	; 0x24
 8009036:	b928      	cbnz	r0, 8009044 <__pow5mult+0x40>
 8009038:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800903c:	4b1c      	ldr	r3, [pc, #112]	; (80090b0 <__pow5mult+0xac>)
 800903e:	481d      	ldr	r0, [pc, #116]	; (80090b4 <__pow5mult+0xb0>)
 8009040:	f000 fb66 	bl	8009710 <__assert_func>
 8009044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009048:	6004      	str	r4, [r0, #0]
 800904a:	60c4      	str	r4, [r0, #12]
 800904c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009050:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009054:	b94c      	cbnz	r4, 800906a <__pow5mult+0x66>
 8009056:	f240 2171 	movw	r1, #625	; 0x271
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff ff14 	bl	8008e88 <__i2b>
 8009060:	2300      	movs	r3, #0
 8009062:	4604      	mov	r4, r0
 8009064:	f8c8 0008 	str.w	r0, [r8, #8]
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	f04f 0900 	mov.w	r9, #0
 800906e:	07eb      	lsls	r3, r5, #31
 8009070:	d50a      	bpl.n	8009088 <__pow5mult+0x84>
 8009072:	4639      	mov	r1, r7
 8009074:	4622      	mov	r2, r4
 8009076:	4630      	mov	r0, r6
 8009078:	f7ff ff1c 	bl	8008eb4 <__multiply>
 800907c:	4680      	mov	r8, r0
 800907e:	4639      	mov	r1, r7
 8009080:	4630      	mov	r0, r6
 8009082:	f7ff fe01 	bl	8008c88 <_Bfree>
 8009086:	4647      	mov	r7, r8
 8009088:	106d      	asrs	r5, r5, #1
 800908a:	d00b      	beq.n	80090a4 <__pow5mult+0xa0>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	b938      	cbnz	r0, 80090a0 <__pow5mult+0x9c>
 8009090:	4622      	mov	r2, r4
 8009092:	4621      	mov	r1, r4
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff ff0d 	bl	8008eb4 <__multiply>
 800909a:	6020      	str	r0, [r4, #0]
 800909c:	f8c0 9000 	str.w	r9, [r0]
 80090a0:	4604      	mov	r4, r0
 80090a2:	e7e4      	b.n	800906e <__pow5mult+0x6a>
 80090a4:	4638      	mov	r0, r7
 80090a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090aa:	bf00      	nop
 80090ac:	0800bb68 	.word	0x0800bb68
 80090b0:	0800ba04 	.word	0x0800ba04
 80090b4:	0800ba1b 	.word	0x0800ba1b

080090b8 <__lshift>:
 80090b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	460c      	mov	r4, r1
 80090be:	4607      	mov	r7, r0
 80090c0:	4691      	mov	r9, r2
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	6849      	ldr	r1, [r1, #4]
 80090c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090ca:	68a3      	ldr	r3, [r4, #8]
 80090cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090d0:	f108 0601 	add.w	r6, r8, #1
 80090d4:	42b3      	cmp	r3, r6
 80090d6:	db0b      	blt.n	80090f0 <__lshift+0x38>
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff fd95 	bl	8008c08 <_Balloc>
 80090de:	4605      	mov	r5, r0
 80090e0:	b948      	cbnz	r0, 80090f6 <__lshift+0x3e>
 80090e2:	4602      	mov	r2, r0
 80090e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090e8:	4b29      	ldr	r3, [pc, #164]	; (8009190 <__lshift+0xd8>)
 80090ea:	482a      	ldr	r0, [pc, #168]	; (8009194 <__lshift+0xdc>)
 80090ec:	f000 fb10 	bl	8009710 <__assert_func>
 80090f0:	3101      	adds	r1, #1
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	e7ee      	b.n	80090d4 <__lshift+0x1c>
 80090f6:	2300      	movs	r3, #0
 80090f8:	f100 0114 	add.w	r1, r0, #20
 80090fc:	f100 0210 	add.w	r2, r0, #16
 8009100:	4618      	mov	r0, r3
 8009102:	4553      	cmp	r3, sl
 8009104:	db37      	blt.n	8009176 <__lshift+0xbe>
 8009106:	6920      	ldr	r0, [r4, #16]
 8009108:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800910c:	f104 0314 	add.w	r3, r4, #20
 8009110:	f019 091f 	ands.w	r9, r9, #31
 8009114:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009118:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800911c:	d02f      	beq.n	800917e <__lshift+0xc6>
 800911e:	468a      	mov	sl, r1
 8009120:	f04f 0c00 	mov.w	ip, #0
 8009124:	f1c9 0e20 	rsb	lr, r9, #32
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	fa02 f209 	lsl.w	r2, r2, r9
 800912e:	ea42 020c 	orr.w	r2, r2, ip
 8009132:	f84a 2b04 	str.w	r2, [sl], #4
 8009136:	f853 2b04 	ldr.w	r2, [r3], #4
 800913a:	4298      	cmp	r0, r3
 800913c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009140:	d8f2      	bhi.n	8009128 <__lshift+0x70>
 8009142:	1b03      	subs	r3, r0, r4
 8009144:	3b15      	subs	r3, #21
 8009146:	f023 0303 	bic.w	r3, r3, #3
 800914a:	3304      	adds	r3, #4
 800914c:	f104 0215 	add.w	r2, r4, #21
 8009150:	4290      	cmp	r0, r2
 8009152:	bf38      	it	cc
 8009154:	2304      	movcc	r3, #4
 8009156:	f841 c003 	str.w	ip, [r1, r3]
 800915a:	f1bc 0f00 	cmp.w	ip, #0
 800915e:	d001      	beq.n	8009164 <__lshift+0xac>
 8009160:	f108 0602 	add.w	r6, r8, #2
 8009164:	3e01      	subs	r6, #1
 8009166:	4638      	mov	r0, r7
 8009168:	4621      	mov	r1, r4
 800916a:	612e      	str	r6, [r5, #16]
 800916c:	f7ff fd8c 	bl	8008c88 <_Bfree>
 8009170:	4628      	mov	r0, r5
 8009172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009176:	f842 0f04 	str.w	r0, [r2, #4]!
 800917a:	3301      	adds	r3, #1
 800917c:	e7c1      	b.n	8009102 <__lshift+0x4a>
 800917e:	3904      	subs	r1, #4
 8009180:	f853 2b04 	ldr.w	r2, [r3], #4
 8009184:	4298      	cmp	r0, r3
 8009186:	f841 2f04 	str.w	r2, [r1, #4]!
 800918a:	d8f9      	bhi.n	8009180 <__lshift+0xc8>
 800918c:	e7ea      	b.n	8009164 <__lshift+0xac>
 800918e:	bf00      	nop
 8009190:	0800b978 	.word	0x0800b978
 8009194:	0800ba1b 	.word	0x0800ba1b

08009198 <__mcmp>:
 8009198:	4603      	mov	r3, r0
 800919a:	690a      	ldr	r2, [r1, #16]
 800919c:	6900      	ldr	r0, [r0, #16]
 800919e:	b530      	push	{r4, r5, lr}
 80091a0:	1a80      	subs	r0, r0, r2
 80091a2:	d10d      	bne.n	80091c0 <__mcmp+0x28>
 80091a4:	3314      	adds	r3, #20
 80091a6:	3114      	adds	r1, #20
 80091a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80091ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091b8:	4295      	cmp	r5, r2
 80091ba:	d002      	beq.n	80091c2 <__mcmp+0x2a>
 80091bc:	d304      	bcc.n	80091c8 <__mcmp+0x30>
 80091be:	2001      	movs	r0, #1
 80091c0:	bd30      	pop	{r4, r5, pc}
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	d3f4      	bcc.n	80091b0 <__mcmp+0x18>
 80091c6:	e7fb      	b.n	80091c0 <__mcmp+0x28>
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295
 80091cc:	e7f8      	b.n	80091c0 <__mcmp+0x28>
	...

080091d0 <__mdiff>:
 80091d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	460d      	mov	r5, r1
 80091d6:	4607      	mov	r7, r0
 80091d8:	4611      	mov	r1, r2
 80091da:	4628      	mov	r0, r5
 80091dc:	4614      	mov	r4, r2
 80091de:	f7ff ffdb 	bl	8009198 <__mcmp>
 80091e2:	1e06      	subs	r6, r0, #0
 80091e4:	d111      	bne.n	800920a <__mdiff+0x3a>
 80091e6:	4631      	mov	r1, r6
 80091e8:	4638      	mov	r0, r7
 80091ea:	f7ff fd0d 	bl	8008c08 <_Balloc>
 80091ee:	4602      	mov	r2, r0
 80091f0:	b928      	cbnz	r0, 80091fe <__mdiff+0x2e>
 80091f2:	f240 2132 	movw	r1, #562	; 0x232
 80091f6:	4b3a      	ldr	r3, [pc, #232]	; (80092e0 <__mdiff+0x110>)
 80091f8:	483a      	ldr	r0, [pc, #232]	; (80092e4 <__mdiff+0x114>)
 80091fa:	f000 fa89 	bl	8009710 <__assert_func>
 80091fe:	2301      	movs	r3, #1
 8009200:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009204:	4610      	mov	r0, r2
 8009206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920a:	bfa4      	itt	ge
 800920c:	4623      	movge	r3, r4
 800920e:	462c      	movge	r4, r5
 8009210:	4638      	mov	r0, r7
 8009212:	6861      	ldr	r1, [r4, #4]
 8009214:	bfa6      	itte	ge
 8009216:	461d      	movge	r5, r3
 8009218:	2600      	movge	r6, #0
 800921a:	2601      	movlt	r6, #1
 800921c:	f7ff fcf4 	bl	8008c08 <_Balloc>
 8009220:	4602      	mov	r2, r0
 8009222:	b918      	cbnz	r0, 800922c <__mdiff+0x5c>
 8009224:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009228:	4b2d      	ldr	r3, [pc, #180]	; (80092e0 <__mdiff+0x110>)
 800922a:	e7e5      	b.n	80091f8 <__mdiff+0x28>
 800922c:	f102 0814 	add.w	r8, r2, #20
 8009230:	46c2      	mov	sl, r8
 8009232:	f04f 0c00 	mov.w	ip, #0
 8009236:	6927      	ldr	r7, [r4, #16]
 8009238:	60c6      	str	r6, [r0, #12]
 800923a:	692e      	ldr	r6, [r5, #16]
 800923c:	f104 0014 	add.w	r0, r4, #20
 8009240:	f105 0914 	add.w	r9, r5, #20
 8009244:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009248:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800924c:	3410      	adds	r4, #16
 800924e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009252:	f859 3b04 	ldr.w	r3, [r9], #4
 8009256:	fa1f f18b 	uxth.w	r1, fp
 800925a:	448c      	add	ip, r1
 800925c:	b299      	uxth	r1, r3
 800925e:	0c1b      	lsrs	r3, r3, #16
 8009260:	ebac 0101 	sub.w	r1, ip, r1
 8009264:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009268:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800926c:	b289      	uxth	r1, r1
 800926e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009272:	454e      	cmp	r6, r9
 8009274:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009278:	f84a 3b04 	str.w	r3, [sl], #4
 800927c:	d8e7      	bhi.n	800924e <__mdiff+0x7e>
 800927e:	1b73      	subs	r3, r6, r5
 8009280:	3b15      	subs	r3, #21
 8009282:	f023 0303 	bic.w	r3, r3, #3
 8009286:	3515      	adds	r5, #21
 8009288:	3304      	adds	r3, #4
 800928a:	42ae      	cmp	r6, r5
 800928c:	bf38      	it	cc
 800928e:	2304      	movcc	r3, #4
 8009290:	4418      	add	r0, r3
 8009292:	4443      	add	r3, r8
 8009294:	461e      	mov	r6, r3
 8009296:	4605      	mov	r5, r0
 8009298:	4575      	cmp	r5, lr
 800929a:	d30e      	bcc.n	80092ba <__mdiff+0xea>
 800929c:	f10e 0103 	add.w	r1, lr, #3
 80092a0:	1a09      	subs	r1, r1, r0
 80092a2:	f021 0103 	bic.w	r1, r1, #3
 80092a6:	3803      	subs	r0, #3
 80092a8:	4586      	cmp	lr, r0
 80092aa:	bf38      	it	cc
 80092ac:	2100      	movcc	r1, #0
 80092ae:	4419      	add	r1, r3
 80092b0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80092b4:	b18b      	cbz	r3, 80092da <__mdiff+0x10a>
 80092b6:	6117      	str	r7, [r2, #16]
 80092b8:	e7a4      	b.n	8009204 <__mdiff+0x34>
 80092ba:	f855 8b04 	ldr.w	r8, [r5], #4
 80092be:	fa1f f188 	uxth.w	r1, r8
 80092c2:	4461      	add	r1, ip
 80092c4:	140c      	asrs	r4, r1, #16
 80092c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092ca:	b289      	uxth	r1, r1
 80092cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80092d0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80092d4:	f846 1b04 	str.w	r1, [r6], #4
 80092d8:	e7de      	b.n	8009298 <__mdiff+0xc8>
 80092da:	3f01      	subs	r7, #1
 80092dc:	e7e8      	b.n	80092b0 <__mdiff+0xe0>
 80092de:	bf00      	nop
 80092e0:	0800b978 	.word	0x0800b978
 80092e4:	0800ba1b 	.word	0x0800ba1b

080092e8 <__ulp>:
 80092e8:	4b11      	ldr	r3, [pc, #68]	; (8009330 <__ulp+0x48>)
 80092ea:	400b      	ands	r3, r1
 80092ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dd02      	ble.n	80092fa <__ulp+0x12>
 80092f4:	2000      	movs	r0, #0
 80092f6:	4619      	mov	r1, r3
 80092f8:	4770      	bx	lr
 80092fa:	425b      	negs	r3, r3
 80092fc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009300:	f04f 0000 	mov.w	r0, #0
 8009304:	f04f 0100 	mov.w	r1, #0
 8009308:	ea4f 5223 	mov.w	r2, r3, asr #20
 800930c:	da04      	bge.n	8009318 <__ulp+0x30>
 800930e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009312:	fa43 f102 	asr.w	r1, r3, r2
 8009316:	4770      	bx	lr
 8009318:	f1a2 0314 	sub.w	r3, r2, #20
 800931c:	2b1e      	cmp	r3, #30
 800931e:	bfd6      	itet	le
 8009320:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009324:	2301      	movgt	r3, #1
 8009326:	fa22 f303 	lsrle.w	r3, r2, r3
 800932a:	4618      	mov	r0, r3
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	7ff00000 	.word	0x7ff00000

08009334 <__b2d>:
 8009334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009338:	6907      	ldr	r7, [r0, #16]
 800933a:	f100 0914 	add.w	r9, r0, #20
 800933e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009342:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009346:	f1a7 0804 	sub.w	r8, r7, #4
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff fd4e 	bl	8008dec <__hi0bits>
 8009350:	f1c0 0320 	rsb	r3, r0, #32
 8009354:	280a      	cmp	r0, #10
 8009356:	600b      	str	r3, [r1, #0]
 8009358:	491f      	ldr	r1, [pc, #124]	; (80093d8 <__b2d+0xa4>)
 800935a:	dc17      	bgt.n	800938c <__b2d+0x58>
 800935c:	45c1      	cmp	r9, r8
 800935e:	bf28      	it	cs
 8009360:	2200      	movcs	r2, #0
 8009362:	f1c0 0c0b 	rsb	ip, r0, #11
 8009366:	fa26 f30c 	lsr.w	r3, r6, ip
 800936a:	bf38      	it	cc
 800936c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009370:	ea43 0501 	orr.w	r5, r3, r1
 8009374:	f100 0315 	add.w	r3, r0, #21
 8009378:	fa06 f303 	lsl.w	r3, r6, r3
 800937c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009380:	ea43 0402 	orr.w	r4, r3, r2
 8009384:	4620      	mov	r0, r4
 8009386:	4629      	mov	r1, r5
 8009388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800938c:	45c1      	cmp	r9, r8
 800938e:	bf2e      	itee	cs
 8009390:	2200      	movcs	r2, #0
 8009392:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009396:	f1a7 0808 	subcc.w	r8, r7, #8
 800939a:	f1b0 030b 	subs.w	r3, r0, #11
 800939e:	d016      	beq.n	80093ce <__b2d+0x9a>
 80093a0:	f1c3 0720 	rsb	r7, r3, #32
 80093a4:	fa22 f107 	lsr.w	r1, r2, r7
 80093a8:	45c8      	cmp	r8, r9
 80093aa:	fa06 f603 	lsl.w	r6, r6, r3
 80093ae:	ea46 0601 	orr.w	r6, r6, r1
 80093b2:	bf94      	ite	ls
 80093b4:	2100      	movls	r1, #0
 80093b6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80093ba:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80093be:	fa02 f003 	lsl.w	r0, r2, r3
 80093c2:	40f9      	lsrs	r1, r7
 80093c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80093c8:	ea40 0401 	orr.w	r4, r0, r1
 80093cc:	e7da      	b.n	8009384 <__b2d+0x50>
 80093ce:	4614      	mov	r4, r2
 80093d0:	ea46 0501 	orr.w	r5, r6, r1
 80093d4:	e7d6      	b.n	8009384 <__b2d+0x50>
 80093d6:	bf00      	nop
 80093d8:	3ff00000 	.word	0x3ff00000

080093dc <__d2b>:
 80093dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80093e0:	2101      	movs	r1, #1
 80093e2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80093e6:	4690      	mov	r8, r2
 80093e8:	461d      	mov	r5, r3
 80093ea:	f7ff fc0d 	bl	8008c08 <_Balloc>
 80093ee:	4604      	mov	r4, r0
 80093f0:	b930      	cbnz	r0, 8009400 <__d2b+0x24>
 80093f2:	4602      	mov	r2, r0
 80093f4:	f240 310a 	movw	r1, #778	; 0x30a
 80093f8:	4b24      	ldr	r3, [pc, #144]	; (800948c <__d2b+0xb0>)
 80093fa:	4825      	ldr	r0, [pc, #148]	; (8009490 <__d2b+0xb4>)
 80093fc:	f000 f988 	bl	8009710 <__assert_func>
 8009400:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009404:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009408:	bb2d      	cbnz	r5, 8009456 <__d2b+0x7a>
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	f1b8 0300 	subs.w	r3, r8, #0
 8009410:	d026      	beq.n	8009460 <__d2b+0x84>
 8009412:	4668      	mov	r0, sp
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	f7ff fd09 	bl	8008e2c <__lo0bits>
 800941a:	9900      	ldr	r1, [sp, #0]
 800941c:	b1f0      	cbz	r0, 800945c <__d2b+0x80>
 800941e:	9a01      	ldr	r2, [sp, #4]
 8009420:	f1c0 0320 	rsb	r3, r0, #32
 8009424:	fa02 f303 	lsl.w	r3, r2, r3
 8009428:	430b      	orrs	r3, r1
 800942a:	40c2      	lsrs	r2, r0
 800942c:	6163      	str	r3, [r4, #20]
 800942e:	9201      	str	r2, [sp, #4]
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	bf14      	ite	ne
 8009436:	2102      	movne	r1, #2
 8009438:	2101      	moveq	r1, #1
 800943a:	61a3      	str	r3, [r4, #24]
 800943c:	6121      	str	r1, [r4, #16]
 800943e:	b1c5      	cbz	r5, 8009472 <__d2b+0x96>
 8009440:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009444:	4405      	add	r5, r0
 8009446:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800944a:	603d      	str	r5, [r7, #0]
 800944c:	6030      	str	r0, [r6, #0]
 800944e:	4620      	mov	r0, r4
 8009450:	b002      	add	sp, #8
 8009452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800945a:	e7d6      	b.n	800940a <__d2b+0x2e>
 800945c:	6161      	str	r1, [r4, #20]
 800945e:	e7e7      	b.n	8009430 <__d2b+0x54>
 8009460:	a801      	add	r0, sp, #4
 8009462:	f7ff fce3 	bl	8008e2c <__lo0bits>
 8009466:	2101      	movs	r1, #1
 8009468:	9b01      	ldr	r3, [sp, #4]
 800946a:	6121      	str	r1, [r4, #16]
 800946c:	6163      	str	r3, [r4, #20]
 800946e:	3020      	adds	r0, #32
 8009470:	e7e5      	b.n	800943e <__d2b+0x62>
 8009472:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009476:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800947a:	6038      	str	r0, [r7, #0]
 800947c:	6918      	ldr	r0, [r3, #16]
 800947e:	f7ff fcb5 	bl	8008dec <__hi0bits>
 8009482:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009486:	6031      	str	r1, [r6, #0]
 8009488:	e7e1      	b.n	800944e <__d2b+0x72>
 800948a:	bf00      	nop
 800948c:	0800b978 	.word	0x0800b978
 8009490:	0800ba1b 	.word	0x0800ba1b

08009494 <__ratio>:
 8009494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	4688      	mov	r8, r1
 800949a:	4669      	mov	r1, sp
 800949c:	4681      	mov	r9, r0
 800949e:	f7ff ff49 	bl	8009334 <__b2d>
 80094a2:	460f      	mov	r7, r1
 80094a4:	4604      	mov	r4, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	4640      	mov	r0, r8
 80094aa:	a901      	add	r1, sp, #4
 80094ac:	f7ff ff42 	bl	8009334 <__b2d>
 80094b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80094b8:	468b      	mov	fp, r1
 80094ba:	eba3 0c02 	sub.w	ip, r3, r2
 80094be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	bfd5      	itete	le
 80094cc:	460a      	movle	r2, r1
 80094ce:	462a      	movgt	r2, r5
 80094d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80094d4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80094d8:	bfd8      	it	le
 80094da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80094de:	465b      	mov	r3, fp
 80094e0:	4602      	mov	r2, r0
 80094e2:	4639      	mov	r1, r7
 80094e4:	4620      	mov	r0, r4
 80094e6:	f7f7 f921 	bl	800072c <__aeabi_ddiv>
 80094ea:	b003      	add	sp, #12
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094f0 <__copybits>:
 80094f0:	3901      	subs	r1, #1
 80094f2:	b570      	push	{r4, r5, r6, lr}
 80094f4:	1149      	asrs	r1, r1, #5
 80094f6:	6914      	ldr	r4, [r2, #16]
 80094f8:	3101      	adds	r1, #1
 80094fa:	f102 0314 	add.w	r3, r2, #20
 80094fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009502:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009506:	1f05      	subs	r5, r0, #4
 8009508:	42a3      	cmp	r3, r4
 800950a:	d30c      	bcc.n	8009526 <__copybits+0x36>
 800950c:	1aa3      	subs	r3, r4, r2
 800950e:	3b11      	subs	r3, #17
 8009510:	f023 0303 	bic.w	r3, r3, #3
 8009514:	3211      	adds	r2, #17
 8009516:	42a2      	cmp	r2, r4
 8009518:	bf88      	it	hi
 800951a:	2300      	movhi	r3, #0
 800951c:	4418      	add	r0, r3
 800951e:	2300      	movs	r3, #0
 8009520:	4288      	cmp	r0, r1
 8009522:	d305      	bcc.n	8009530 <__copybits+0x40>
 8009524:	bd70      	pop	{r4, r5, r6, pc}
 8009526:	f853 6b04 	ldr.w	r6, [r3], #4
 800952a:	f845 6f04 	str.w	r6, [r5, #4]!
 800952e:	e7eb      	b.n	8009508 <__copybits+0x18>
 8009530:	f840 3b04 	str.w	r3, [r0], #4
 8009534:	e7f4      	b.n	8009520 <__copybits+0x30>

08009536 <__any_on>:
 8009536:	f100 0214 	add.w	r2, r0, #20
 800953a:	6900      	ldr	r0, [r0, #16]
 800953c:	114b      	asrs	r3, r1, #5
 800953e:	4298      	cmp	r0, r3
 8009540:	b510      	push	{r4, lr}
 8009542:	db11      	blt.n	8009568 <__any_on+0x32>
 8009544:	dd0a      	ble.n	800955c <__any_on+0x26>
 8009546:	f011 011f 	ands.w	r1, r1, #31
 800954a:	d007      	beq.n	800955c <__any_on+0x26>
 800954c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009550:	fa24 f001 	lsr.w	r0, r4, r1
 8009554:	fa00 f101 	lsl.w	r1, r0, r1
 8009558:	428c      	cmp	r4, r1
 800955a:	d10b      	bne.n	8009574 <__any_on+0x3e>
 800955c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009560:	4293      	cmp	r3, r2
 8009562:	d803      	bhi.n	800956c <__any_on+0x36>
 8009564:	2000      	movs	r0, #0
 8009566:	bd10      	pop	{r4, pc}
 8009568:	4603      	mov	r3, r0
 800956a:	e7f7      	b.n	800955c <__any_on+0x26>
 800956c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009570:	2900      	cmp	r1, #0
 8009572:	d0f5      	beq.n	8009560 <__any_on+0x2a>
 8009574:	2001      	movs	r0, #1
 8009576:	e7f6      	b.n	8009566 <__any_on+0x30>

08009578 <_calloc_r>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	fba1 5402 	umull	r5, r4, r1, r2
 800957e:	b934      	cbnz	r4, 800958e <_calloc_r+0x16>
 8009580:	4629      	mov	r1, r5
 8009582:	f000 f82d 	bl	80095e0 <_malloc_r>
 8009586:	4606      	mov	r6, r0
 8009588:	b928      	cbnz	r0, 8009596 <_calloc_r+0x1e>
 800958a:	4630      	mov	r0, r6
 800958c:	bd70      	pop	{r4, r5, r6, pc}
 800958e:	220c      	movs	r2, #12
 8009590:	2600      	movs	r6, #0
 8009592:	6002      	str	r2, [r0, #0]
 8009594:	e7f9      	b.n	800958a <_calloc_r+0x12>
 8009596:	462a      	mov	r2, r5
 8009598:	4621      	mov	r1, r4
 800959a:	f7fe f98b 	bl	80078b4 <memset>
 800959e:	e7f4      	b.n	800958a <_calloc_r+0x12>

080095a0 <sbrk_aligned>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	4e0e      	ldr	r6, [pc, #56]	; (80095dc <sbrk_aligned+0x3c>)
 80095a4:	460c      	mov	r4, r1
 80095a6:	6831      	ldr	r1, [r6, #0]
 80095a8:	4605      	mov	r5, r0
 80095aa:	b911      	cbnz	r1, 80095b2 <sbrk_aligned+0x12>
 80095ac:	f000 f892 	bl	80096d4 <_sbrk_r>
 80095b0:	6030      	str	r0, [r6, #0]
 80095b2:	4621      	mov	r1, r4
 80095b4:	4628      	mov	r0, r5
 80095b6:	f000 f88d 	bl	80096d4 <_sbrk_r>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d00a      	beq.n	80095d4 <sbrk_aligned+0x34>
 80095be:	1cc4      	adds	r4, r0, #3
 80095c0:	f024 0403 	bic.w	r4, r4, #3
 80095c4:	42a0      	cmp	r0, r4
 80095c6:	d007      	beq.n	80095d8 <sbrk_aligned+0x38>
 80095c8:	1a21      	subs	r1, r4, r0
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f882 	bl	80096d4 <_sbrk_r>
 80095d0:	3001      	adds	r0, #1
 80095d2:	d101      	bne.n	80095d8 <sbrk_aligned+0x38>
 80095d4:	f04f 34ff 	mov.w	r4, #4294967295
 80095d8:	4620      	mov	r0, r4
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	200006f4 	.word	0x200006f4

080095e0 <_malloc_r>:
 80095e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e4:	1ccd      	adds	r5, r1, #3
 80095e6:	f025 0503 	bic.w	r5, r5, #3
 80095ea:	3508      	adds	r5, #8
 80095ec:	2d0c      	cmp	r5, #12
 80095ee:	bf38      	it	cc
 80095f0:	250c      	movcc	r5, #12
 80095f2:	2d00      	cmp	r5, #0
 80095f4:	4607      	mov	r7, r0
 80095f6:	db01      	blt.n	80095fc <_malloc_r+0x1c>
 80095f8:	42a9      	cmp	r1, r5
 80095fa:	d905      	bls.n	8009608 <_malloc_r+0x28>
 80095fc:	230c      	movs	r3, #12
 80095fe:	2600      	movs	r6, #0
 8009600:	603b      	str	r3, [r7, #0]
 8009602:	4630      	mov	r0, r6
 8009604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009608:	4e2e      	ldr	r6, [pc, #184]	; (80096c4 <_malloc_r+0xe4>)
 800960a:	f000 f8b9 	bl	8009780 <__malloc_lock>
 800960e:	6833      	ldr	r3, [r6, #0]
 8009610:	461c      	mov	r4, r3
 8009612:	bb34      	cbnz	r4, 8009662 <_malloc_r+0x82>
 8009614:	4629      	mov	r1, r5
 8009616:	4638      	mov	r0, r7
 8009618:	f7ff ffc2 	bl	80095a0 <sbrk_aligned>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	4604      	mov	r4, r0
 8009620:	d14d      	bne.n	80096be <_malloc_r+0xde>
 8009622:	6834      	ldr	r4, [r6, #0]
 8009624:	4626      	mov	r6, r4
 8009626:	2e00      	cmp	r6, #0
 8009628:	d140      	bne.n	80096ac <_malloc_r+0xcc>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	4631      	mov	r1, r6
 800962e:	4638      	mov	r0, r7
 8009630:	eb04 0803 	add.w	r8, r4, r3
 8009634:	f000 f84e 	bl	80096d4 <_sbrk_r>
 8009638:	4580      	cmp	r8, r0
 800963a:	d13a      	bne.n	80096b2 <_malloc_r+0xd2>
 800963c:	6821      	ldr	r1, [r4, #0]
 800963e:	3503      	adds	r5, #3
 8009640:	1a6d      	subs	r5, r5, r1
 8009642:	f025 0503 	bic.w	r5, r5, #3
 8009646:	3508      	adds	r5, #8
 8009648:	2d0c      	cmp	r5, #12
 800964a:	bf38      	it	cc
 800964c:	250c      	movcc	r5, #12
 800964e:	4638      	mov	r0, r7
 8009650:	4629      	mov	r1, r5
 8009652:	f7ff ffa5 	bl	80095a0 <sbrk_aligned>
 8009656:	3001      	adds	r0, #1
 8009658:	d02b      	beq.n	80096b2 <_malloc_r+0xd2>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	442b      	add	r3, r5
 800965e:	6023      	str	r3, [r4, #0]
 8009660:	e00e      	b.n	8009680 <_malloc_r+0xa0>
 8009662:	6822      	ldr	r2, [r4, #0]
 8009664:	1b52      	subs	r2, r2, r5
 8009666:	d41e      	bmi.n	80096a6 <_malloc_r+0xc6>
 8009668:	2a0b      	cmp	r2, #11
 800966a:	d916      	bls.n	800969a <_malloc_r+0xba>
 800966c:	1961      	adds	r1, r4, r5
 800966e:	42a3      	cmp	r3, r4
 8009670:	6025      	str	r5, [r4, #0]
 8009672:	bf18      	it	ne
 8009674:	6059      	strne	r1, [r3, #4]
 8009676:	6863      	ldr	r3, [r4, #4]
 8009678:	bf08      	it	eq
 800967a:	6031      	streq	r1, [r6, #0]
 800967c:	5162      	str	r2, [r4, r5]
 800967e:	604b      	str	r3, [r1, #4]
 8009680:	4638      	mov	r0, r7
 8009682:	f104 060b 	add.w	r6, r4, #11
 8009686:	f000 f881 	bl	800978c <__malloc_unlock>
 800968a:	f026 0607 	bic.w	r6, r6, #7
 800968e:	1d23      	adds	r3, r4, #4
 8009690:	1af2      	subs	r2, r6, r3
 8009692:	d0b6      	beq.n	8009602 <_malloc_r+0x22>
 8009694:	1b9b      	subs	r3, r3, r6
 8009696:	50a3      	str	r3, [r4, r2]
 8009698:	e7b3      	b.n	8009602 <_malloc_r+0x22>
 800969a:	6862      	ldr	r2, [r4, #4]
 800969c:	42a3      	cmp	r3, r4
 800969e:	bf0c      	ite	eq
 80096a0:	6032      	streq	r2, [r6, #0]
 80096a2:	605a      	strne	r2, [r3, #4]
 80096a4:	e7ec      	b.n	8009680 <_malloc_r+0xa0>
 80096a6:	4623      	mov	r3, r4
 80096a8:	6864      	ldr	r4, [r4, #4]
 80096aa:	e7b2      	b.n	8009612 <_malloc_r+0x32>
 80096ac:	4634      	mov	r4, r6
 80096ae:	6876      	ldr	r6, [r6, #4]
 80096b0:	e7b9      	b.n	8009626 <_malloc_r+0x46>
 80096b2:	230c      	movs	r3, #12
 80096b4:	4638      	mov	r0, r7
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	f000 f868 	bl	800978c <__malloc_unlock>
 80096bc:	e7a1      	b.n	8009602 <_malloc_r+0x22>
 80096be:	6025      	str	r5, [r4, #0]
 80096c0:	e7de      	b.n	8009680 <_malloc_r+0xa0>
 80096c2:	bf00      	nop
 80096c4:	200006f0 	.word	0x200006f0

080096c8 <nan>:
 80096c8:	2000      	movs	r0, #0
 80096ca:	4901      	ldr	r1, [pc, #4]	; (80096d0 <nan+0x8>)
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	7ff80000 	.word	0x7ff80000

080096d4 <_sbrk_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	2300      	movs	r3, #0
 80096d8:	4d05      	ldr	r5, [pc, #20]	; (80096f0 <_sbrk_r+0x1c>)
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	f7fa ff5e 	bl	80045a0 <_sbrk>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_sbrk_r+0x1a>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_sbrk_r+0x1a>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	200006f8 	.word	0x200006f8

080096f4 <__ascii_wctomb>:
 80096f4:	4603      	mov	r3, r0
 80096f6:	4608      	mov	r0, r1
 80096f8:	b141      	cbz	r1, 800970c <__ascii_wctomb+0x18>
 80096fa:	2aff      	cmp	r2, #255	; 0xff
 80096fc:	d904      	bls.n	8009708 <__ascii_wctomb+0x14>
 80096fe:	228a      	movs	r2, #138	; 0x8a
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	4770      	bx	lr
 8009708:	2001      	movs	r0, #1
 800970a:	700a      	strb	r2, [r1, #0]
 800970c:	4770      	bx	lr
	...

08009710 <__assert_func>:
 8009710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009712:	4614      	mov	r4, r2
 8009714:	461a      	mov	r2, r3
 8009716:	4b09      	ldr	r3, [pc, #36]	; (800973c <__assert_func+0x2c>)
 8009718:	4605      	mov	r5, r0
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68d8      	ldr	r0, [r3, #12]
 800971e:	b14c      	cbz	r4, 8009734 <__assert_func+0x24>
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <__assert_func+0x30>)
 8009722:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009726:	9100      	str	r1, [sp, #0]
 8009728:	462b      	mov	r3, r5
 800972a:	4906      	ldr	r1, [pc, #24]	; (8009744 <__assert_func+0x34>)
 800972c:	f000 f80e 	bl	800974c <fiprintf>
 8009730:	f000 fc28 	bl	8009f84 <abort>
 8009734:	4b04      	ldr	r3, [pc, #16]	; (8009748 <__assert_func+0x38>)
 8009736:	461c      	mov	r4, r3
 8009738:	e7f3      	b.n	8009722 <__assert_func+0x12>
 800973a:	bf00      	nop
 800973c:	20000078 	.word	0x20000078
 8009740:	0800bb74 	.word	0x0800bb74
 8009744:	0800bb81 	.word	0x0800bb81
 8009748:	0800bbaf 	.word	0x0800bbaf

0800974c <fiprintf>:
 800974c:	b40e      	push	{r1, r2, r3}
 800974e:	b503      	push	{r0, r1, lr}
 8009750:	4601      	mov	r1, r0
 8009752:	ab03      	add	r3, sp, #12
 8009754:	4805      	ldr	r0, [pc, #20]	; (800976c <fiprintf+0x20>)
 8009756:	f853 2b04 	ldr.w	r2, [r3], #4
 800975a:	6800      	ldr	r0, [r0, #0]
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	f000 f88b 	bl	8009878 <_vfiprintf_r>
 8009762:	b002      	add	sp, #8
 8009764:	f85d eb04 	ldr.w	lr, [sp], #4
 8009768:	b003      	add	sp, #12
 800976a:	4770      	bx	lr
 800976c:	20000078 	.word	0x20000078

08009770 <malloc>:
 8009770:	4b02      	ldr	r3, [pc, #8]	; (800977c <malloc+0xc>)
 8009772:	4601      	mov	r1, r0
 8009774:	6818      	ldr	r0, [r3, #0]
 8009776:	f7ff bf33 	b.w	80095e0 <_malloc_r>
 800977a:	bf00      	nop
 800977c:	20000078 	.word	0x20000078

08009780 <__malloc_lock>:
 8009780:	4801      	ldr	r0, [pc, #4]	; (8009788 <__malloc_lock+0x8>)
 8009782:	f000 bdbb 	b.w	800a2fc <__retarget_lock_acquire_recursive>
 8009786:	bf00      	nop
 8009788:	200006fc 	.word	0x200006fc

0800978c <__malloc_unlock>:
 800978c:	4801      	ldr	r0, [pc, #4]	; (8009794 <__malloc_unlock+0x8>)
 800978e:	f000 bdb6 	b.w	800a2fe <__retarget_lock_release_recursive>
 8009792:	bf00      	nop
 8009794:	200006fc 	.word	0x200006fc

08009798 <_free_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4605      	mov	r5, r0
 800979c:	2900      	cmp	r1, #0
 800979e:	d040      	beq.n	8009822 <_free_r+0x8a>
 80097a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a4:	1f0c      	subs	r4, r1, #4
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	bfb8      	it	lt
 80097aa:	18e4      	addlt	r4, r4, r3
 80097ac:	f7ff ffe8 	bl	8009780 <__malloc_lock>
 80097b0:	4a1c      	ldr	r2, [pc, #112]	; (8009824 <_free_r+0x8c>)
 80097b2:	6813      	ldr	r3, [r2, #0]
 80097b4:	b933      	cbnz	r3, 80097c4 <_free_r+0x2c>
 80097b6:	6063      	str	r3, [r4, #4]
 80097b8:	6014      	str	r4, [r2, #0]
 80097ba:	4628      	mov	r0, r5
 80097bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097c0:	f7ff bfe4 	b.w	800978c <__malloc_unlock>
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	d908      	bls.n	80097da <_free_r+0x42>
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	1821      	adds	r1, r4, r0
 80097cc:	428b      	cmp	r3, r1
 80097ce:	bf01      	itttt	eq
 80097d0:	6819      	ldreq	r1, [r3, #0]
 80097d2:	685b      	ldreq	r3, [r3, #4]
 80097d4:	1809      	addeq	r1, r1, r0
 80097d6:	6021      	streq	r1, [r4, #0]
 80097d8:	e7ed      	b.n	80097b6 <_free_r+0x1e>
 80097da:	461a      	mov	r2, r3
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	b10b      	cbz	r3, 80097e4 <_free_r+0x4c>
 80097e0:	42a3      	cmp	r3, r4
 80097e2:	d9fa      	bls.n	80097da <_free_r+0x42>
 80097e4:	6811      	ldr	r1, [r2, #0]
 80097e6:	1850      	adds	r0, r2, r1
 80097e8:	42a0      	cmp	r0, r4
 80097ea:	d10b      	bne.n	8009804 <_free_r+0x6c>
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	4401      	add	r1, r0
 80097f0:	1850      	adds	r0, r2, r1
 80097f2:	4283      	cmp	r3, r0
 80097f4:	6011      	str	r1, [r2, #0]
 80097f6:	d1e0      	bne.n	80097ba <_free_r+0x22>
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	4401      	add	r1, r0
 80097fe:	6011      	str	r1, [r2, #0]
 8009800:	6053      	str	r3, [r2, #4]
 8009802:	e7da      	b.n	80097ba <_free_r+0x22>
 8009804:	d902      	bls.n	800980c <_free_r+0x74>
 8009806:	230c      	movs	r3, #12
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	e7d6      	b.n	80097ba <_free_r+0x22>
 800980c:	6820      	ldr	r0, [r4, #0]
 800980e:	1821      	adds	r1, r4, r0
 8009810:	428b      	cmp	r3, r1
 8009812:	bf01      	itttt	eq
 8009814:	6819      	ldreq	r1, [r3, #0]
 8009816:	685b      	ldreq	r3, [r3, #4]
 8009818:	1809      	addeq	r1, r1, r0
 800981a:	6021      	streq	r1, [r4, #0]
 800981c:	6063      	str	r3, [r4, #4]
 800981e:	6054      	str	r4, [r2, #4]
 8009820:	e7cb      	b.n	80097ba <_free_r+0x22>
 8009822:	bd38      	pop	{r3, r4, r5, pc}
 8009824:	200006f0 	.word	0x200006f0

08009828 <__sfputc_r>:
 8009828:	6893      	ldr	r3, [r2, #8]
 800982a:	b410      	push	{r4}
 800982c:	3b01      	subs	r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	6093      	str	r3, [r2, #8]
 8009832:	da07      	bge.n	8009844 <__sfputc_r+0x1c>
 8009834:	6994      	ldr	r4, [r2, #24]
 8009836:	42a3      	cmp	r3, r4
 8009838:	db01      	blt.n	800983e <__sfputc_r+0x16>
 800983a:	290a      	cmp	r1, #10
 800983c:	d102      	bne.n	8009844 <__sfputc_r+0x1c>
 800983e:	bc10      	pop	{r4}
 8009840:	f000 bae0 	b.w	8009e04 <__swbuf_r>
 8009844:	6813      	ldr	r3, [r2, #0]
 8009846:	1c58      	adds	r0, r3, #1
 8009848:	6010      	str	r0, [r2, #0]
 800984a:	7019      	strb	r1, [r3, #0]
 800984c:	4608      	mov	r0, r1
 800984e:	bc10      	pop	{r4}
 8009850:	4770      	bx	lr

08009852 <__sfputs_r>:
 8009852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009854:	4606      	mov	r6, r0
 8009856:	460f      	mov	r7, r1
 8009858:	4614      	mov	r4, r2
 800985a:	18d5      	adds	r5, r2, r3
 800985c:	42ac      	cmp	r4, r5
 800985e:	d101      	bne.n	8009864 <__sfputs_r+0x12>
 8009860:	2000      	movs	r0, #0
 8009862:	e007      	b.n	8009874 <__sfputs_r+0x22>
 8009864:	463a      	mov	r2, r7
 8009866:	4630      	mov	r0, r6
 8009868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800986c:	f7ff ffdc 	bl	8009828 <__sfputc_r>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d1f3      	bne.n	800985c <__sfputs_r+0xa>
 8009874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009878 <_vfiprintf_r>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	460d      	mov	r5, r1
 800987e:	4614      	mov	r4, r2
 8009880:	4698      	mov	r8, r3
 8009882:	4606      	mov	r6, r0
 8009884:	b09d      	sub	sp, #116	; 0x74
 8009886:	b118      	cbz	r0, 8009890 <_vfiprintf_r+0x18>
 8009888:	6983      	ldr	r3, [r0, #24]
 800988a:	b90b      	cbnz	r3, 8009890 <_vfiprintf_r+0x18>
 800988c:	f000 fc98 	bl	800a1c0 <__sinit>
 8009890:	4b89      	ldr	r3, [pc, #548]	; (8009ab8 <_vfiprintf_r+0x240>)
 8009892:	429d      	cmp	r5, r3
 8009894:	d11b      	bne.n	80098ce <_vfiprintf_r+0x56>
 8009896:	6875      	ldr	r5, [r6, #4]
 8009898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800989a:	07d9      	lsls	r1, r3, #31
 800989c:	d405      	bmi.n	80098aa <_vfiprintf_r+0x32>
 800989e:	89ab      	ldrh	r3, [r5, #12]
 80098a0:	059a      	lsls	r2, r3, #22
 80098a2:	d402      	bmi.n	80098aa <_vfiprintf_r+0x32>
 80098a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a6:	f000 fd29 	bl	800a2fc <__retarget_lock_acquire_recursive>
 80098aa:	89ab      	ldrh	r3, [r5, #12]
 80098ac:	071b      	lsls	r3, r3, #28
 80098ae:	d501      	bpl.n	80098b4 <_vfiprintf_r+0x3c>
 80098b0:	692b      	ldr	r3, [r5, #16]
 80098b2:	b9eb      	cbnz	r3, 80098f0 <_vfiprintf_r+0x78>
 80098b4:	4629      	mov	r1, r5
 80098b6:	4630      	mov	r0, r6
 80098b8:	f000 faf6 	bl	8009ea8 <__swsetup_r>
 80098bc:	b1c0      	cbz	r0, 80098f0 <_vfiprintf_r+0x78>
 80098be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c0:	07dc      	lsls	r4, r3, #31
 80098c2:	d50e      	bpl.n	80098e2 <_vfiprintf_r+0x6a>
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295
 80098c8:	b01d      	add	sp, #116	; 0x74
 80098ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ce:	4b7b      	ldr	r3, [pc, #492]	; (8009abc <_vfiprintf_r+0x244>)
 80098d0:	429d      	cmp	r5, r3
 80098d2:	d101      	bne.n	80098d8 <_vfiprintf_r+0x60>
 80098d4:	68b5      	ldr	r5, [r6, #8]
 80098d6:	e7df      	b.n	8009898 <_vfiprintf_r+0x20>
 80098d8:	4b79      	ldr	r3, [pc, #484]	; (8009ac0 <_vfiprintf_r+0x248>)
 80098da:	429d      	cmp	r5, r3
 80098dc:	bf08      	it	eq
 80098de:	68f5      	ldreq	r5, [r6, #12]
 80098e0:	e7da      	b.n	8009898 <_vfiprintf_r+0x20>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	0598      	lsls	r0, r3, #22
 80098e6:	d4ed      	bmi.n	80098c4 <_vfiprintf_r+0x4c>
 80098e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ea:	f000 fd08 	bl	800a2fe <__retarget_lock_release_recursive>
 80098ee:	e7e9      	b.n	80098c4 <_vfiprintf_r+0x4c>
 80098f0:	2300      	movs	r3, #0
 80098f2:	9309      	str	r3, [sp, #36]	; 0x24
 80098f4:	2320      	movs	r3, #32
 80098f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098fa:	2330      	movs	r3, #48	; 0x30
 80098fc:	f04f 0901 	mov.w	r9, #1
 8009900:	f8cd 800c 	str.w	r8, [sp, #12]
 8009904:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009ac4 <_vfiprintf_r+0x24c>
 8009908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800990c:	4623      	mov	r3, r4
 800990e:	469a      	mov	sl, r3
 8009910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009914:	b10a      	cbz	r2, 800991a <_vfiprintf_r+0xa2>
 8009916:	2a25      	cmp	r2, #37	; 0x25
 8009918:	d1f9      	bne.n	800990e <_vfiprintf_r+0x96>
 800991a:	ebba 0b04 	subs.w	fp, sl, r4
 800991e:	d00b      	beq.n	8009938 <_vfiprintf_r+0xc0>
 8009920:	465b      	mov	r3, fp
 8009922:	4622      	mov	r2, r4
 8009924:	4629      	mov	r1, r5
 8009926:	4630      	mov	r0, r6
 8009928:	f7ff ff93 	bl	8009852 <__sfputs_r>
 800992c:	3001      	adds	r0, #1
 800992e:	f000 80aa 	beq.w	8009a86 <_vfiprintf_r+0x20e>
 8009932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009934:	445a      	add	r2, fp
 8009936:	9209      	str	r2, [sp, #36]	; 0x24
 8009938:	f89a 3000 	ldrb.w	r3, [sl]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 80a2 	beq.w	8009a86 <_vfiprintf_r+0x20e>
 8009942:	2300      	movs	r3, #0
 8009944:	f04f 32ff 	mov.w	r2, #4294967295
 8009948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800994c:	f10a 0a01 	add.w	sl, sl, #1
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	9307      	str	r3, [sp, #28]
 8009954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009958:	931a      	str	r3, [sp, #104]	; 0x68
 800995a:	4654      	mov	r4, sl
 800995c:	2205      	movs	r2, #5
 800995e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009962:	4858      	ldr	r0, [pc, #352]	; (8009ac4 <_vfiprintf_r+0x24c>)
 8009964:	f000 fd32 	bl	800a3cc <memchr>
 8009968:	9a04      	ldr	r2, [sp, #16]
 800996a:	b9d8      	cbnz	r0, 80099a4 <_vfiprintf_r+0x12c>
 800996c:	06d1      	lsls	r1, r2, #27
 800996e:	bf44      	itt	mi
 8009970:	2320      	movmi	r3, #32
 8009972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009976:	0713      	lsls	r3, r2, #28
 8009978:	bf44      	itt	mi
 800997a:	232b      	movmi	r3, #43	; 0x2b
 800997c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009980:	f89a 3000 	ldrb.w	r3, [sl]
 8009984:	2b2a      	cmp	r3, #42	; 0x2a
 8009986:	d015      	beq.n	80099b4 <_vfiprintf_r+0x13c>
 8009988:	4654      	mov	r4, sl
 800998a:	2000      	movs	r0, #0
 800998c:	f04f 0c0a 	mov.w	ip, #10
 8009990:	9a07      	ldr	r2, [sp, #28]
 8009992:	4621      	mov	r1, r4
 8009994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009998:	3b30      	subs	r3, #48	; 0x30
 800999a:	2b09      	cmp	r3, #9
 800999c:	d94e      	bls.n	8009a3c <_vfiprintf_r+0x1c4>
 800999e:	b1b0      	cbz	r0, 80099ce <_vfiprintf_r+0x156>
 80099a0:	9207      	str	r2, [sp, #28]
 80099a2:	e014      	b.n	80099ce <_vfiprintf_r+0x156>
 80099a4:	eba0 0308 	sub.w	r3, r0, r8
 80099a8:	fa09 f303 	lsl.w	r3, r9, r3
 80099ac:	4313      	orrs	r3, r2
 80099ae:	46a2      	mov	sl, r4
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	e7d2      	b.n	800995a <_vfiprintf_r+0xe2>
 80099b4:	9b03      	ldr	r3, [sp, #12]
 80099b6:	1d19      	adds	r1, r3, #4
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	9103      	str	r1, [sp, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	bfbb      	ittet	lt
 80099c0:	425b      	neglt	r3, r3
 80099c2:	f042 0202 	orrlt.w	r2, r2, #2
 80099c6:	9307      	strge	r3, [sp, #28]
 80099c8:	9307      	strlt	r3, [sp, #28]
 80099ca:	bfb8      	it	lt
 80099cc:	9204      	strlt	r2, [sp, #16]
 80099ce:	7823      	ldrb	r3, [r4, #0]
 80099d0:	2b2e      	cmp	r3, #46	; 0x2e
 80099d2:	d10c      	bne.n	80099ee <_vfiprintf_r+0x176>
 80099d4:	7863      	ldrb	r3, [r4, #1]
 80099d6:	2b2a      	cmp	r3, #42	; 0x2a
 80099d8:	d135      	bne.n	8009a46 <_vfiprintf_r+0x1ce>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	3402      	adds	r4, #2
 80099de:	1d1a      	adds	r2, r3, #4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	9203      	str	r2, [sp, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	bfb8      	it	lt
 80099e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80099ec:	9305      	str	r3, [sp, #20]
 80099ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009ac8 <_vfiprintf_r+0x250>
 80099f2:	2203      	movs	r2, #3
 80099f4:	4650      	mov	r0, sl
 80099f6:	7821      	ldrb	r1, [r4, #0]
 80099f8:	f000 fce8 	bl	800a3cc <memchr>
 80099fc:	b140      	cbz	r0, 8009a10 <_vfiprintf_r+0x198>
 80099fe:	2340      	movs	r3, #64	; 0x40
 8009a00:	eba0 000a 	sub.w	r0, r0, sl
 8009a04:	fa03 f000 	lsl.w	r0, r3, r0
 8009a08:	9b04      	ldr	r3, [sp, #16]
 8009a0a:	3401      	adds	r4, #1
 8009a0c:	4303      	orrs	r3, r0
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a14:	2206      	movs	r2, #6
 8009a16:	482d      	ldr	r0, [pc, #180]	; (8009acc <_vfiprintf_r+0x254>)
 8009a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a1c:	f000 fcd6 	bl	800a3cc <memchr>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d03f      	beq.n	8009aa4 <_vfiprintf_r+0x22c>
 8009a24:	4b2a      	ldr	r3, [pc, #168]	; (8009ad0 <_vfiprintf_r+0x258>)
 8009a26:	bb1b      	cbnz	r3, 8009a70 <_vfiprintf_r+0x1f8>
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	3307      	adds	r3, #7
 8009a2c:	f023 0307 	bic.w	r3, r3, #7
 8009a30:	3308      	adds	r3, #8
 8009a32:	9303      	str	r3, [sp, #12]
 8009a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a36:	443b      	add	r3, r7
 8009a38:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3a:	e767      	b.n	800990c <_vfiprintf_r+0x94>
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	2001      	movs	r0, #1
 8009a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a44:	e7a5      	b.n	8009992 <_vfiprintf_r+0x11a>
 8009a46:	2300      	movs	r3, #0
 8009a48:	f04f 0c0a 	mov.w	ip, #10
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	3401      	adds	r4, #1
 8009a50:	9305      	str	r3, [sp, #20]
 8009a52:	4620      	mov	r0, r4
 8009a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a58:	3a30      	subs	r2, #48	; 0x30
 8009a5a:	2a09      	cmp	r2, #9
 8009a5c:	d903      	bls.n	8009a66 <_vfiprintf_r+0x1ee>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0c5      	beq.n	80099ee <_vfiprintf_r+0x176>
 8009a62:	9105      	str	r1, [sp, #20]
 8009a64:	e7c3      	b.n	80099ee <_vfiprintf_r+0x176>
 8009a66:	4604      	mov	r4, r0
 8009a68:	2301      	movs	r3, #1
 8009a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a6e:	e7f0      	b.n	8009a52 <_vfiprintf_r+0x1da>
 8009a70:	ab03      	add	r3, sp, #12
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	462a      	mov	r2, r5
 8009a76:	4630      	mov	r0, r6
 8009a78:	4b16      	ldr	r3, [pc, #88]	; (8009ad4 <_vfiprintf_r+0x25c>)
 8009a7a:	a904      	add	r1, sp, #16
 8009a7c:	f3af 8000 	nop.w
 8009a80:	4607      	mov	r7, r0
 8009a82:	1c78      	adds	r0, r7, #1
 8009a84:	d1d6      	bne.n	8009a34 <_vfiprintf_r+0x1bc>
 8009a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a88:	07d9      	lsls	r1, r3, #31
 8009a8a:	d405      	bmi.n	8009a98 <_vfiprintf_r+0x220>
 8009a8c:	89ab      	ldrh	r3, [r5, #12]
 8009a8e:	059a      	lsls	r2, r3, #22
 8009a90:	d402      	bmi.n	8009a98 <_vfiprintf_r+0x220>
 8009a92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a94:	f000 fc33 	bl	800a2fe <__retarget_lock_release_recursive>
 8009a98:	89ab      	ldrh	r3, [r5, #12]
 8009a9a:	065b      	lsls	r3, r3, #25
 8009a9c:	f53f af12 	bmi.w	80098c4 <_vfiprintf_r+0x4c>
 8009aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aa2:	e711      	b.n	80098c8 <_vfiprintf_r+0x50>
 8009aa4:	ab03      	add	r3, sp, #12
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4630      	mov	r0, r6
 8009aac:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <_vfiprintf_r+0x25c>)
 8009aae:	a904      	add	r1, sp, #16
 8009ab0:	f000 f882 	bl	8009bb8 <_printf_i>
 8009ab4:	e7e4      	b.n	8009a80 <_vfiprintf_r+0x208>
 8009ab6:	bf00      	nop
 8009ab8:	0800bd04 	.word	0x0800bd04
 8009abc:	0800bd24 	.word	0x0800bd24
 8009ac0:	0800bce4 	.word	0x0800bce4
 8009ac4:	0800bcb1 	.word	0x0800bcb1
 8009ac8:	0800bcb7 	.word	0x0800bcb7
 8009acc:	0800bcbb 	.word	0x0800bcbb
 8009ad0:	00000000 	.word	0x00000000
 8009ad4:	08009853 	.word	0x08009853

08009ad8 <_printf_common>:
 8009ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009adc:	4616      	mov	r6, r2
 8009ade:	4699      	mov	r9, r3
 8009ae0:	688a      	ldr	r2, [r1, #8]
 8009ae2:	690b      	ldr	r3, [r1, #16]
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	bfb8      	it	lt
 8009aea:	4613      	movlt	r3, r2
 8009aec:	6033      	str	r3, [r6, #0]
 8009aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009af2:	460c      	mov	r4, r1
 8009af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009af8:	b10a      	cbz	r2, 8009afe <_printf_common+0x26>
 8009afa:	3301      	adds	r3, #1
 8009afc:	6033      	str	r3, [r6, #0]
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	0699      	lsls	r1, r3, #26
 8009b02:	bf42      	ittt	mi
 8009b04:	6833      	ldrmi	r3, [r6, #0]
 8009b06:	3302      	addmi	r3, #2
 8009b08:	6033      	strmi	r3, [r6, #0]
 8009b0a:	6825      	ldr	r5, [r4, #0]
 8009b0c:	f015 0506 	ands.w	r5, r5, #6
 8009b10:	d106      	bne.n	8009b20 <_printf_common+0x48>
 8009b12:	f104 0a19 	add.w	sl, r4, #25
 8009b16:	68e3      	ldr	r3, [r4, #12]
 8009b18:	6832      	ldr	r2, [r6, #0]
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	42ab      	cmp	r3, r5
 8009b1e:	dc28      	bgt.n	8009b72 <_printf_common+0x9a>
 8009b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b24:	1e13      	subs	r3, r2, #0
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	bf18      	it	ne
 8009b2a:	2301      	movne	r3, #1
 8009b2c:	0692      	lsls	r2, r2, #26
 8009b2e:	d42d      	bmi.n	8009b8c <_printf_common+0xb4>
 8009b30:	4649      	mov	r1, r9
 8009b32:	4638      	mov	r0, r7
 8009b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b38:	47c0      	blx	r8
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	d020      	beq.n	8009b80 <_printf_common+0xa8>
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	68e5      	ldr	r5, [r4, #12]
 8009b42:	f003 0306 	and.w	r3, r3, #6
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	bf18      	it	ne
 8009b4a:	2500      	movne	r5, #0
 8009b4c:	6832      	ldr	r2, [r6, #0]
 8009b4e:	f04f 0600 	mov.w	r6, #0
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	bf08      	it	eq
 8009b56:	1aad      	subeq	r5, r5, r2
 8009b58:	6922      	ldr	r2, [r4, #16]
 8009b5a:	bf08      	it	eq
 8009b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b60:	4293      	cmp	r3, r2
 8009b62:	bfc4      	itt	gt
 8009b64:	1a9b      	subgt	r3, r3, r2
 8009b66:	18ed      	addgt	r5, r5, r3
 8009b68:	341a      	adds	r4, #26
 8009b6a:	42b5      	cmp	r5, r6
 8009b6c:	d11a      	bne.n	8009ba4 <_printf_common+0xcc>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e008      	b.n	8009b84 <_printf_common+0xac>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4652      	mov	r2, sl
 8009b76:	4649      	mov	r1, r9
 8009b78:	4638      	mov	r0, r7
 8009b7a:	47c0      	blx	r8
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d103      	bne.n	8009b88 <_printf_common+0xb0>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b88:	3501      	adds	r5, #1
 8009b8a:	e7c4      	b.n	8009b16 <_printf_common+0x3e>
 8009b8c:	2030      	movs	r0, #48	; 0x30
 8009b8e:	18e1      	adds	r1, r4, r3
 8009b90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b9a:	4422      	add	r2, r4
 8009b9c:	3302      	adds	r3, #2
 8009b9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ba2:	e7c5      	b.n	8009b30 <_printf_common+0x58>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4649      	mov	r1, r9
 8009baa:	4638      	mov	r0, r7
 8009bac:	47c0      	blx	r8
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d0e6      	beq.n	8009b80 <_printf_common+0xa8>
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7d9      	b.n	8009b6a <_printf_common+0x92>
	...

08009bb8 <_printf_i>:
 8009bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	7e0f      	ldrb	r7, [r1, #24]
 8009bbe:	4691      	mov	r9, r2
 8009bc0:	2f78      	cmp	r7, #120	; 0x78
 8009bc2:	4680      	mov	r8, r0
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	469a      	mov	sl, r3
 8009bc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bce:	d807      	bhi.n	8009be0 <_printf_i+0x28>
 8009bd0:	2f62      	cmp	r7, #98	; 0x62
 8009bd2:	d80a      	bhi.n	8009bea <_printf_i+0x32>
 8009bd4:	2f00      	cmp	r7, #0
 8009bd6:	f000 80d9 	beq.w	8009d8c <_printf_i+0x1d4>
 8009bda:	2f58      	cmp	r7, #88	; 0x58
 8009bdc:	f000 80a4 	beq.w	8009d28 <_printf_i+0x170>
 8009be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009be8:	e03a      	b.n	8009c60 <_printf_i+0xa8>
 8009bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bee:	2b15      	cmp	r3, #21
 8009bf0:	d8f6      	bhi.n	8009be0 <_printf_i+0x28>
 8009bf2:	a101      	add	r1, pc, #4	; (adr r1, 8009bf8 <_printf_i+0x40>)
 8009bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009be1 	.word	0x08009be1
 8009c04:	08009be1 	.word	0x08009be1
 8009c08:	08009be1 	.word	0x08009be1
 8009c0c:	08009be1 	.word	0x08009be1
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009be1 	.word	0x08009be1
 8009c18:	08009be1 	.word	0x08009be1
 8009c1c:	08009be1 	.word	0x08009be1
 8009c20:	08009be1 	.word	0x08009be1
 8009c24:	08009d73 	.word	0x08009d73
 8009c28:	08009c95 	.word	0x08009c95
 8009c2c:	08009d55 	.word	0x08009d55
 8009c30:	08009be1 	.word	0x08009be1
 8009c34:	08009be1 	.word	0x08009be1
 8009c38:	08009d95 	.word	0x08009d95
 8009c3c:	08009be1 	.word	0x08009be1
 8009c40:	08009c95 	.word	0x08009c95
 8009c44:	08009be1 	.word	0x08009be1
 8009c48:	08009be1 	.word	0x08009be1
 8009c4c:	08009d5d 	.word	0x08009d5d
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	1d1a      	adds	r2, r3, #4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	602a      	str	r2, [r5, #0]
 8009c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c60:	2301      	movs	r3, #1
 8009c62:	e0a4      	b.n	8009dae <_printf_i+0x1f6>
 8009c64:	6820      	ldr	r0, [r4, #0]
 8009c66:	6829      	ldr	r1, [r5, #0]
 8009c68:	0606      	lsls	r6, r0, #24
 8009c6a:	f101 0304 	add.w	r3, r1, #4
 8009c6e:	d50a      	bpl.n	8009c86 <_printf_i+0xce>
 8009c70:	680e      	ldr	r6, [r1, #0]
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	2e00      	cmp	r6, #0
 8009c76:	da03      	bge.n	8009c80 <_printf_i+0xc8>
 8009c78:	232d      	movs	r3, #45	; 0x2d
 8009c7a:	4276      	negs	r6, r6
 8009c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c80:	230a      	movs	r3, #10
 8009c82:	485e      	ldr	r0, [pc, #376]	; (8009dfc <_printf_i+0x244>)
 8009c84:	e019      	b.n	8009cba <_printf_i+0x102>
 8009c86:	680e      	ldr	r6, [r1, #0]
 8009c88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c8c:	602b      	str	r3, [r5, #0]
 8009c8e:	bf18      	it	ne
 8009c90:	b236      	sxthne	r6, r6
 8009c92:	e7ef      	b.n	8009c74 <_printf_i+0xbc>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	6820      	ldr	r0, [r4, #0]
 8009c98:	1d19      	adds	r1, r3, #4
 8009c9a:	6029      	str	r1, [r5, #0]
 8009c9c:	0601      	lsls	r1, r0, #24
 8009c9e:	d501      	bpl.n	8009ca4 <_printf_i+0xec>
 8009ca0:	681e      	ldr	r6, [r3, #0]
 8009ca2:	e002      	b.n	8009caa <_printf_i+0xf2>
 8009ca4:	0646      	lsls	r6, r0, #25
 8009ca6:	d5fb      	bpl.n	8009ca0 <_printf_i+0xe8>
 8009ca8:	881e      	ldrh	r6, [r3, #0]
 8009caa:	2f6f      	cmp	r7, #111	; 0x6f
 8009cac:	bf0c      	ite	eq
 8009cae:	2308      	moveq	r3, #8
 8009cb0:	230a      	movne	r3, #10
 8009cb2:	4852      	ldr	r0, [pc, #328]	; (8009dfc <_printf_i+0x244>)
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cba:	6865      	ldr	r5, [r4, #4]
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	bfa8      	it	ge
 8009cc0:	6821      	ldrge	r1, [r4, #0]
 8009cc2:	60a5      	str	r5, [r4, #8]
 8009cc4:	bfa4      	itt	ge
 8009cc6:	f021 0104 	bicge.w	r1, r1, #4
 8009cca:	6021      	strge	r1, [r4, #0]
 8009ccc:	b90e      	cbnz	r6, 8009cd2 <_printf_i+0x11a>
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	d04d      	beq.n	8009d6e <_printf_i+0x1b6>
 8009cd2:	4615      	mov	r5, r2
 8009cd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cd8:	fb03 6711 	mls	r7, r3, r1, r6
 8009cdc:	5dc7      	ldrb	r7, [r0, r7]
 8009cde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ce2:	4637      	mov	r7, r6
 8009ce4:	42bb      	cmp	r3, r7
 8009ce6:	460e      	mov	r6, r1
 8009ce8:	d9f4      	bls.n	8009cd4 <_printf_i+0x11c>
 8009cea:	2b08      	cmp	r3, #8
 8009cec:	d10b      	bne.n	8009d06 <_printf_i+0x14e>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	07de      	lsls	r6, r3, #31
 8009cf2:	d508      	bpl.n	8009d06 <_printf_i+0x14e>
 8009cf4:	6923      	ldr	r3, [r4, #16]
 8009cf6:	6861      	ldr	r1, [r4, #4]
 8009cf8:	4299      	cmp	r1, r3
 8009cfa:	bfde      	ittt	le
 8009cfc:	2330      	movle	r3, #48	; 0x30
 8009cfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d06:	1b52      	subs	r2, r2, r5
 8009d08:	6122      	str	r2, [r4, #16]
 8009d0a:	464b      	mov	r3, r9
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	4640      	mov	r0, r8
 8009d10:	f8cd a000 	str.w	sl, [sp]
 8009d14:	aa03      	add	r2, sp, #12
 8009d16:	f7ff fedf 	bl	8009ad8 <_printf_common>
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	d14c      	bne.n	8009db8 <_printf_i+0x200>
 8009d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d22:	b004      	add	sp, #16
 8009d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d28:	4834      	ldr	r0, [pc, #208]	; (8009dfc <_printf_i+0x244>)
 8009d2a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d2e:	6829      	ldr	r1, [r5, #0]
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d36:	6029      	str	r1, [r5, #0]
 8009d38:	061d      	lsls	r5, r3, #24
 8009d3a:	d514      	bpl.n	8009d66 <_printf_i+0x1ae>
 8009d3c:	07df      	lsls	r7, r3, #31
 8009d3e:	bf44      	itt	mi
 8009d40:	f043 0320 	orrmi.w	r3, r3, #32
 8009d44:	6023      	strmi	r3, [r4, #0]
 8009d46:	b91e      	cbnz	r6, 8009d50 <_printf_i+0x198>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	f023 0320 	bic.w	r3, r3, #32
 8009d4e:	6023      	str	r3, [r4, #0]
 8009d50:	2310      	movs	r3, #16
 8009d52:	e7af      	b.n	8009cb4 <_printf_i+0xfc>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	f043 0320 	orr.w	r3, r3, #32
 8009d5a:	6023      	str	r3, [r4, #0]
 8009d5c:	2378      	movs	r3, #120	; 0x78
 8009d5e:	4828      	ldr	r0, [pc, #160]	; (8009e00 <_printf_i+0x248>)
 8009d60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d64:	e7e3      	b.n	8009d2e <_printf_i+0x176>
 8009d66:	0659      	lsls	r1, r3, #25
 8009d68:	bf48      	it	mi
 8009d6a:	b2b6      	uxthmi	r6, r6
 8009d6c:	e7e6      	b.n	8009d3c <_printf_i+0x184>
 8009d6e:	4615      	mov	r5, r2
 8009d70:	e7bb      	b.n	8009cea <_printf_i+0x132>
 8009d72:	682b      	ldr	r3, [r5, #0]
 8009d74:	6826      	ldr	r6, [r4, #0]
 8009d76:	1d18      	adds	r0, r3, #4
 8009d78:	6961      	ldr	r1, [r4, #20]
 8009d7a:	6028      	str	r0, [r5, #0]
 8009d7c:	0635      	lsls	r5, r6, #24
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	d501      	bpl.n	8009d86 <_printf_i+0x1ce>
 8009d82:	6019      	str	r1, [r3, #0]
 8009d84:	e002      	b.n	8009d8c <_printf_i+0x1d4>
 8009d86:	0670      	lsls	r0, r6, #25
 8009d88:	d5fb      	bpl.n	8009d82 <_printf_i+0x1ca>
 8009d8a:	8019      	strh	r1, [r3, #0]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4615      	mov	r5, r2
 8009d90:	6123      	str	r3, [r4, #16]
 8009d92:	e7ba      	b.n	8009d0a <_printf_i+0x152>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	2100      	movs	r1, #0
 8009d98:	1d1a      	adds	r2, r3, #4
 8009d9a:	602a      	str	r2, [r5, #0]
 8009d9c:	681d      	ldr	r5, [r3, #0]
 8009d9e:	6862      	ldr	r2, [r4, #4]
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 fb13 	bl	800a3cc <memchr>
 8009da6:	b108      	cbz	r0, 8009dac <_printf_i+0x1f4>
 8009da8:	1b40      	subs	r0, r0, r5
 8009daa:	6060      	str	r0, [r4, #4]
 8009dac:	6863      	ldr	r3, [r4, #4]
 8009dae:	6123      	str	r3, [r4, #16]
 8009db0:	2300      	movs	r3, #0
 8009db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db6:	e7a8      	b.n	8009d0a <_printf_i+0x152>
 8009db8:	462a      	mov	r2, r5
 8009dba:	4649      	mov	r1, r9
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	6923      	ldr	r3, [r4, #16]
 8009dc0:	47d0      	blx	sl
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	d0ab      	beq.n	8009d1e <_printf_i+0x166>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	079b      	lsls	r3, r3, #30
 8009dca:	d413      	bmi.n	8009df4 <_printf_i+0x23c>
 8009dcc:	68e0      	ldr	r0, [r4, #12]
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	4298      	cmp	r0, r3
 8009dd2:	bfb8      	it	lt
 8009dd4:	4618      	movlt	r0, r3
 8009dd6:	e7a4      	b.n	8009d22 <_printf_i+0x16a>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	4632      	mov	r2, r6
 8009ddc:	4649      	mov	r1, r9
 8009dde:	4640      	mov	r0, r8
 8009de0:	47d0      	blx	sl
 8009de2:	3001      	adds	r0, #1
 8009de4:	d09b      	beq.n	8009d1e <_printf_i+0x166>
 8009de6:	3501      	adds	r5, #1
 8009de8:	68e3      	ldr	r3, [r4, #12]
 8009dea:	9903      	ldr	r1, [sp, #12]
 8009dec:	1a5b      	subs	r3, r3, r1
 8009dee:	42ab      	cmp	r3, r5
 8009df0:	dcf2      	bgt.n	8009dd8 <_printf_i+0x220>
 8009df2:	e7eb      	b.n	8009dcc <_printf_i+0x214>
 8009df4:	2500      	movs	r5, #0
 8009df6:	f104 0619 	add.w	r6, r4, #25
 8009dfa:	e7f5      	b.n	8009de8 <_printf_i+0x230>
 8009dfc:	0800bcc2 	.word	0x0800bcc2
 8009e00:	0800bcd3 	.word	0x0800bcd3

08009e04 <__swbuf_r>:
 8009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e06:	460e      	mov	r6, r1
 8009e08:	4614      	mov	r4, r2
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	b118      	cbz	r0, 8009e16 <__swbuf_r+0x12>
 8009e0e:	6983      	ldr	r3, [r0, #24]
 8009e10:	b90b      	cbnz	r3, 8009e16 <__swbuf_r+0x12>
 8009e12:	f000 f9d5 	bl	800a1c0 <__sinit>
 8009e16:	4b21      	ldr	r3, [pc, #132]	; (8009e9c <__swbuf_r+0x98>)
 8009e18:	429c      	cmp	r4, r3
 8009e1a:	d12b      	bne.n	8009e74 <__swbuf_r+0x70>
 8009e1c:	686c      	ldr	r4, [r5, #4]
 8009e1e:	69a3      	ldr	r3, [r4, #24]
 8009e20:	60a3      	str	r3, [r4, #8]
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	071a      	lsls	r2, r3, #28
 8009e26:	d52f      	bpl.n	8009e88 <__swbuf_r+0x84>
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	b36b      	cbz	r3, 8009e88 <__swbuf_r+0x84>
 8009e2c:	6923      	ldr	r3, [r4, #16]
 8009e2e:	6820      	ldr	r0, [r4, #0]
 8009e30:	b2f6      	uxtb	r6, r6
 8009e32:	1ac0      	subs	r0, r0, r3
 8009e34:	6963      	ldr	r3, [r4, #20]
 8009e36:	4637      	mov	r7, r6
 8009e38:	4283      	cmp	r3, r0
 8009e3a:	dc04      	bgt.n	8009e46 <__swbuf_r+0x42>
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f000 f92a 	bl	800a098 <_fflush_r>
 8009e44:	bb30      	cbnz	r0, 8009e94 <__swbuf_r+0x90>
 8009e46:	68a3      	ldr	r3, [r4, #8]
 8009e48:	3001      	adds	r0, #1
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	60a3      	str	r3, [r4, #8]
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	6022      	str	r2, [r4, #0]
 8009e54:	701e      	strb	r6, [r3, #0]
 8009e56:	6963      	ldr	r3, [r4, #20]
 8009e58:	4283      	cmp	r3, r0
 8009e5a:	d004      	beq.n	8009e66 <__swbuf_r+0x62>
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	07db      	lsls	r3, r3, #31
 8009e60:	d506      	bpl.n	8009e70 <__swbuf_r+0x6c>
 8009e62:	2e0a      	cmp	r6, #10
 8009e64:	d104      	bne.n	8009e70 <__swbuf_r+0x6c>
 8009e66:	4621      	mov	r1, r4
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f000 f915 	bl	800a098 <_fflush_r>
 8009e6e:	b988      	cbnz	r0, 8009e94 <__swbuf_r+0x90>
 8009e70:	4638      	mov	r0, r7
 8009e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e74:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <__swbuf_r+0x9c>)
 8009e76:	429c      	cmp	r4, r3
 8009e78:	d101      	bne.n	8009e7e <__swbuf_r+0x7a>
 8009e7a:	68ac      	ldr	r4, [r5, #8]
 8009e7c:	e7cf      	b.n	8009e1e <__swbuf_r+0x1a>
 8009e7e:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <__swbuf_r+0xa0>)
 8009e80:	429c      	cmp	r4, r3
 8009e82:	bf08      	it	eq
 8009e84:	68ec      	ldreq	r4, [r5, #12]
 8009e86:	e7ca      	b.n	8009e1e <__swbuf_r+0x1a>
 8009e88:	4621      	mov	r1, r4
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f000 f80c 	bl	8009ea8 <__swsetup_r>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d0cb      	beq.n	8009e2c <__swbuf_r+0x28>
 8009e94:	f04f 37ff 	mov.w	r7, #4294967295
 8009e98:	e7ea      	b.n	8009e70 <__swbuf_r+0x6c>
 8009e9a:	bf00      	nop
 8009e9c:	0800bd04 	.word	0x0800bd04
 8009ea0:	0800bd24 	.word	0x0800bd24
 8009ea4:	0800bce4 	.word	0x0800bce4

08009ea8 <__swsetup_r>:
 8009ea8:	4b32      	ldr	r3, [pc, #200]	; (8009f74 <__swsetup_r+0xcc>)
 8009eaa:	b570      	push	{r4, r5, r6, lr}
 8009eac:	681d      	ldr	r5, [r3, #0]
 8009eae:	4606      	mov	r6, r0
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	b125      	cbz	r5, 8009ebe <__swsetup_r+0x16>
 8009eb4:	69ab      	ldr	r3, [r5, #24]
 8009eb6:	b913      	cbnz	r3, 8009ebe <__swsetup_r+0x16>
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f000 f981 	bl	800a1c0 <__sinit>
 8009ebe:	4b2e      	ldr	r3, [pc, #184]	; (8009f78 <__swsetup_r+0xd0>)
 8009ec0:	429c      	cmp	r4, r3
 8009ec2:	d10f      	bne.n	8009ee4 <__swsetup_r+0x3c>
 8009ec4:	686c      	ldr	r4, [r5, #4]
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ecc:	0719      	lsls	r1, r3, #28
 8009ece:	d42c      	bmi.n	8009f2a <__swsetup_r+0x82>
 8009ed0:	06dd      	lsls	r5, r3, #27
 8009ed2:	d411      	bmi.n	8009ef8 <__swsetup_r+0x50>
 8009ed4:	2309      	movs	r3, #9
 8009ed6:	6033      	str	r3, [r6, #0]
 8009ed8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	e03e      	b.n	8009f62 <__swsetup_r+0xba>
 8009ee4:	4b25      	ldr	r3, [pc, #148]	; (8009f7c <__swsetup_r+0xd4>)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d101      	bne.n	8009eee <__swsetup_r+0x46>
 8009eea:	68ac      	ldr	r4, [r5, #8]
 8009eec:	e7eb      	b.n	8009ec6 <__swsetup_r+0x1e>
 8009eee:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <__swsetup_r+0xd8>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	bf08      	it	eq
 8009ef4:	68ec      	ldreq	r4, [r5, #12]
 8009ef6:	e7e6      	b.n	8009ec6 <__swsetup_r+0x1e>
 8009ef8:	0758      	lsls	r0, r3, #29
 8009efa:	d512      	bpl.n	8009f22 <__swsetup_r+0x7a>
 8009efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009efe:	b141      	cbz	r1, 8009f12 <__swsetup_r+0x6a>
 8009f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f04:	4299      	cmp	r1, r3
 8009f06:	d002      	beq.n	8009f0e <__swsetup_r+0x66>
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f7ff fc45 	bl	8009798 <_free_r>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	6363      	str	r3, [r4, #52]	; 0x34
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	6063      	str	r3, [r4, #4]
 8009f1e:	6923      	ldr	r3, [r4, #16]
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	89a3      	ldrh	r3, [r4, #12]
 8009f24:	f043 0308 	orr.w	r3, r3, #8
 8009f28:	81a3      	strh	r3, [r4, #12]
 8009f2a:	6923      	ldr	r3, [r4, #16]
 8009f2c:	b94b      	cbnz	r3, 8009f42 <__swsetup_r+0x9a>
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f38:	d003      	beq.n	8009f42 <__swsetup_r+0x9a>
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f000 fa05 	bl	800a34c <__smakebuf_r>
 8009f42:	89a0      	ldrh	r0, [r4, #12]
 8009f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f48:	f010 0301 	ands.w	r3, r0, #1
 8009f4c:	d00a      	beq.n	8009f64 <__swsetup_r+0xbc>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60a3      	str	r3, [r4, #8]
 8009f52:	6963      	ldr	r3, [r4, #20]
 8009f54:	425b      	negs	r3, r3
 8009f56:	61a3      	str	r3, [r4, #24]
 8009f58:	6923      	ldr	r3, [r4, #16]
 8009f5a:	b943      	cbnz	r3, 8009f6e <__swsetup_r+0xc6>
 8009f5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f60:	d1ba      	bne.n	8009ed8 <__swsetup_r+0x30>
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	0781      	lsls	r1, r0, #30
 8009f66:	bf58      	it	pl
 8009f68:	6963      	ldrpl	r3, [r4, #20]
 8009f6a:	60a3      	str	r3, [r4, #8]
 8009f6c:	e7f4      	b.n	8009f58 <__swsetup_r+0xb0>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e7f7      	b.n	8009f62 <__swsetup_r+0xba>
 8009f72:	bf00      	nop
 8009f74:	20000078 	.word	0x20000078
 8009f78:	0800bd04 	.word	0x0800bd04
 8009f7c:	0800bd24 	.word	0x0800bd24
 8009f80:	0800bce4 	.word	0x0800bce4

08009f84 <abort>:
 8009f84:	2006      	movs	r0, #6
 8009f86:	b508      	push	{r3, lr}
 8009f88:	f000 fa56 	bl	800a438 <raise>
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	f7fa fa94 	bl	80044ba <_exit>
	...

08009f94 <__sflush_r>:
 8009f94:	898a      	ldrh	r2, [r1, #12]
 8009f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f98:	4605      	mov	r5, r0
 8009f9a:	0710      	lsls	r0, r2, #28
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	d457      	bmi.n	800a050 <__sflush_r+0xbc>
 8009fa0:	684b      	ldr	r3, [r1, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dc04      	bgt.n	8009fb0 <__sflush_r+0x1c>
 8009fa6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dc01      	bgt.n	8009fb0 <__sflush_r+0x1c>
 8009fac:	2000      	movs	r0, #0
 8009fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fb2:	2e00      	cmp	r6, #0
 8009fb4:	d0fa      	beq.n	8009fac <__sflush_r+0x18>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fbc:	682f      	ldr	r7, [r5, #0]
 8009fbe:	602b      	str	r3, [r5, #0]
 8009fc0:	d032      	beq.n	800a028 <__sflush_r+0x94>
 8009fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	075a      	lsls	r2, r3, #29
 8009fc8:	d505      	bpl.n	8009fd6 <__sflush_r+0x42>
 8009fca:	6863      	ldr	r3, [r4, #4]
 8009fcc:	1ac0      	subs	r0, r0, r3
 8009fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fd0:	b10b      	cbz	r3, 8009fd6 <__sflush_r+0x42>
 8009fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fd4:	1ac0      	subs	r0, r0, r3
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	4602      	mov	r2, r0
 8009fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fdc:	4628      	mov	r0, r5
 8009fde:	6a21      	ldr	r1, [r4, #32]
 8009fe0:	47b0      	blx	r6
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	d106      	bne.n	8009ff6 <__sflush_r+0x62>
 8009fe8:	6829      	ldr	r1, [r5, #0]
 8009fea:	291d      	cmp	r1, #29
 8009fec:	d82c      	bhi.n	800a048 <__sflush_r+0xb4>
 8009fee:	4a29      	ldr	r2, [pc, #164]	; (800a094 <__sflush_r+0x100>)
 8009ff0:	40ca      	lsrs	r2, r1
 8009ff2:	07d6      	lsls	r6, r2, #31
 8009ff4:	d528      	bpl.n	800a048 <__sflush_r+0xb4>
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	6062      	str	r2, [r4, #4]
 8009ffa:	6922      	ldr	r2, [r4, #16]
 8009ffc:	04d9      	lsls	r1, r3, #19
 8009ffe:	6022      	str	r2, [r4, #0]
 800a000:	d504      	bpl.n	800a00c <__sflush_r+0x78>
 800a002:	1c42      	adds	r2, r0, #1
 800a004:	d101      	bne.n	800a00a <__sflush_r+0x76>
 800a006:	682b      	ldr	r3, [r5, #0]
 800a008:	b903      	cbnz	r3, 800a00c <__sflush_r+0x78>
 800a00a:	6560      	str	r0, [r4, #84]	; 0x54
 800a00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a00e:	602f      	str	r7, [r5, #0]
 800a010:	2900      	cmp	r1, #0
 800a012:	d0cb      	beq.n	8009fac <__sflush_r+0x18>
 800a014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a018:	4299      	cmp	r1, r3
 800a01a:	d002      	beq.n	800a022 <__sflush_r+0x8e>
 800a01c:	4628      	mov	r0, r5
 800a01e:	f7ff fbbb 	bl	8009798 <_free_r>
 800a022:	2000      	movs	r0, #0
 800a024:	6360      	str	r0, [r4, #52]	; 0x34
 800a026:	e7c2      	b.n	8009fae <__sflush_r+0x1a>
 800a028:	6a21      	ldr	r1, [r4, #32]
 800a02a:	2301      	movs	r3, #1
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b0      	blx	r6
 800a030:	1c41      	adds	r1, r0, #1
 800a032:	d1c7      	bne.n	8009fc4 <__sflush_r+0x30>
 800a034:	682b      	ldr	r3, [r5, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d0c4      	beq.n	8009fc4 <__sflush_r+0x30>
 800a03a:	2b1d      	cmp	r3, #29
 800a03c:	d001      	beq.n	800a042 <__sflush_r+0xae>
 800a03e:	2b16      	cmp	r3, #22
 800a040:	d101      	bne.n	800a046 <__sflush_r+0xb2>
 800a042:	602f      	str	r7, [r5, #0]
 800a044:	e7b2      	b.n	8009fac <__sflush_r+0x18>
 800a046:	89a3      	ldrh	r3, [r4, #12]
 800a048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a04c:	81a3      	strh	r3, [r4, #12]
 800a04e:	e7ae      	b.n	8009fae <__sflush_r+0x1a>
 800a050:	690f      	ldr	r7, [r1, #16]
 800a052:	2f00      	cmp	r7, #0
 800a054:	d0aa      	beq.n	8009fac <__sflush_r+0x18>
 800a056:	0793      	lsls	r3, r2, #30
 800a058:	bf18      	it	ne
 800a05a:	2300      	movne	r3, #0
 800a05c:	680e      	ldr	r6, [r1, #0]
 800a05e:	bf08      	it	eq
 800a060:	694b      	ldreq	r3, [r1, #20]
 800a062:	1bf6      	subs	r6, r6, r7
 800a064:	600f      	str	r7, [r1, #0]
 800a066:	608b      	str	r3, [r1, #8]
 800a068:	2e00      	cmp	r6, #0
 800a06a:	dd9f      	ble.n	8009fac <__sflush_r+0x18>
 800a06c:	4633      	mov	r3, r6
 800a06e:	463a      	mov	r2, r7
 800a070:	4628      	mov	r0, r5
 800a072:	6a21      	ldr	r1, [r4, #32]
 800a074:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a078:	47e0      	blx	ip
 800a07a:	2800      	cmp	r0, #0
 800a07c:	dc06      	bgt.n	800a08c <__sflush_r+0xf8>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	f04f 30ff 	mov.w	r0, #4294967295
 800a084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	e790      	b.n	8009fae <__sflush_r+0x1a>
 800a08c:	4407      	add	r7, r0
 800a08e:	1a36      	subs	r6, r6, r0
 800a090:	e7ea      	b.n	800a068 <__sflush_r+0xd4>
 800a092:	bf00      	nop
 800a094:	20400001 	.word	0x20400001

0800a098 <_fflush_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	690b      	ldr	r3, [r1, #16]
 800a09c:	4605      	mov	r5, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	b913      	cbnz	r3, 800a0a8 <_fflush_r+0x10>
 800a0a2:	2500      	movs	r5, #0
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	b118      	cbz	r0, 800a0b2 <_fflush_r+0x1a>
 800a0aa:	6983      	ldr	r3, [r0, #24]
 800a0ac:	b90b      	cbnz	r3, 800a0b2 <_fflush_r+0x1a>
 800a0ae:	f000 f887 	bl	800a1c0 <__sinit>
 800a0b2:	4b14      	ldr	r3, [pc, #80]	; (800a104 <_fflush_r+0x6c>)
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	d11b      	bne.n	800a0f0 <_fflush_r+0x58>
 800a0b8:	686c      	ldr	r4, [r5, #4]
 800a0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0ef      	beq.n	800a0a2 <_fflush_r+0xa>
 800a0c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0c4:	07d0      	lsls	r0, r2, #31
 800a0c6:	d404      	bmi.n	800a0d2 <_fflush_r+0x3a>
 800a0c8:	0599      	lsls	r1, r3, #22
 800a0ca:	d402      	bmi.n	800a0d2 <_fflush_r+0x3a>
 800a0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ce:	f000 f915 	bl	800a2fc <__retarget_lock_acquire_recursive>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f7ff ff5d 	bl	8009f94 <__sflush_r>
 800a0da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0dc:	4605      	mov	r5, r0
 800a0de:	07da      	lsls	r2, r3, #31
 800a0e0:	d4e0      	bmi.n	800a0a4 <_fflush_r+0xc>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	059b      	lsls	r3, r3, #22
 800a0e6:	d4dd      	bmi.n	800a0a4 <_fflush_r+0xc>
 800a0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ea:	f000 f908 	bl	800a2fe <__retarget_lock_release_recursive>
 800a0ee:	e7d9      	b.n	800a0a4 <_fflush_r+0xc>
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <_fflush_r+0x70>)
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	d101      	bne.n	800a0fa <_fflush_r+0x62>
 800a0f6:	68ac      	ldr	r4, [r5, #8]
 800a0f8:	e7df      	b.n	800a0ba <_fflush_r+0x22>
 800a0fa:	4b04      	ldr	r3, [pc, #16]	; (800a10c <_fflush_r+0x74>)
 800a0fc:	429c      	cmp	r4, r3
 800a0fe:	bf08      	it	eq
 800a100:	68ec      	ldreq	r4, [r5, #12]
 800a102:	e7da      	b.n	800a0ba <_fflush_r+0x22>
 800a104:	0800bd04 	.word	0x0800bd04
 800a108:	0800bd24 	.word	0x0800bd24
 800a10c:	0800bce4 	.word	0x0800bce4

0800a110 <std>:
 800a110:	2300      	movs	r3, #0
 800a112:	b510      	push	{r4, lr}
 800a114:	4604      	mov	r4, r0
 800a116:	e9c0 3300 	strd	r3, r3, [r0]
 800a11a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a11e:	6083      	str	r3, [r0, #8]
 800a120:	8181      	strh	r1, [r0, #12]
 800a122:	6643      	str	r3, [r0, #100]	; 0x64
 800a124:	81c2      	strh	r2, [r0, #14]
 800a126:	6183      	str	r3, [r0, #24]
 800a128:	4619      	mov	r1, r3
 800a12a:	2208      	movs	r2, #8
 800a12c:	305c      	adds	r0, #92	; 0x5c
 800a12e:	f7fd fbc1 	bl	80078b4 <memset>
 800a132:	4b05      	ldr	r3, [pc, #20]	; (800a148 <std+0x38>)
 800a134:	6224      	str	r4, [r4, #32]
 800a136:	6263      	str	r3, [r4, #36]	; 0x24
 800a138:	4b04      	ldr	r3, [pc, #16]	; (800a14c <std+0x3c>)
 800a13a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a13c:	4b04      	ldr	r3, [pc, #16]	; (800a150 <std+0x40>)
 800a13e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a140:	4b04      	ldr	r3, [pc, #16]	; (800a154 <std+0x44>)
 800a142:	6323      	str	r3, [r4, #48]	; 0x30
 800a144:	bd10      	pop	{r4, pc}
 800a146:	bf00      	nop
 800a148:	0800a471 	.word	0x0800a471
 800a14c:	0800a493 	.word	0x0800a493
 800a150:	0800a4cb 	.word	0x0800a4cb
 800a154:	0800a4ef 	.word	0x0800a4ef

0800a158 <_cleanup_r>:
 800a158:	4901      	ldr	r1, [pc, #4]	; (800a160 <_cleanup_r+0x8>)
 800a15a:	f000 b8af 	b.w	800a2bc <_fwalk_reent>
 800a15e:	bf00      	nop
 800a160:	0800a099 	.word	0x0800a099

0800a164 <__sfmoreglue>:
 800a164:	2268      	movs	r2, #104	; 0x68
 800a166:	b570      	push	{r4, r5, r6, lr}
 800a168:	1e4d      	subs	r5, r1, #1
 800a16a:	4355      	muls	r5, r2
 800a16c:	460e      	mov	r6, r1
 800a16e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a172:	f7ff fa35 	bl	80095e0 <_malloc_r>
 800a176:	4604      	mov	r4, r0
 800a178:	b140      	cbz	r0, 800a18c <__sfmoreglue+0x28>
 800a17a:	2100      	movs	r1, #0
 800a17c:	e9c0 1600 	strd	r1, r6, [r0]
 800a180:	300c      	adds	r0, #12
 800a182:	60a0      	str	r0, [r4, #8]
 800a184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a188:	f7fd fb94 	bl	80078b4 <memset>
 800a18c:	4620      	mov	r0, r4
 800a18e:	bd70      	pop	{r4, r5, r6, pc}

0800a190 <__sfp_lock_acquire>:
 800a190:	4801      	ldr	r0, [pc, #4]	; (800a198 <__sfp_lock_acquire+0x8>)
 800a192:	f000 b8b3 	b.w	800a2fc <__retarget_lock_acquire_recursive>
 800a196:	bf00      	nop
 800a198:	200006fd 	.word	0x200006fd

0800a19c <__sfp_lock_release>:
 800a19c:	4801      	ldr	r0, [pc, #4]	; (800a1a4 <__sfp_lock_release+0x8>)
 800a19e:	f000 b8ae 	b.w	800a2fe <__retarget_lock_release_recursive>
 800a1a2:	bf00      	nop
 800a1a4:	200006fd 	.word	0x200006fd

0800a1a8 <__sinit_lock_acquire>:
 800a1a8:	4801      	ldr	r0, [pc, #4]	; (800a1b0 <__sinit_lock_acquire+0x8>)
 800a1aa:	f000 b8a7 	b.w	800a2fc <__retarget_lock_acquire_recursive>
 800a1ae:	bf00      	nop
 800a1b0:	200006fe 	.word	0x200006fe

0800a1b4 <__sinit_lock_release>:
 800a1b4:	4801      	ldr	r0, [pc, #4]	; (800a1bc <__sinit_lock_release+0x8>)
 800a1b6:	f000 b8a2 	b.w	800a2fe <__retarget_lock_release_recursive>
 800a1ba:	bf00      	nop
 800a1bc:	200006fe 	.word	0x200006fe

0800a1c0 <__sinit>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	f7ff fff0 	bl	800a1a8 <__sinit_lock_acquire>
 800a1c8:	69a3      	ldr	r3, [r4, #24]
 800a1ca:	b11b      	cbz	r3, 800a1d4 <__sinit+0x14>
 800a1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d0:	f7ff bff0 	b.w	800a1b4 <__sinit_lock_release>
 800a1d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1d8:	6523      	str	r3, [r4, #80]	; 0x50
 800a1da:	4b13      	ldr	r3, [pc, #76]	; (800a228 <__sinit+0x68>)
 800a1dc:	4a13      	ldr	r2, [pc, #76]	; (800a22c <__sinit+0x6c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	bf08      	it	eq
 800a1e6:	2301      	moveq	r3, #1
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	bf08      	it	eq
 800a1ec:	61a3      	streq	r3, [r4, #24]
 800a1ee:	f000 f81f 	bl	800a230 <__sfp>
 800a1f2:	6060      	str	r0, [r4, #4]
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 f81b 	bl	800a230 <__sfp>
 800a1fa:	60a0      	str	r0, [r4, #8]
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 f817 	bl	800a230 <__sfp>
 800a202:	2200      	movs	r2, #0
 800a204:	2104      	movs	r1, #4
 800a206:	60e0      	str	r0, [r4, #12]
 800a208:	6860      	ldr	r0, [r4, #4]
 800a20a:	f7ff ff81 	bl	800a110 <std>
 800a20e:	2201      	movs	r2, #1
 800a210:	2109      	movs	r1, #9
 800a212:	68a0      	ldr	r0, [r4, #8]
 800a214:	f7ff ff7c 	bl	800a110 <std>
 800a218:	2202      	movs	r2, #2
 800a21a:	2112      	movs	r1, #18
 800a21c:	68e0      	ldr	r0, [r4, #12]
 800a21e:	f7ff ff77 	bl	800a110 <std>
 800a222:	2301      	movs	r3, #1
 800a224:	61a3      	str	r3, [r4, #24]
 800a226:	e7d1      	b.n	800a1cc <__sinit+0xc>
 800a228:	0800b918 	.word	0x0800b918
 800a22c:	0800a159 	.word	0x0800a159

0800a230 <__sfp>:
 800a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a232:	4607      	mov	r7, r0
 800a234:	f7ff ffac 	bl	800a190 <__sfp_lock_acquire>
 800a238:	4b1e      	ldr	r3, [pc, #120]	; (800a2b4 <__sfp+0x84>)
 800a23a:	681e      	ldr	r6, [r3, #0]
 800a23c:	69b3      	ldr	r3, [r6, #24]
 800a23e:	b913      	cbnz	r3, 800a246 <__sfp+0x16>
 800a240:	4630      	mov	r0, r6
 800a242:	f7ff ffbd 	bl	800a1c0 <__sinit>
 800a246:	3648      	adds	r6, #72	; 0x48
 800a248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	d503      	bpl.n	800a258 <__sfp+0x28>
 800a250:	6833      	ldr	r3, [r6, #0]
 800a252:	b30b      	cbz	r3, 800a298 <__sfp+0x68>
 800a254:	6836      	ldr	r6, [r6, #0]
 800a256:	e7f7      	b.n	800a248 <__sfp+0x18>
 800a258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a25c:	b9d5      	cbnz	r5, 800a294 <__sfp+0x64>
 800a25e:	4b16      	ldr	r3, [pc, #88]	; (800a2b8 <__sfp+0x88>)
 800a260:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a264:	60e3      	str	r3, [r4, #12]
 800a266:	6665      	str	r5, [r4, #100]	; 0x64
 800a268:	f000 f847 	bl	800a2fa <__retarget_lock_init_recursive>
 800a26c:	f7ff ff96 	bl	800a19c <__sfp_lock_release>
 800a270:	2208      	movs	r2, #8
 800a272:	4629      	mov	r1, r5
 800a274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a27c:	6025      	str	r5, [r4, #0]
 800a27e:	61a5      	str	r5, [r4, #24]
 800a280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a284:	f7fd fb16 	bl	80078b4 <memset>
 800a288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a28c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a290:	4620      	mov	r0, r4
 800a292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a294:	3468      	adds	r4, #104	; 0x68
 800a296:	e7d9      	b.n	800a24c <__sfp+0x1c>
 800a298:	2104      	movs	r1, #4
 800a29a:	4638      	mov	r0, r7
 800a29c:	f7ff ff62 	bl	800a164 <__sfmoreglue>
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	6030      	str	r0, [r6, #0]
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d1d5      	bne.n	800a254 <__sfp+0x24>
 800a2a8:	f7ff ff78 	bl	800a19c <__sfp_lock_release>
 800a2ac:	230c      	movs	r3, #12
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	e7ee      	b.n	800a290 <__sfp+0x60>
 800a2b2:	bf00      	nop
 800a2b4:	0800b918 	.word	0x0800b918
 800a2b8:	ffff0001 	.word	0xffff0001

0800a2bc <_fwalk_reent>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	4688      	mov	r8, r1
 800a2c4:	2700      	movs	r7, #0
 800a2c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2ce:	f1b9 0901 	subs.w	r9, r9, #1
 800a2d2:	d505      	bpl.n	800a2e0 <_fwalk_reent+0x24>
 800a2d4:	6824      	ldr	r4, [r4, #0]
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	d1f7      	bne.n	800a2ca <_fwalk_reent+0xe>
 800a2da:	4638      	mov	r0, r7
 800a2dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e0:	89ab      	ldrh	r3, [r5, #12]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d907      	bls.n	800a2f6 <_fwalk_reent+0x3a>
 800a2e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	d003      	beq.n	800a2f6 <_fwalk_reent+0x3a>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	47c0      	blx	r8
 800a2f4:	4307      	orrs	r7, r0
 800a2f6:	3568      	adds	r5, #104	; 0x68
 800a2f8:	e7e9      	b.n	800a2ce <_fwalk_reent+0x12>

0800a2fa <__retarget_lock_init_recursive>:
 800a2fa:	4770      	bx	lr

0800a2fc <__retarget_lock_acquire_recursive>:
 800a2fc:	4770      	bx	lr

0800a2fe <__retarget_lock_release_recursive>:
 800a2fe:	4770      	bx	lr

0800a300 <__swhatbuf_r>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	460e      	mov	r6, r1
 800a304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a308:	4614      	mov	r4, r2
 800a30a:	2900      	cmp	r1, #0
 800a30c:	461d      	mov	r5, r3
 800a30e:	b096      	sub	sp, #88	; 0x58
 800a310:	da08      	bge.n	800a324 <__swhatbuf_r+0x24>
 800a312:	2200      	movs	r2, #0
 800a314:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a318:	602a      	str	r2, [r5, #0]
 800a31a:	061a      	lsls	r2, r3, #24
 800a31c:	d410      	bmi.n	800a340 <__swhatbuf_r+0x40>
 800a31e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a322:	e00e      	b.n	800a342 <__swhatbuf_r+0x42>
 800a324:	466a      	mov	r2, sp
 800a326:	f000 f909 	bl	800a53c <_fstat_r>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	dbf1      	blt.n	800a312 <__swhatbuf_r+0x12>
 800a32e:	9a01      	ldr	r2, [sp, #4]
 800a330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a338:	425a      	negs	r2, r3
 800a33a:	415a      	adcs	r2, r3
 800a33c:	602a      	str	r2, [r5, #0]
 800a33e:	e7ee      	b.n	800a31e <__swhatbuf_r+0x1e>
 800a340:	2340      	movs	r3, #64	; 0x40
 800a342:	2000      	movs	r0, #0
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	b016      	add	sp, #88	; 0x58
 800a348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a34c <__smakebuf_r>:
 800a34c:	898b      	ldrh	r3, [r1, #12]
 800a34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a350:	079d      	lsls	r5, r3, #30
 800a352:	4606      	mov	r6, r0
 800a354:	460c      	mov	r4, r1
 800a356:	d507      	bpl.n	800a368 <__smakebuf_r+0x1c>
 800a358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	6123      	str	r3, [r4, #16]
 800a360:	2301      	movs	r3, #1
 800a362:	6163      	str	r3, [r4, #20]
 800a364:	b002      	add	sp, #8
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	466a      	mov	r2, sp
 800a36a:	ab01      	add	r3, sp, #4
 800a36c:	f7ff ffc8 	bl	800a300 <__swhatbuf_r>
 800a370:	9900      	ldr	r1, [sp, #0]
 800a372:	4605      	mov	r5, r0
 800a374:	4630      	mov	r0, r6
 800a376:	f7ff f933 	bl	80095e0 <_malloc_r>
 800a37a:	b948      	cbnz	r0, 800a390 <__smakebuf_r+0x44>
 800a37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a380:	059a      	lsls	r2, r3, #22
 800a382:	d4ef      	bmi.n	800a364 <__smakebuf_r+0x18>
 800a384:	f023 0303 	bic.w	r3, r3, #3
 800a388:	f043 0302 	orr.w	r3, r3, #2
 800a38c:	81a3      	strh	r3, [r4, #12]
 800a38e:	e7e3      	b.n	800a358 <__smakebuf_r+0xc>
 800a390:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <__smakebuf_r+0x7c>)
 800a392:	62b3      	str	r3, [r6, #40]	; 0x28
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	6020      	str	r0, [r4, #0]
 800a398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39c:	81a3      	strh	r3, [r4, #12]
 800a39e:	9b00      	ldr	r3, [sp, #0]
 800a3a0:	6120      	str	r0, [r4, #16]
 800a3a2:	6163      	str	r3, [r4, #20]
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	b15b      	cbz	r3, 800a3c0 <__smakebuf_r+0x74>
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3ae:	f000 f8d7 	bl	800a560 <_isatty_r>
 800a3b2:	b128      	cbz	r0, 800a3c0 <__smakebuf_r+0x74>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	f043 0301 	orr.w	r3, r3, #1
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	89a0      	ldrh	r0, [r4, #12]
 800a3c2:	4305      	orrs	r5, r0
 800a3c4:	81a5      	strh	r5, [r4, #12]
 800a3c6:	e7cd      	b.n	800a364 <__smakebuf_r+0x18>
 800a3c8:	0800a159 	.word	0x0800a159

0800a3cc <memchr>:
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	b510      	push	{r4, lr}
 800a3d0:	b2c9      	uxtb	r1, r1
 800a3d2:	4402      	add	r2, r0
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	d101      	bne.n	800a3de <memchr+0x12>
 800a3da:	2000      	movs	r0, #0
 800a3dc:	e003      	b.n	800a3e6 <memchr+0x1a>
 800a3de:	7804      	ldrb	r4, [r0, #0]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	428c      	cmp	r4, r1
 800a3e4:	d1f6      	bne.n	800a3d4 <memchr+0x8>
 800a3e6:	bd10      	pop	{r4, pc}

0800a3e8 <_raise_r>:
 800a3e8:	291f      	cmp	r1, #31
 800a3ea:	b538      	push	{r3, r4, r5, lr}
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	d904      	bls.n	800a3fc <_raise_r+0x14>
 800a3f2:	2316      	movs	r3, #22
 800a3f4:	6003      	str	r3, [r0, #0]
 800a3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fa:	bd38      	pop	{r3, r4, r5, pc}
 800a3fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a3fe:	b112      	cbz	r2, 800a406 <_raise_r+0x1e>
 800a400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a404:	b94b      	cbnz	r3, 800a41a <_raise_r+0x32>
 800a406:	4620      	mov	r0, r4
 800a408:	f000 f830 	bl	800a46c <_getpid_r>
 800a40c:	462a      	mov	r2, r5
 800a40e:	4601      	mov	r1, r0
 800a410:	4620      	mov	r0, r4
 800a412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a416:	f000 b817 	b.w	800a448 <_kill_r>
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d00a      	beq.n	800a434 <_raise_r+0x4c>
 800a41e:	1c59      	adds	r1, r3, #1
 800a420:	d103      	bne.n	800a42a <_raise_r+0x42>
 800a422:	2316      	movs	r3, #22
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	2001      	movs	r0, #1
 800a428:	e7e7      	b.n	800a3fa <_raise_r+0x12>
 800a42a:	2400      	movs	r4, #0
 800a42c:	4628      	mov	r0, r5
 800a42e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a432:	4798      	blx	r3
 800a434:	2000      	movs	r0, #0
 800a436:	e7e0      	b.n	800a3fa <_raise_r+0x12>

0800a438 <raise>:
 800a438:	4b02      	ldr	r3, [pc, #8]	; (800a444 <raise+0xc>)
 800a43a:	4601      	mov	r1, r0
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	f7ff bfd3 	b.w	800a3e8 <_raise_r>
 800a442:	bf00      	nop
 800a444:	20000078 	.word	0x20000078

0800a448 <_kill_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	2300      	movs	r3, #0
 800a44c:	4d06      	ldr	r5, [pc, #24]	; (800a468 <_kill_r+0x20>)
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	4611      	mov	r1, r2
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	f7fa f820 	bl	800449a <_kill>
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	d102      	bne.n	800a464 <_kill_r+0x1c>
 800a45e:	682b      	ldr	r3, [r5, #0]
 800a460:	b103      	cbz	r3, 800a464 <_kill_r+0x1c>
 800a462:	6023      	str	r3, [r4, #0]
 800a464:	bd38      	pop	{r3, r4, r5, pc}
 800a466:	bf00      	nop
 800a468:	200006f8 	.word	0x200006f8

0800a46c <_getpid_r>:
 800a46c:	f7fa b80e 	b.w	800448c <_getpid>

0800a470 <__sread>:
 800a470:	b510      	push	{r4, lr}
 800a472:	460c      	mov	r4, r1
 800a474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a478:	f000 f894 	bl	800a5a4 <_read_r>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	bfab      	itete	ge
 800a480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a482:	89a3      	ldrhlt	r3, [r4, #12]
 800a484:	181b      	addge	r3, r3, r0
 800a486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a48a:	bfac      	ite	ge
 800a48c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a48e:	81a3      	strhlt	r3, [r4, #12]
 800a490:	bd10      	pop	{r4, pc}

0800a492 <__swrite>:
 800a492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	461f      	mov	r7, r3
 800a498:	898b      	ldrh	r3, [r1, #12]
 800a49a:	4605      	mov	r5, r0
 800a49c:	05db      	lsls	r3, r3, #23
 800a49e:	460c      	mov	r4, r1
 800a4a0:	4616      	mov	r6, r2
 800a4a2:	d505      	bpl.n	800a4b0 <__swrite+0x1e>
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ac:	f000 f868 	bl	800a580 <_lseek_r>
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	4632      	mov	r2, r6
 800a4b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	463b      	mov	r3, r7
 800a4be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c6:	f000 b817 	b.w	800a4f8 <_write_r>

0800a4ca <__sseek>:
 800a4ca:	b510      	push	{r4, lr}
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d2:	f000 f855 	bl	800a580 <_lseek_r>
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	bf15      	itete	ne
 800a4dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4e6:	81a3      	strheq	r3, [r4, #12]
 800a4e8:	bf18      	it	ne
 800a4ea:	81a3      	strhne	r3, [r4, #12]
 800a4ec:	bd10      	pop	{r4, pc}

0800a4ee <__sclose>:
 800a4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f2:	f000 b813 	b.w	800a51c <_close_r>
	...

0800a4f8 <_write_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	4611      	mov	r1, r2
 800a500:	2200      	movs	r2, #0
 800a502:	4d05      	ldr	r5, [pc, #20]	; (800a518 <_write_r+0x20>)
 800a504:	602a      	str	r2, [r5, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	f7f9 fffe 	bl	8004508 <_write>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_write_r+0x1e>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_write_r+0x1e>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	200006f8 	.word	0x200006f8

0800a51c <_close_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	2300      	movs	r3, #0
 800a520:	4d05      	ldr	r5, [pc, #20]	; (800a538 <_close_r+0x1c>)
 800a522:	4604      	mov	r4, r0
 800a524:	4608      	mov	r0, r1
 800a526:	602b      	str	r3, [r5, #0]
 800a528:	f7fa f80a 	bl	8004540 <_close>
 800a52c:	1c43      	adds	r3, r0, #1
 800a52e:	d102      	bne.n	800a536 <_close_r+0x1a>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	b103      	cbz	r3, 800a536 <_close_r+0x1a>
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	bd38      	pop	{r3, r4, r5, pc}
 800a538:	200006f8 	.word	0x200006f8

0800a53c <_fstat_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	2300      	movs	r3, #0
 800a540:	4d06      	ldr	r5, [pc, #24]	; (800a55c <_fstat_r+0x20>)
 800a542:	4604      	mov	r4, r0
 800a544:	4608      	mov	r0, r1
 800a546:	4611      	mov	r1, r2
 800a548:	602b      	str	r3, [r5, #0]
 800a54a:	f7fa f804 	bl	8004556 <_fstat>
 800a54e:	1c43      	adds	r3, r0, #1
 800a550:	d102      	bne.n	800a558 <_fstat_r+0x1c>
 800a552:	682b      	ldr	r3, [r5, #0]
 800a554:	b103      	cbz	r3, 800a558 <_fstat_r+0x1c>
 800a556:	6023      	str	r3, [r4, #0]
 800a558:	bd38      	pop	{r3, r4, r5, pc}
 800a55a:	bf00      	nop
 800a55c:	200006f8 	.word	0x200006f8

0800a560 <_isatty_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	2300      	movs	r3, #0
 800a564:	4d05      	ldr	r5, [pc, #20]	; (800a57c <_isatty_r+0x1c>)
 800a566:	4604      	mov	r4, r0
 800a568:	4608      	mov	r0, r1
 800a56a:	602b      	str	r3, [r5, #0]
 800a56c:	f7fa f802 	bl	8004574 <_isatty>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d102      	bne.n	800a57a <_isatty_r+0x1a>
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	b103      	cbz	r3, 800a57a <_isatty_r+0x1a>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	200006f8 	.word	0x200006f8

0800a580 <_lseek_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4604      	mov	r4, r0
 800a584:	4608      	mov	r0, r1
 800a586:	4611      	mov	r1, r2
 800a588:	2200      	movs	r2, #0
 800a58a:	4d05      	ldr	r5, [pc, #20]	; (800a5a0 <_lseek_r+0x20>)
 800a58c:	602a      	str	r2, [r5, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	f7f9 fffa 	bl	8004588 <_lseek>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_lseek_r+0x1e>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_lseek_r+0x1e>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	200006f8 	.word	0x200006f8

0800a5a4 <_read_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	4608      	mov	r0, r1
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4d05      	ldr	r5, [pc, #20]	; (800a5c4 <_read_r+0x20>)
 800a5b0:	602a      	str	r2, [r5, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	f7f9 ff8b 	bl	80044ce <_read>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_read_r+0x1e>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_read_r+0x1e>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	200006f8 	.word	0x200006f8

0800a5c8 <atan2>:
 800a5c8:	f000 b86a 	b.w	800a6a0 <__ieee754_atan2>

0800a5cc <pow>:
 800a5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	461d      	mov	r5, r3
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	4689      	mov	r9, r1
 800a5d8:	f000 f936 	bl	800a848 <__ieee754_pow>
 800a5dc:	4622      	mov	r2, r4
 800a5de:	4606      	mov	r6, r0
 800a5e0:	460f      	mov	r7, r1
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	f7f6 fa10 	bl	8000a0c <__aeabi_dcmpun>
 800a5ec:	bbc8      	cbnz	r0, 800a662 <pow+0x96>
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	f7f6 f9d7 	bl	80009a8 <__aeabi_dcmpeq>
 800a5fa:	b1b8      	cbz	r0, 800a62c <pow+0x60>
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2300      	movs	r3, #0
 800a600:	4620      	mov	r0, r4
 800a602:	4629      	mov	r1, r5
 800a604:	f7f6 f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d141      	bne.n	800a690 <pow+0xc4>
 800a60c:	4620      	mov	r0, r4
 800a60e:	4629      	mov	r1, r5
 800a610:	f001 f89b 	bl	800b74a <finite>
 800a614:	b328      	cbz	r0, 800a662 <pow+0x96>
 800a616:	2200      	movs	r2, #0
 800a618:	2300      	movs	r3, #0
 800a61a:	4620      	mov	r0, r4
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7f6 f9cd 	bl	80009bc <__aeabi_dcmplt>
 800a622:	b1f0      	cbz	r0, 800a662 <pow+0x96>
 800a624:	f7fd f90e 	bl	8007844 <__errno>
 800a628:	2322      	movs	r3, #34	; 0x22
 800a62a:	e019      	b.n	800a660 <pow+0x94>
 800a62c:	4630      	mov	r0, r6
 800a62e:	4639      	mov	r1, r7
 800a630:	f001 f88b 	bl	800b74a <finite>
 800a634:	b9c8      	cbnz	r0, 800a66a <pow+0x9e>
 800a636:	4640      	mov	r0, r8
 800a638:	4649      	mov	r1, r9
 800a63a:	f001 f886 	bl	800b74a <finite>
 800a63e:	b1a0      	cbz	r0, 800a66a <pow+0x9e>
 800a640:	4620      	mov	r0, r4
 800a642:	4629      	mov	r1, r5
 800a644:	f001 f881 	bl	800b74a <finite>
 800a648:	b178      	cbz	r0, 800a66a <pow+0x9e>
 800a64a:	4632      	mov	r2, r6
 800a64c:	463b      	mov	r3, r7
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	f7f6 f9db 	bl	8000a0c <__aeabi_dcmpun>
 800a656:	2800      	cmp	r0, #0
 800a658:	d0e4      	beq.n	800a624 <pow+0x58>
 800a65a:	f7fd f8f3 	bl	8007844 <__errno>
 800a65e:	2321      	movs	r3, #33	; 0x21
 800a660:	6003      	str	r3, [r0, #0]
 800a662:	4630      	mov	r0, r6
 800a664:	4639      	mov	r1, r7
 800a666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66a:	2200      	movs	r2, #0
 800a66c:	2300      	movs	r3, #0
 800a66e:	4630      	mov	r0, r6
 800a670:	4639      	mov	r1, r7
 800a672:	f7f6 f999 	bl	80009a8 <__aeabi_dcmpeq>
 800a676:	2800      	cmp	r0, #0
 800a678:	d0f3      	beq.n	800a662 <pow+0x96>
 800a67a:	4640      	mov	r0, r8
 800a67c:	4649      	mov	r1, r9
 800a67e:	f001 f864 	bl	800b74a <finite>
 800a682:	2800      	cmp	r0, #0
 800a684:	d0ed      	beq.n	800a662 <pow+0x96>
 800a686:	4620      	mov	r0, r4
 800a688:	4629      	mov	r1, r5
 800a68a:	f001 f85e 	bl	800b74a <finite>
 800a68e:	e7c8      	b.n	800a622 <pow+0x56>
 800a690:	2600      	movs	r6, #0
 800a692:	4f01      	ldr	r7, [pc, #4]	; (800a698 <pow+0xcc>)
 800a694:	e7e5      	b.n	800a662 <pow+0x96>
 800a696:	bf00      	nop
 800a698:	3ff00000 	.word	0x3ff00000
 800a69c:	00000000 	.word	0x00000000

0800a6a0 <__ieee754_atan2>:
 800a6a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	4692      	mov	sl, r2
 800a6a6:	4699      	mov	r9, r3
 800a6a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a6ac:	461f      	mov	r7, r3
 800a6ae:	f1ca 0300 	rsb	r3, sl, #0
 800a6b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a838 <__ieee754_atan2+0x198>
 800a6b6:	ea43 030a 	orr.w	r3, r3, sl
 800a6ba:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a6be:	4573      	cmp	r3, lr
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	460d      	mov	r5, r1
 800a6c4:	d808      	bhi.n	800a6d8 <__ieee754_atan2+0x38>
 800a6c6:	4246      	negs	r6, r0
 800a6c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a6cc:	4306      	orrs	r6, r0
 800a6ce:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800a6d2:	4576      	cmp	r6, lr
 800a6d4:	468c      	mov	ip, r1
 800a6d6:	d908      	bls.n	800a6ea <__ieee754_atan2+0x4a>
 800a6d8:	4652      	mov	r2, sl
 800a6da:	464b      	mov	r3, r9
 800a6dc:	4620      	mov	r0, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	f7f5 fd44 	bl	800016c <__adddf3>
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	e019      	b.n	800a71e <__ieee754_atan2+0x7e>
 800a6ea:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800a6ee:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800a6f2:	ea56 060a 	orrs.w	r6, r6, sl
 800a6f6:	d103      	bne.n	800a700 <__ieee754_atan2+0x60>
 800a6f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	f000 be98 	b.w	800b430 <atan>
 800a700:	17be      	asrs	r6, r7, #30
 800a702:	f006 0602 	and.w	r6, r6, #2
 800a706:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800a70a:	ea53 0100 	orrs.w	r1, r3, r0
 800a70e:	d10a      	bne.n	800a726 <__ieee754_atan2+0x86>
 800a710:	2e02      	cmp	r6, #2
 800a712:	d067      	beq.n	800a7e4 <__ieee754_atan2+0x144>
 800a714:	2e03      	cmp	r6, #3
 800a716:	d102      	bne.n	800a71e <__ieee754_atan2+0x7e>
 800a718:	a53b      	add	r5, pc, #236	; (adr r5, 800a808 <__ieee754_atan2+0x168>)
 800a71a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a71e:	4620      	mov	r0, r4
 800a720:	4629      	mov	r1, r5
 800a722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a726:	ea52 010a 	orrs.w	r1, r2, sl
 800a72a:	d106      	bne.n	800a73a <__ieee754_atan2+0x9a>
 800a72c:	f1bc 0f00 	cmp.w	ip, #0
 800a730:	da63      	bge.n	800a7fa <__ieee754_atan2+0x15a>
 800a732:	a537      	add	r5, pc, #220	; (adr r5, 800a810 <__ieee754_atan2+0x170>)
 800a734:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a738:	e7f1      	b.n	800a71e <__ieee754_atan2+0x7e>
 800a73a:	4572      	cmp	r2, lr
 800a73c:	d10f      	bne.n	800a75e <__ieee754_atan2+0xbe>
 800a73e:	4293      	cmp	r3, r2
 800a740:	f106 36ff 	add.w	r6, r6, #4294967295
 800a744:	d107      	bne.n	800a756 <__ieee754_atan2+0xb6>
 800a746:	2e02      	cmp	r6, #2
 800a748:	d850      	bhi.n	800a7ec <__ieee754_atan2+0x14c>
 800a74a:	4b3c      	ldr	r3, [pc, #240]	; (800a83c <__ieee754_atan2+0x19c>)
 800a74c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a750:	e9d6 4500 	ldrd	r4, r5, [r6]
 800a754:	e7e3      	b.n	800a71e <__ieee754_atan2+0x7e>
 800a756:	2e02      	cmp	r6, #2
 800a758:	d84c      	bhi.n	800a7f4 <__ieee754_atan2+0x154>
 800a75a:	4b39      	ldr	r3, [pc, #228]	; (800a840 <__ieee754_atan2+0x1a0>)
 800a75c:	e7f6      	b.n	800a74c <__ieee754_atan2+0xac>
 800a75e:	4573      	cmp	r3, lr
 800a760:	d0e4      	beq.n	800a72c <__ieee754_atan2+0x8c>
 800a762:	1a9b      	subs	r3, r3, r2
 800a764:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a768:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a76c:	da20      	bge.n	800a7b0 <__ieee754_atan2+0x110>
 800a76e:	2f00      	cmp	r7, #0
 800a770:	da01      	bge.n	800a776 <__ieee754_atan2+0xd6>
 800a772:	323c      	adds	r2, #60	; 0x3c
 800a774:	db20      	blt.n	800a7b8 <__ieee754_atan2+0x118>
 800a776:	4652      	mov	r2, sl
 800a778:	464b      	mov	r3, r9
 800a77a:	4620      	mov	r0, r4
 800a77c:	4629      	mov	r1, r5
 800a77e:	f7f5 ffd5 	bl	800072c <__aeabi_ddiv>
 800a782:	f000 ffdf 	bl	800b744 <fabs>
 800a786:	f000 fe53 	bl	800b430 <atan>
 800a78a:	4604      	mov	r4, r0
 800a78c:	460d      	mov	r5, r1
 800a78e:	2e01      	cmp	r6, #1
 800a790:	d015      	beq.n	800a7be <__ieee754_atan2+0x11e>
 800a792:	2e02      	cmp	r6, #2
 800a794:	d017      	beq.n	800a7c6 <__ieee754_atan2+0x126>
 800a796:	2e00      	cmp	r6, #0
 800a798:	d0c1      	beq.n	800a71e <__ieee754_atan2+0x7e>
 800a79a:	a31f      	add	r3, pc, #124	; (adr r3, 800a818 <__ieee754_atan2+0x178>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	f7f5 fce0 	bl	8000168 <__aeabi_dsub>
 800a7a8:	a31d      	add	r3, pc, #116	; (adr r3, 800a820 <__ieee754_atan2+0x180>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	e016      	b.n	800a7de <__ieee754_atan2+0x13e>
 800a7b0:	a51d      	add	r5, pc, #116	; (adr r5, 800a828 <__ieee754_atan2+0x188>)
 800a7b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a7b6:	e7ea      	b.n	800a78e <__ieee754_atan2+0xee>
 800a7b8:	2400      	movs	r4, #0
 800a7ba:	2500      	movs	r5, #0
 800a7bc:	e7e7      	b.n	800a78e <__ieee754_atan2+0xee>
 800a7be:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a7c2:	461d      	mov	r5, r3
 800a7c4:	e7ab      	b.n	800a71e <__ieee754_atan2+0x7e>
 800a7c6:	a314      	add	r3, pc, #80	; (adr r3, 800a818 <__ieee754_atan2+0x178>)
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	f7f5 fcca 	bl	8000168 <__aeabi_dsub>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	a111      	add	r1, pc, #68	; (adr r1, 800a820 <__ieee754_atan2+0x180>)
 800a7da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7de:	f7f5 fcc3 	bl	8000168 <__aeabi_dsub>
 800a7e2:	e77f      	b.n	800a6e4 <__ieee754_atan2+0x44>
 800a7e4:	a50e      	add	r5, pc, #56	; (adr r5, 800a820 <__ieee754_atan2+0x180>)
 800a7e6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a7ea:	e798      	b.n	800a71e <__ieee754_atan2+0x7e>
 800a7ec:	a510      	add	r5, pc, #64	; (adr r5, 800a830 <__ieee754_atan2+0x190>)
 800a7ee:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a7f2:	e794      	b.n	800a71e <__ieee754_atan2+0x7e>
 800a7f4:	2400      	movs	r4, #0
 800a7f6:	2500      	movs	r5, #0
 800a7f8:	e791      	b.n	800a71e <__ieee754_atan2+0x7e>
 800a7fa:	a50b      	add	r5, pc, #44	; (adr r5, 800a828 <__ieee754_atan2+0x188>)
 800a7fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a800:	e78d      	b.n	800a71e <__ieee754_atan2+0x7e>
 800a802:	bf00      	nop
 800a804:	f3af 8000 	nop.w
 800a808:	54442d18 	.word	0x54442d18
 800a80c:	c00921fb 	.word	0xc00921fb
 800a810:	54442d18 	.word	0x54442d18
 800a814:	bff921fb 	.word	0xbff921fb
 800a818:	33145c07 	.word	0x33145c07
 800a81c:	3ca1a626 	.word	0x3ca1a626
 800a820:	54442d18 	.word	0x54442d18
 800a824:	400921fb 	.word	0x400921fb
 800a828:	54442d18 	.word	0x54442d18
 800a82c:	3ff921fb 	.word	0x3ff921fb
 800a830:	54442d18 	.word	0x54442d18
 800a834:	3fe921fb 	.word	0x3fe921fb
 800a838:	7ff00000 	.word	0x7ff00000
 800a83c:	0800bd48 	.word	0x0800bd48
 800a840:	0800bd60 	.word	0x0800bd60
 800a844:	00000000 	.word	0x00000000

0800a848 <__ieee754_pow>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	b093      	sub	sp, #76	; 0x4c
 800a84e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a852:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800a856:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a85a:	4689      	mov	r9, r1
 800a85c:	ea56 0102 	orrs.w	r1, r6, r2
 800a860:	4680      	mov	r8, r0
 800a862:	d111      	bne.n	800a888 <__ieee754_pow+0x40>
 800a864:	1803      	adds	r3, r0, r0
 800a866:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800a86a:	4152      	adcs	r2, r2
 800a86c:	4299      	cmp	r1, r3
 800a86e:	4b82      	ldr	r3, [pc, #520]	; (800aa78 <__ieee754_pow+0x230>)
 800a870:	4193      	sbcs	r3, r2
 800a872:	f080 84b9 	bcs.w	800b1e8 <__ieee754_pow+0x9a0>
 800a876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	f7f5 fc75 	bl	800016c <__adddf3>
 800a882:	4683      	mov	fp, r0
 800a884:	468c      	mov	ip, r1
 800a886:	e06f      	b.n	800a968 <__ieee754_pow+0x120>
 800a888:	4b7c      	ldr	r3, [pc, #496]	; (800aa7c <__ieee754_pow+0x234>)
 800a88a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800a88e:	429c      	cmp	r4, r3
 800a890:	464d      	mov	r5, r9
 800a892:	4682      	mov	sl, r0
 800a894:	dc06      	bgt.n	800a8a4 <__ieee754_pow+0x5c>
 800a896:	d101      	bne.n	800a89c <__ieee754_pow+0x54>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d1ec      	bne.n	800a876 <__ieee754_pow+0x2e>
 800a89c:	429e      	cmp	r6, r3
 800a89e:	dc01      	bgt.n	800a8a4 <__ieee754_pow+0x5c>
 800a8a0:	d10f      	bne.n	800a8c2 <__ieee754_pow+0x7a>
 800a8a2:	b172      	cbz	r2, 800a8c2 <__ieee754_pow+0x7a>
 800a8a4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a8a8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a8ac:	ea55 050a 	orrs.w	r5, r5, sl
 800a8b0:	d1e1      	bne.n	800a876 <__ieee754_pow+0x2e>
 800a8b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a8b6:	18db      	adds	r3, r3, r3
 800a8b8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a8bc:	4152      	adcs	r2, r2
 800a8be:	429d      	cmp	r5, r3
 800a8c0:	e7d5      	b.n	800a86e <__ieee754_pow+0x26>
 800a8c2:	2d00      	cmp	r5, #0
 800a8c4:	da39      	bge.n	800a93a <__ieee754_pow+0xf2>
 800a8c6:	4b6e      	ldr	r3, [pc, #440]	; (800aa80 <__ieee754_pow+0x238>)
 800a8c8:	429e      	cmp	r6, r3
 800a8ca:	dc52      	bgt.n	800a972 <__ieee754_pow+0x12a>
 800a8cc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a8d0:	429e      	cmp	r6, r3
 800a8d2:	f340 849c 	ble.w	800b20e <__ieee754_pow+0x9c6>
 800a8d6:	1533      	asrs	r3, r6, #20
 800a8d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a8dc:	2b14      	cmp	r3, #20
 800a8de:	dd0f      	ble.n	800a900 <__ieee754_pow+0xb8>
 800a8e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a8e4:	fa22 f103 	lsr.w	r1, r2, r3
 800a8e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	f040 848e 	bne.w	800b20e <__ieee754_pow+0x9c6>
 800a8f2:	f001 0101 	and.w	r1, r1, #1
 800a8f6:	f1c1 0302 	rsb	r3, r1, #2
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	b182      	cbz	r2, 800a920 <__ieee754_pow+0xd8>
 800a8fe:	e05d      	b.n	800a9bc <__ieee754_pow+0x174>
 800a900:	2a00      	cmp	r2, #0
 800a902:	d159      	bne.n	800a9b8 <__ieee754_pow+0x170>
 800a904:	f1c3 0314 	rsb	r3, r3, #20
 800a908:	fa46 f103 	asr.w	r1, r6, r3
 800a90c:	fa01 f303 	lsl.w	r3, r1, r3
 800a910:	42b3      	cmp	r3, r6
 800a912:	f040 8479 	bne.w	800b208 <__ieee754_pow+0x9c0>
 800a916:	f001 0101 	and.w	r1, r1, #1
 800a91a:	f1c1 0302 	rsb	r3, r1, #2
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	4b58      	ldr	r3, [pc, #352]	; (800aa84 <__ieee754_pow+0x23c>)
 800a922:	429e      	cmp	r6, r3
 800a924:	d132      	bne.n	800a98c <__ieee754_pow+0x144>
 800a926:	2f00      	cmp	r7, #0
 800a928:	f280 846a 	bge.w	800b200 <__ieee754_pow+0x9b8>
 800a92c:	4642      	mov	r2, r8
 800a92e:	464b      	mov	r3, r9
 800a930:	2000      	movs	r0, #0
 800a932:	4954      	ldr	r1, [pc, #336]	; (800aa84 <__ieee754_pow+0x23c>)
 800a934:	f7f5 fefa 	bl	800072c <__aeabi_ddiv>
 800a938:	e7a3      	b.n	800a882 <__ieee754_pow+0x3a>
 800a93a:	2300      	movs	r3, #0
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	2a00      	cmp	r2, #0
 800a940:	d13c      	bne.n	800a9bc <__ieee754_pow+0x174>
 800a942:	4b4e      	ldr	r3, [pc, #312]	; (800aa7c <__ieee754_pow+0x234>)
 800a944:	429e      	cmp	r6, r3
 800a946:	d1eb      	bne.n	800a920 <__ieee754_pow+0xd8>
 800a948:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a94c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a950:	ea53 030a 	orrs.w	r3, r3, sl
 800a954:	f000 8448 	beq.w	800b1e8 <__ieee754_pow+0x9a0>
 800a958:	4b4b      	ldr	r3, [pc, #300]	; (800aa88 <__ieee754_pow+0x240>)
 800a95a:	429c      	cmp	r4, r3
 800a95c:	dd0b      	ble.n	800a976 <__ieee754_pow+0x12e>
 800a95e:	2f00      	cmp	r7, #0
 800a960:	f2c0 8448 	blt.w	800b1f4 <__ieee754_pow+0x9ac>
 800a964:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a968:	4658      	mov	r0, fp
 800a96a:	4661      	mov	r1, ip
 800a96c:	b013      	add	sp, #76	; 0x4c
 800a96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a972:	2302      	movs	r3, #2
 800a974:	e7e2      	b.n	800a93c <__ieee754_pow+0xf4>
 800a976:	2f00      	cmp	r7, #0
 800a978:	f04f 0b00 	mov.w	fp, #0
 800a97c:	f04f 0c00 	mov.w	ip, #0
 800a980:	daf2      	bge.n	800a968 <__ieee754_pow+0x120>
 800a982:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a986:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a98a:	e7ed      	b.n	800a968 <__ieee754_pow+0x120>
 800a98c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a990:	d106      	bne.n	800a9a0 <__ieee754_pow+0x158>
 800a992:	4642      	mov	r2, r8
 800a994:	464b      	mov	r3, r9
 800a996:	4640      	mov	r0, r8
 800a998:	4649      	mov	r1, r9
 800a99a:	f7f5 fd9d 	bl	80004d8 <__aeabi_dmul>
 800a99e:	e770      	b.n	800a882 <__ieee754_pow+0x3a>
 800a9a0:	4b3a      	ldr	r3, [pc, #232]	; (800aa8c <__ieee754_pow+0x244>)
 800a9a2:	429f      	cmp	r7, r3
 800a9a4:	d10a      	bne.n	800a9bc <__ieee754_pow+0x174>
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	db08      	blt.n	800a9bc <__ieee754_pow+0x174>
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	b013      	add	sp, #76	; 0x4c
 800a9b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	f000 bc5e 	b.w	800b274 <__ieee754_sqrt>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	4640      	mov	r0, r8
 800a9be:	4649      	mov	r1, r9
 800a9c0:	f000 fec0 	bl	800b744 <fabs>
 800a9c4:	4683      	mov	fp, r0
 800a9c6:	468c      	mov	ip, r1
 800a9c8:	f1ba 0f00 	cmp.w	sl, #0
 800a9cc:	d128      	bne.n	800aa20 <__ieee754_pow+0x1d8>
 800a9ce:	b124      	cbz	r4, 800a9da <__ieee754_pow+0x192>
 800a9d0:	4b2c      	ldr	r3, [pc, #176]	; (800aa84 <__ieee754_pow+0x23c>)
 800a9d2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d122      	bne.n	800aa20 <__ieee754_pow+0x1d8>
 800a9da:	2f00      	cmp	r7, #0
 800a9dc:	da07      	bge.n	800a9ee <__ieee754_pow+0x1a6>
 800a9de:	465a      	mov	r2, fp
 800a9e0:	4663      	mov	r3, ip
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	4927      	ldr	r1, [pc, #156]	; (800aa84 <__ieee754_pow+0x23c>)
 800a9e6:	f7f5 fea1 	bl	800072c <__aeabi_ddiv>
 800a9ea:	4683      	mov	fp, r0
 800a9ec:	468c      	mov	ip, r1
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	daba      	bge.n	800a968 <__ieee754_pow+0x120>
 800a9f2:	9b00      	ldr	r3, [sp, #0]
 800a9f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a9f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a9fc:	4323      	orrs	r3, r4
 800a9fe:	d108      	bne.n	800aa12 <__ieee754_pow+0x1ca>
 800aa00:	465a      	mov	r2, fp
 800aa02:	4663      	mov	r3, ip
 800aa04:	4658      	mov	r0, fp
 800aa06:	4661      	mov	r1, ip
 800aa08:	f7f5 fbae 	bl	8000168 <__aeabi_dsub>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	e790      	b.n	800a934 <__ieee754_pow+0xec>
 800aa12:	9b00      	ldr	r3, [sp, #0]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d1a7      	bne.n	800a968 <__ieee754_pow+0x120>
 800aa18:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800aa1c:	469c      	mov	ip, r3
 800aa1e:	e7a3      	b.n	800a968 <__ieee754_pow+0x120>
 800aa20:	0feb      	lsrs	r3, r5, #31
 800aa22:	3b01      	subs	r3, #1
 800aa24:	930c      	str	r3, [sp, #48]	; 0x30
 800aa26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa28:	9b00      	ldr	r3, [sp, #0]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	d104      	bne.n	800aa38 <__ieee754_pow+0x1f0>
 800aa2e:	4642      	mov	r2, r8
 800aa30:	464b      	mov	r3, r9
 800aa32:	4640      	mov	r0, r8
 800aa34:	4649      	mov	r1, r9
 800aa36:	e7e7      	b.n	800aa08 <__ieee754_pow+0x1c0>
 800aa38:	4b15      	ldr	r3, [pc, #84]	; (800aa90 <__ieee754_pow+0x248>)
 800aa3a:	429e      	cmp	r6, r3
 800aa3c:	f340 80f6 	ble.w	800ac2c <__ieee754_pow+0x3e4>
 800aa40:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800aa44:	429e      	cmp	r6, r3
 800aa46:	4b10      	ldr	r3, [pc, #64]	; (800aa88 <__ieee754_pow+0x240>)
 800aa48:	dd09      	ble.n	800aa5e <__ieee754_pow+0x216>
 800aa4a:	429c      	cmp	r4, r3
 800aa4c:	dc0c      	bgt.n	800aa68 <__ieee754_pow+0x220>
 800aa4e:	2f00      	cmp	r7, #0
 800aa50:	da0c      	bge.n	800aa6c <__ieee754_pow+0x224>
 800aa52:	2000      	movs	r0, #0
 800aa54:	b013      	add	sp, #76	; 0x4c
 800aa56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5a:	f000 bce2 	b.w	800b422 <__math_oflow>
 800aa5e:	429c      	cmp	r4, r3
 800aa60:	dbf5      	blt.n	800aa4e <__ieee754_pow+0x206>
 800aa62:	4b08      	ldr	r3, [pc, #32]	; (800aa84 <__ieee754_pow+0x23c>)
 800aa64:	429c      	cmp	r4, r3
 800aa66:	dd15      	ble.n	800aa94 <__ieee754_pow+0x24c>
 800aa68:	2f00      	cmp	r7, #0
 800aa6a:	dcf2      	bgt.n	800aa52 <__ieee754_pow+0x20a>
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	b013      	add	sp, #76	; 0x4c
 800aa70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	f000 bcd0 	b.w	800b418 <__math_uflow>
 800aa78:	fff00000 	.word	0xfff00000
 800aa7c:	7ff00000 	.word	0x7ff00000
 800aa80:	433fffff 	.word	0x433fffff
 800aa84:	3ff00000 	.word	0x3ff00000
 800aa88:	3fefffff 	.word	0x3fefffff
 800aa8c:	3fe00000 	.word	0x3fe00000
 800aa90:	41e00000 	.word	0x41e00000
 800aa94:	4661      	mov	r1, ip
 800aa96:	2200      	movs	r2, #0
 800aa98:	4658      	mov	r0, fp
 800aa9a:	4b5f      	ldr	r3, [pc, #380]	; (800ac18 <__ieee754_pow+0x3d0>)
 800aa9c:	f7f5 fb64 	bl	8000168 <__aeabi_dsub>
 800aaa0:	a355      	add	r3, pc, #340	; (adr r3, 800abf8 <__ieee754_pow+0x3b0>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	460d      	mov	r5, r1
 800aaaa:	f7f5 fd15 	bl	80004d8 <__aeabi_dmul>
 800aaae:	a354      	add	r3, pc, #336	; (adr r3, 800ac00 <__ieee754_pow+0x3b8>)
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	4606      	mov	r6, r0
 800aab6:	460f      	mov	r7, r1
 800aab8:	4620      	mov	r0, r4
 800aaba:	4629      	mov	r1, r5
 800aabc:	f7f5 fd0c 	bl	80004d8 <__aeabi_dmul>
 800aac0:	2200      	movs	r2, #0
 800aac2:	4682      	mov	sl, r0
 800aac4:	468b      	mov	fp, r1
 800aac6:	4620      	mov	r0, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	4b54      	ldr	r3, [pc, #336]	; (800ac1c <__ieee754_pow+0x3d4>)
 800aacc:	f7f5 fd04 	bl	80004d8 <__aeabi_dmul>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	a14c      	add	r1, pc, #304	; (adr r1, 800ac08 <__ieee754_pow+0x3c0>)
 800aad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aada:	f7f5 fb45 	bl	8000168 <__aeabi_dsub>
 800aade:	4622      	mov	r2, r4
 800aae0:	462b      	mov	r3, r5
 800aae2:	f7f5 fcf9 	bl	80004d8 <__aeabi_dmul>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	2000      	movs	r0, #0
 800aaec:	494c      	ldr	r1, [pc, #304]	; (800ac20 <__ieee754_pow+0x3d8>)
 800aaee:	f7f5 fb3b 	bl	8000168 <__aeabi_dsub>
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	4680      	mov	r8, r0
 800aaf8:	4689      	mov	r9, r1
 800aafa:	4620      	mov	r0, r4
 800aafc:	4629      	mov	r1, r5
 800aafe:	f7f5 fceb 	bl	80004d8 <__aeabi_dmul>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	4640      	mov	r0, r8
 800ab08:	4649      	mov	r1, r9
 800ab0a:	f7f5 fce5 	bl	80004d8 <__aeabi_dmul>
 800ab0e:	a340      	add	r3, pc, #256	; (adr r3, 800ac10 <__ieee754_pow+0x3c8>)
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	f7f5 fce0 	bl	80004d8 <__aeabi_dmul>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4650      	mov	r0, sl
 800ab1e:	4659      	mov	r1, fp
 800ab20:	f7f5 fb22 	bl	8000168 <__aeabi_dsub>
 800ab24:	f04f 0a00 	mov.w	sl, #0
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	460d      	mov	r5, r1
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	f7f5 fb1a 	bl	800016c <__adddf3>
 800ab38:	4632      	mov	r2, r6
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	4650      	mov	r0, sl
 800ab3e:	468b      	mov	fp, r1
 800ab40:	f7f5 fb12 	bl	8000168 <__aeabi_dsub>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 fb0c 	bl	8000168 <__aeabi_dsub>
 800ab50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab54:	9b00      	ldr	r3, [sp, #0]
 800ab56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	f04f 0600 	mov.w	r6, #0
 800ab60:	f04f 0200 	mov.w	r2, #0
 800ab64:	bf0c      	ite	eq
 800ab66:	4b2f      	ldreq	r3, [pc, #188]	; (800ac24 <__ieee754_pow+0x3dc>)
 800ab68:	4b2b      	ldrne	r3, [pc, #172]	; (800ac18 <__ieee754_pow+0x3d0>)
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab72:	e9cd 2300 	strd	r2, r3, [sp]
 800ab76:	4632      	mov	r2, r6
 800ab78:	463b      	mov	r3, r7
 800ab7a:	f7f5 faf5 	bl	8000168 <__aeabi_dsub>
 800ab7e:	4652      	mov	r2, sl
 800ab80:	465b      	mov	r3, fp
 800ab82:	f7f5 fca9 	bl	80004d8 <__aeabi_dmul>
 800ab86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	4689      	mov	r9, r1
 800ab8e:	4620      	mov	r0, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	f7f5 fca1 	bl	80004d8 <__aeabi_dmul>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	f7f5 fae5 	bl	800016c <__adddf3>
 800aba2:	4632      	mov	r2, r6
 800aba4:	463b      	mov	r3, r7
 800aba6:	4680      	mov	r8, r0
 800aba8:	4689      	mov	r9, r1
 800abaa:	4650      	mov	r0, sl
 800abac:	4659      	mov	r1, fp
 800abae:	f7f5 fc93 	bl	80004d8 <__aeabi_dmul>
 800abb2:	4604      	mov	r4, r0
 800abb4:	460d      	mov	r5, r1
 800abb6:	460b      	mov	r3, r1
 800abb8:	4602      	mov	r2, r0
 800abba:	4649      	mov	r1, r9
 800abbc:	4640      	mov	r0, r8
 800abbe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800abc2:	f7f5 fad3 	bl	800016c <__adddf3>
 800abc6:	4b18      	ldr	r3, [pc, #96]	; (800ac28 <__ieee754_pow+0x3e0>)
 800abc8:	4682      	mov	sl, r0
 800abca:	4299      	cmp	r1, r3
 800abcc:	460f      	mov	r7, r1
 800abce:	460e      	mov	r6, r1
 800abd0:	f340 82e5 	ble.w	800b19e <__ieee754_pow+0x956>
 800abd4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800abd8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800abdc:	4303      	orrs	r3, r0
 800abde:	f000 81df 	beq.w	800afa0 <__ieee754_pow+0x758>
 800abe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abe6:	2200      	movs	r2, #0
 800abe8:	2300      	movs	r3, #0
 800abea:	f7f5 fee7 	bl	80009bc <__aeabi_dcmplt>
 800abee:	3800      	subs	r0, #0
 800abf0:	bf18      	it	ne
 800abf2:	2001      	movne	r0, #1
 800abf4:	e72e      	b.n	800aa54 <__ieee754_pow+0x20c>
 800abf6:	bf00      	nop
 800abf8:	60000000 	.word	0x60000000
 800abfc:	3ff71547 	.word	0x3ff71547
 800ac00:	f85ddf44 	.word	0xf85ddf44
 800ac04:	3e54ae0b 	.word	0x3e54ae0b
 800ac08:	55555555 	.word	0x55555555
 800ac0c:	3fd55555 	.word	0x3fd55555
 800ac10:	652b82fe 	.word	0x652b82fe
 800ac14:	3ff71547 	.word	0x3ff71547
 800ac18:	3ff00000 	.word	0x3ff00000
 800ac1c:	3fd00000 	.word	0x3fd00000
 800ac20:	3fe00000 	.word	0x3fe00000
 800ac24:	bff00000 	.word	0xbff00000
 800ac28:	408fffff 	.word	0x408fffff
 800ac2c:	4bd2      	ldr	r3, [pc, #840]	; (800af78 <__ieee754_pow+0x730>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	402b      	ands	r3, r5
 800ac32:	b943      	cbnz	r3, 800ac46 <__ieee754_pow+0x3fe>
 800ac34:	4658      	mov	r0, fp
 800ac36:	4661      	mov	r1, ip
 800ac38:	4bd0      	ldr	r3, [pc, #832]	; (800af7c <__ieee754_pow+0x734>)
 800ac3a:	f7f5 fc4d 	bl	80004d8 <__aeabi_dmul>
 800ac3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ac42:	4683      	mov	fp, r0
 800ac44:	460c      	mov	r4, r1
 800ac46:	1523      	asrs	r3, r4, #20
 800ac48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac4c:	4413      	add	r3, r2
 800ac4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac50:	4bcb      	ldr	r3, [pc, #812]	; (800af80 <__ieee754_pow+0x738>)
 800ac52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ac56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ac5a:	429c      	cmp	r4, r3
 800ac5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac60:	dd08      	ble.n	800ac74 <__ieee754_pow+0x42c>
 800ac62:	4bc8      	ldr	r3, [pc, #800]	; (800af84 <__ieee754_pow+0x73c>)
 800ac64:	429c      	cmp	r4, r3
 800ac66:	f340 8199 	ble.w	800af9c <__ieee754_pow+0x754>
 800ac6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ac70:	3301      	adds	r3, #1
 800ac72:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac74:	2600      	movs	r6, #0
 800ac76:	00f3      	lsls	r3, r6, #3
 800ac78:	930d      	str	r3, [sp, #52]	; 0x34
 800ac7a:	4bc3      	ldr	r3, [pc, #780]	; (800af88 <__ieee754_pow+0x740>)
 800ac7c:	4658      	mov	r0, fp
 800ac7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac82:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac86:	4629      	mov	r1, r5
 800ac88:	461a      	mov	r2, r3
 800ac8a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ac8e:	4623      	mov	r3, r4
 800ac90:	f7f5 fa6a 	bl	8000168 <__aeabi_dsub>
 800ac94:	46da      	mov	sl, fp
 800ac96:	462b      	mov	r3, r5
 800ac98:	4652      	mov	r2, sl
 800ac9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ac9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aca2:	f7f5 fa63 	bl	800016c <__adddf3>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	2000      	movs	r0, #0
 800acac:	49b7      	ldr	r1, [pc, #732]	; (800af8c <__ieee754_pow+0x744>)
 800acae:	f7f5 fd3d 	bl	800072c <__aeabi_ddiv>
 800acb2:	4602      	mov	r2, r0
 800acb4:	460b      	mov	r3, r1
 800acb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800acba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800acbe:	f7f5 fc0b 	bl	80004d8 <__aeabi_dmul>
 800acc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acc6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800acca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800acce:	2300      	movs	r3, #0
 800acd0:	2200      	movs	r2, #0
 800acd2:	46ab      	mov	fp, r5
 800acd4:	106d      	asrs	r5, r5, #1
 800acd6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800acda:	9304      	str	r3, [sp, #16]
 800acdc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ace0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ace4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ace8:	4640      	mov	r0, r8
 800acea:	4649      	mov	r1, r9
 800acec:	4614      	mov	r4, r2
 800acee:	461d      	mov	r5, r3
 800acf0:	f7f5 fbf2 	bl	80004d8 <__aeabi_dmul>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800acfc:	f7f5 fa34 	bl	8000168 <__aeabi_dsub>
 800ad00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad04:	4606      	mov	r6, r0
 800ad06:	460f      	mov	r7, r1
 800ad08:	4620      	mov	r0, r4
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	f7f5 fa2c 	bl	8000168 <__aeabi_dsub>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4650      	mov	r0, sl
 800ad16:	4659      	mov	r1, fp
 800ad18:	f7f5 fa26 	bl	8000168 <__aeabi_dsub>
 800ad1c:	4642      	mov	r2, r8
 800ad1e:	464b      	mov	r3, r9
 800ad20:	f7f5 fbda 	bl	80004d8 <__aeabi_dmul>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4630      	mov	r0, r6
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	f7f5 fa1c 	bl	8000168 <__aeabi_dsub>
 800ad30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad34:	f7f5 fbd0 	bl	80004d8 <__aeabi_dmul>
 800ad38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad3c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad40:	4610      	mov	r0, r2
 800ad42:	4619      	mov	r1, r3
 800ad44:	f7f5 fbc8 	bl	80004d8 <__aeabi_dmul>
 800ad48:	a379      	add	r3, pc, #484	; (adr r3, 800af30 <__ieee754_pow+0x6e8>)
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	4604      	mov	r4, r0
 800ad50:	460d      	mov	r5, r1
 800ad52:	f7f5 fbc1 	bl	80004d8 <__aeabi_dmul>
 800ad56:	a378      	add	r3, pc, #480	; (adr r3, 800af38 <__ieee754_pow+0x6f0>)
 800ad58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5c:	f7f5 fa06 	bl	800016c <__adddf3>
 800ad60:	4622      	mov	r2, r4
 800ad62:	462b      	mov	r3, r5
 800ad64:	f7f5 fbb8 	bl	80004d8 <__aeabi_dmul>
 800ad68:	a375      	add	r3, pc, #468	; (adr r3, 800af40 <__ieee754_pow+0x6f8>)
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	f7f5 f9fd 	bl	800016c <__adddf3>
 800ad72:	4622      	mov	r2, r4
 800ad74:	462b      	mov	r3, r5
 800ad76:	f7f5 fbaf 	bl	80004d8 <__aeabi_dmul>
 800ad7a:	a373      	add	r3, pc, #460	; (adr r3, 800af48 <__ieee754_pow+0x700>)
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	f7f5 f9f4 	bl	800016c <__adddf3>
 800ad84:	4622      	mov	r2, r4
 800ad86:	462b      	mov	r3, r5
 800ad88:	f7f5 fba6 	bl	80004d8 <__aeabi_dmul>
 800ad8c:	a370      	add	r3, pc, #448	; (adr r3, 800af50 <__ieee754_pow+0x708>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f7f5 f9eb 	bl	800016c <__adddf3>
 800ad96:	4622      	mov	r2, r4
 800ad98:	462b      	mov	r3, r5
 800ad9a:	f7f5 fb9d 	bl	80004d8 <__aeabi_dmul>
 800ad9e:	a36e      	add	r3, pc, #440	; (adr r3, 800af58 <__ieee754_pow+0x710>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 f9e2 	bl	800016c <__adddf3>
 800ada8:	4622      	mov	r2, r4
 800adaa:	4606      	mov	r6, r0
 800adac:	460f      	mov	r7, r1
 800adae:	462b      	mov	r3, r5
 800adb0:	4620      	mov	r0, r4
 800adb2:	4629      	mov	r1, r5
 800adb4:	f7f5 fb90 	bl	80004d8 <__aeabi_dmul>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	4630      	mov	r0, r6
 800adbe:	4639      	mov	r1, r7
 800adc0:	f7f5 fb8a 	bl	80004d8 <__aeabi_dmul>
 800adc4:	4604      	mov	r4, r0
 800adc6:	460d      	mov	r5, r1
 800adc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adcc:	4642      	mov	r2, r8
 800adce:	464b      	mov	r3, r9
 800add0:	f7f5 f9cc 	bl	800016c <__adddf3>
 800add4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800add8:	f7f5 fb7e 	bl	80004d8 <__aeabi_dmul>
 800addc:	4622      	mov	r2, r4
 800adde:	462b      	mov	r3, r5
 800ade0:	f7f5 f9c4 	bl	800016c <__adddf3>
 800ade4:	4642      	mov	r2, r8
 800ade6:	4606      	mov	r6, r0
 800ade8:	460f      	mov	r7, r1
 800adea:	464b      	mov	r3, r9
 800adec:	4640      	mov	r0, r8
 800adee:	4649      	mov	r1, r9
 800adf0:	f7f5 fb72 	bl	80004d8 <__aeabi_dmul>
 800adf4:	2200      	movs	r2, #0
 800adf6:	4b66      	ldr	r3, [pc, #408]	; (800af90 <__ieee754_pow+0x748>)
 800adf8:	4682      	mov	sl, r0
 800adfa:	468b      	mov	fp, r1
 800adfc:	f7f5 f9b6 	bl	800016c <__adddf3>
 800ae00:	4632      	mov	r2, r6
 800ae02:	463b      	mov	r3, r7
 800ae04:	f7f5 f9b2 	bl	800016c <__adddf3>
 800ae08:	2400      	movs	r4, #0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4640      	mov	r0, r8
 800ae12:	4649      	mov	r1, r9
 800ae14:	f7f5 fb60 	bl	80004d8 <__aeabi_dmul>
 800ae18:	2200      	movs	r2, #0
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	4689      	mov	r9, r1
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	4b5b      	ldr	r3, [pc, #364]	; (800af90 <__ieee754_pow+0x748>)
 800ae24:	f7f5 f9a0 	bl	8000168 <__aeabi_dsub>
 800ae28:	4652      	mov	r2, sl
 800ae2a:	465b      	mov	r3, fp
 800ae2c:	f7f5 f99c 	bl	8000168 <__aeabi_dsub>
 800ae30:	4602      	mov	r2, r0
 800ae32:	460b      	mov	r3, r1
 800ae34:	4630      	mov	r0, r6
 800ae36:	4639      	mov	r1, r7
 800ae38:	f7f5 f996 	bl	8000168 <__aeabi_dsub>
 800ae3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae40:	f7f5 fb4a 	bl	80004d8 <__aeabi_dmul>
 800ae44:	4622      	mov	r2, r4
 800ae46:	4606      	mov	r6, r0
 800ae48:	460f      	mov	r7, r1
 800ae4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae4e:	462b      	mov	r3, r5
 800ae50:	f7f5 fb42 	bl	80004d8 <__aeabi_dmul>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 f986 	bl	800016c <__adddf3>
 800ae60:	2400      	movs	r4, #0
 800ae62:	4606      	mov	r6, r0
 800ae64:	460f      	mov	r7, r1
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	f7f5 f97d 	bl	800016c <__adddf3>
 800ae72:	a33b      	add	r3, pc, #236	; (adr r3, 800af60 <__ieee754_pow+0x718>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	4620      	mov	r0, r4
 800ae7a:	460d      	mov	r5, r1
 800ae7c:	f7f5 fb2c 	bl	80004d8 <__aeabi_dmul>
 800ae80:	4642      	mov	r2, r8
 800ae82:	464b      	mov	r3, r9
 800ae84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae88:	4620      	mov	r0, r4
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	f7f5 f96c 	bl	8000168 <__aeabi_dsub>
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	4630      	mov	r0, r6
 800ae96:	4639      	mov	r1, r7
 800ae98:	f7f5 f966 	bl	8000168 <__aeabi_dsub>
 800ae9c:	a332      	add	r3, pc, #200	; (adr r3, 800af68 <__ieee754_pow+0x720>)
 800ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea2:	f7f5 fb19 	bl	80004d8 <__aeabi_dmul>
 800aea6:	a332      	add	r3, pc, #200	; (adr r3, 800af70 <__ieee754_pow+0x728>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	4606      	mov	r6, r0
 800aeae:	460f      	mov	r7, r1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	f7f5 fb10 	bl	80004d8 <__aeabi_dmul>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4630      	mov	r0, r6
 800aebe:	4639      	mov	r1, r7
 800aec0:	f7f5 f954 	bl	800016c <__adddf3>
 800aec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aec6:	4b33      	ldr	r3, [pc, #204]	; (800af94 <__ieee754_pow+0x74c>)
 800aec8:	f04f 0a00 	mov.w	sl, #0
 800aecc:	4413      	add	r3, r2
 800aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed2:	f7f5 f94b 	bl	800016c <__adddf3>
 800aed6:	4680      	mov	r8, r0
 800aed8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aeda:	4689      	mov	r9, r1
 800aedc:	f7f5 fa92 	bl	8000404 <__aeabi_i2d>
 800aee0:	4604      	mov	r4, r0
 800aee2:	460d      	mov	r5, r1
 800aee4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aee6:	4b2c      	ldr	r3, [pc, #176]	; (800af98 <__ieee754_pow+0x750>)
 800aee8:	4413      	add	r3, r2
 800aeea:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aeee:	4642      	mov	r2, r8
 800aef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aef4:	464b      	mov	r3, r9
 800aef6:	f7f5 f939 	bl	800016c <__adddf3>
 800aefa:	4632      	mov	r2, r6
 800aefc:	463b      	mov	r3, r7
 800aefe:	f7f5 f935 	bl	800016c <__adddf3>
 800af02:	4622      	mov	r2, r4
 800af04:	462b      	mov	r3, r5
 800af06:	f7f5 f931 	bl	800016c <__adddf3>
 800af0a:	4622      	mov	r2, r4
 800af0c:	462b      	mov	r3, r5
 800af0e:	4650      	mov	r0, sl
 800af10:	468b      	mov	fp, r1
 800af12:	f7f5 f929 	bl	8000168 <__aeabi_dsub>
 800af16:	4632      	mov	r2, r6
 800af18:	463b      	mov	r3, r7
 800af1a:	f7f5 f925 	bl	8000168 <__aeabi_dsub>
 800af1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af22:	f7f5 f921 	bl	8000168 <__aeabi_dsub>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	4640      	mov	r0, r8
 800af2c:	4649      	mov	r1, r9
 800af2e:	e60d      	b.n	800ab4c <__ieee754_pow+0x304>
 800af30:	4a454eef 	.word	0x4a454eef
 800af34:	3fca7e28 	.word	0x3fca7e28
 800af38:	93c9db65 	.word	0x93c9db65
 800af3c:	3fcd864a 	.word	0x3fcd864a
 800af40:	a91d4101 	.word	0xa91d4101
 800af44:	3fd17460 	.word	0x3fd17460
 800af48:	518f264d 	.word	0x518f264d
 800af4c:	3fd55555 	.word	0x3fd55555
 800af50:	db6fabff 	.word	0xdb6fabff
 800af54:	3fdb6db6 	.word	0x3fdb6db6
 800af58:	33333303 	.word	0x33333303
 800af5c:	3fe33333 	.word	0x3fe33333
 800af60:	e0000000 	.word	0xe0000000
 800af64:	3feec709 	.word	0x3feec709
 800af68:	dc3a03fd 	.word	0xdc3a03fd
 800af6c:	3feec709 	.word	0x3feec709
 800af70:	145b01f5 	.word	0x145b01f5
 800af74:	be3e2fe0 	.word	0xbe3e2fe0
 800af78:	7ff00000 	.word	0x7ff00000
 800af7c:	43400000 	.word	0x43400000
 800af80:	0003988e 	.word	0x0003988e
 800af84:	000bb679 	.word	0x000bb679
 800af88:	0800bd78 	.word	0x0800bd78
 800af8c:	3ff00000 	.word	0x3ff00000
 800af90:	40080000 	.word	0x40080000
 800af94:	0800bd98 	.word	0x0800bd98
 800af98:	0800bd88 	.word	0x0800bd88
 800af9c:	2601      	movs	r6, #1
 800af9e:	e66a      	b.n	800ac76 <__ieee754_pow+0x42e>
 800afa0:	a39d      	add	r3, pc, #628	; (adr r3, 800b218 <__ieee754_pow+0x9d0>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	4640      	mov	r0, r8
 800afa8:	4649      	mov	r1, r9
 800afaa:	f7f5 f8df 	bl	800016c <__adddf3>
 800afae:	4622      	mov	r2, r4
 800afb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afb4:	462b      	mov	r3, r5
 800afb6:	4650      	mov	r0, sl
 800afb8:	4639      	mov	r1, r7
 800afba:	f7f5 f8d5 	bl	8000168 <__aeabi_dsub>
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afc6:	f7f5 fd17 	bl	80009f8 <__aeabi_dcmpgt>
 800afca:	2800      	cmp	r0, #0
 800afcc:	f47f ae09 	bne.w	800abe2 <__ieee754_pow+0x39a>
 800afd0:	4aa3      	ldr	r2, [pc, #652]	; (800b260 <__ieee754_pow+0xa18>)
 800afd2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800afd6:	4293      	cmp	r3, r2
 800afd8:	f340 8101 	ble.w	800b1de <__ieee754_pow+0x996>
 800afdc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800afe0:	2000      	movs	r0, #0
 800afe2:	151b      	asrs	r3, r3, #20
 800afe4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800afe8:	fa4a f303 	asr.w	r3, sl, r3
 800afec:	4433      	add	r3, r6
 800afee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aff2:	4f9c      	ldr	r7, [pc, #624]	; (800b264 <__ieee754_pow+0xa1c>)
 800aff4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aff8:	4117      	asrs	r7, r2
 800affa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800affe:	ea23 0107 	bic.w	r1, r3, r7
 800b002:	f1c2 0214 	rsb	r2, r2, #20
 800b006:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b00a:	460b      	mov	r3, r1
 800b00c:	fa4a fa02 	asr.w	sl, sl, r2
 800b010:	2e00      	cmp	r6, #0
 800b012:	4602      	mov	r2, r0
 800b014:	4629      	mov	r1, r5
 800b016:	4620      	mov	r0, r4
 800b018:	bfb8      	it	lt
 800b01a:	f1ca 0a00 	rsblt	sl, sl, #0
 800b01e:	f7f5 f8a3 	bl	8000168 <__aeabi_dsub>
 800b022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b02a:	2400      	movs	r4, #0
 800b02c:	4642      	mov	r2, r8
 800b02e:	464b      	mov	r3, r9
 800b030:	f7f5 f89c 	bl	800016c <__adddf3>
 800b034:	a37a      	add	r3, pc, #488	; (adr r3, 800b220 <__ieee754_pow+0x9d8>)
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	4620      	mov	r0, r4
 800b03c:	460d      	mov	r5, r1
 800b03e:	f7f5 fa4b 	bl	80004d8 <__aeabi_dmul>
 800b042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b046:	4606      	mov	r6, r0
 800b048:	460f      	mov	r7, r1
 800b04a:	4620      	mov	r0, r4
 800b04c:	4629      	mov	r1, r5
 800b04e:	f7f5 f88b 	bl	8000168 <__aeabi_dsub>
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	4640      	mov	r0, r8
 800b058:	4649      	mov	r1, r9
 800b05a:	f7f5 f885 	bl	8000168 <__aeabi_dsub>
 800b05e:	a372      	add	r3, pc, #456	; (adr r3, 800b228 <__ieee754_pow+0x9e0>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	f7f5 fa38 	bl	80004d8 <__aeabi_dmul>
 800b068:	a371      	add	r3, pc, #452	; (adr r3, 800b230 <__ieee754_pow+0x9e8>)
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	4680      	mov	r8, r0
 800b070:	4689      	mov	r9, r1
 800b072:	4620      	mov	r0, r4
 800b074:	4629      	mov	r1, r5
 800b076:	f7f5 fa2f 	bl	80004d8 <__aeabi_dmul>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4640      	mov	r0, r8
 800b080:	4649      	mov	r1, r9
 800b082:	f7f5 f873 	bl	800016c <__adddf3>
 800b086:	4604      	mov	r4, r0
 800b088:	460d      	mov	r5, r1
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4630      	mov	r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	f7f5 f86b 	bl	800016c <__adddf3>
 800b096:	4632      	mov	r2, r6
 800b098:	463b      	mov	r3, r7
 800b09a:	4680      	mov	r8, r0
 800b09c:	4689      	mov	r9, r1
 800b09e:	f7f5 f863 	bl	8000168 <__aeabi_dsub>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	f7f5 f85d 	bl	8000168 <__aeabi_dsub>
 800b0ae:	4642      	mov	r2, r8
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	460f      	mov	r7, r1
 800b0b4:	464b      	mov	r3, r9
 800b0b6:	4640      	mov	r0, r8
 800b0b8:	4649      	mov	r1, r9
 800b0ba:	f7f5 fa0d 	bl	80004d8 <__aeabi_dmul>
 800b0be:	a35e      	add	r3, pc, #376	; (adr r3, 800b238 <__ieee754_pow+0x9f0>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	460d      	mov	r5, r1
 800b0c8:	f7f5 fa06 	bl	80004d8 <__aeabi_dmul>
 800b0cc:	a35c      	add	r3, pc, #368	; (adr r3, 800b240 <__ieee754_pow+0x9f8>)
 800b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d2:	f7f5 f849 	bl	8000168 <__aeabi_dsub>
 800b0d6:	4622      	mov	r2, r4
 800b0d8:	462b      	mov	r3, r5
 800b0da:	f7f5 f9fd 	bl	80004d8 <__aeabi_dmul>
 800b0de:	a35a      	add	r3, pc, #360	; (adr r3, 800b248 <__ieee754_pow+0xa00>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f7f5 f842 	bl	800016c <__adddf3>
 800b0e8:	4622      	mov	r2, r4
 800b0ea:	462b      	mov	r3, r5
 800b0ec:	f7f5 f9f4 	bl	80004d8 <__aeabi_dmul>
 800b0f0:	a357      	add	r3, pc, #348	; (adr r3, 800b250 <__ieee754_pow+0xa08>)
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	f7f5 f837 	bl	8000168 <__aeabi_dsub>
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	462b      	mov	r3, r5
 800b0fe:	f7f5 f9eb 	bl	80004d8 <__aeabi_dmul>
 800b102:	a355      	add	r3, pc, #340	; (adr r3, 800b258 <__ieee754_pow+0xa10>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f7f5 f830 	bl	800016c <__adddf3>
 800b10c:	4622      	mov	r2, r4
 800b10e:	462b      	mov	r3, r5
 800b110:	f7f5 f9e2 	bl	80004d8 <__aeabi_dmul>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4640      	mov	r0, r8
 800b11a:	4649      	mov	r1, r9
 800b11c:	f7f5 f824 	bl	8000168 <__aeabi_dsub>
 800b120:	4604      	mov	r4, r0
 800b122:	460d      	mov	r5, r1
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4640      	mov	r0, r8
 800b12a:	4649      	mov	r1, r9
 800b12c:	f7f5 f9d4 	bl	80004d8 <__aeabi_dmul>
 800b130:	2200      	movs	r2, #0
 800b132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b13a:	4620      	mov	r0, r4
 800b13c:	4629      	mov	r1, r5
 800b13e:	f7f5 f813 	bl	8000168 <__aeabi_dsub>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b14a:	f7f5 faef 	bl	800072c <__aeabi_ddiv>
 800b14e:	4632      	mov	r2, r6
 800b150:	4604      	mov	r4, r0
 800b152:	460d      	mov	r5, r1
 800b154:	463b      	mov	r3, r7
 800b156:	4640      	mov	r0, r8
 800b158:	4649      	mov	r1, r9
 800b15a:	f7f5 f9bd 	bl	80004d8 <__aeabi_dmul>
 800b15e:	4632      	mov	r2, r6
 800b160:	463b      	mov	r3, r7
 800b162:	f7f5 f803 	bl	800016c <__adddf3>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4620      	mov	r0, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	f7f4 fffb 	bl	8000168 <__aeabi_dsub>
 800b172:	4642      	mov	r2, r8
 800b174:	464b      	mov	r3, r9
 800b176:	f7f4 fff7 	bl	8000168 <__aeabi_dsub>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	2000      	movs	r0, #0
 800b180:	4939      	ldr	r1, [pc, #228]	; (800b268 <__ieee754_pow+0xa20>)
 800b182:	f7f4 fff1 	bl	8000168 <__aeabi_dsub>
 800b186:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b18a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b18e:	da29      	bge.n	800b1e4 <__ieee754_pow+0x99c>
 800b190:	4652      	mov	r2, sl
 800b192:	f000 fae1 	bl	800b758 <scalbn>
 800b196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b19a:	f7ff bbfe 	b.w	800a99a <__ieee754_pow+0x152>
 800b19e:	4b33      	ldr	r3, [pc, #204]	; (800b26c <__ieee754_pow+0xa24>)
 800b1a0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b1a4:	429f      	cmp	r7, r3
 800b1a6:	f77f af13 	ble.w	800afd0 <__ieee754_pow+0x788>
 800b1aa:	4b31      	ldr	r3, [pc, #196]	; (800b270 <__ieee754_pow+0xa28>)
 800b1ac:	440b      	add	r3, r1
 800b1ae:	4303      	orrs	r3, r0
 800b1b0:	d009      	beq.n	800b1c6 <__ieee754_pow+0x97e>
 800b1b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f7f5 fbff 	bl	80009bc <__aeabi_dcmplt>
 800b1be:	3800      	subs	r0, #0
 800b1c0:	bf18      	it	ne
 800b1c2:	2001      	movne	r0, #1
 800b1c4:	e453      	b.n	800aa6e <__ieee754_pow+0x226>
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	462b      	mov	r3, r5
 800b1ca:	f7f4 ffcd 	bl	8000168 <__aeabi_dsub>
 800b1ce:	4642      	mov	r2, r8
 800b1d0:	464b      	mov	r3, r9
 800b1d2:	f7f5 fc07 	bl	80009e4 <__aeabi_dcmpge>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f43f aefa 	beq.w	800afd0 <__ieee754_pow+0x788>
 800b1dc:	e7e9      	b.n	800b1b2 <__ieee754_pow+0x96a>
 800b1de:	f04f 0a00 	mov.w	sl, #0
 800b1e2:	e720      	b.n	800b026 <__ieee754_pow+0x7de>
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	e7d6      	b.n	800b196 <__ieee754_pow+0x94e>
 800b1e8:	f04f 0b00 	mov.w	fp, #0
 800b1ec:	f8df c078 	ldr.w	ip, [pc, #120]	; 800b268 <__ieee754_pow+0xa20>
 800b1f0:	f7ff bbba 	b.w	800a968 <__ieee754_pow+0x120>
 800b1f4:	f04f 0b00 	mov.w	fp, #0
 800b1f8:	f04f 0c00 	mov.w	ip, #0
 800b1fc:	f7ff bbb4 	b.w	800a968 <__ieee754_pow+0x120>
 800b200:	4640      	mov	r0, r8
 800b202:	4649      	mov	r1, r9
 800b204:	f7ff bb3d 	b.w	800a882 <__ieee754_pow+0x3a>
 800b208:	9200      	str	r2, [sp, #0]
 800b20a:	f7ff bb89 	b.w	800a920 <__ieee754_pow+0xd8>
 800b20e:	2300      	movs	r3, #0
 800b210:	f7ff bb73 	b.w	800a8fa <__ieee754_pow+0xb2>
 800b214:	f3af 8000 	nop.w
 800b218:	652b82fe 	.word	0x652b82fe
 800b21c:	3c971547 	.word	0x3c971547
 800b220:	00000000 	.word	0x00000000
 800b224:	3fe62e43 	.word	0x3fe62e43
 800b228:	fefa39ef 	.word	0xfefa39ef
 800b22c:	3fe62e42 	.word	0x3fe62e42
 800b230:	0ca86c39 	.word	0x0ca86c39
 800b234:	be205c61 	.word	0xbe205c61
 800b238:	72bea4d0 	.word	0x72bea4d0
 800b23c:	3e663769 	.word	0x3e663769
 800b240:	c5d26bf1 	.word	0xc5d26bf1
 800b244:	3ebbbd41 	.word	0x3ebbbd41
 800b248:	af25de2c 	.word	0xaf25de2c
 800b24c:	3f11566a 	.word	0x3f11566a
 800b250:	16bebd93 	.word	0x16bebd93
 800b254:	3f66c16c 	.word	0x3f66c16c
 800b258:	5555553e 	.word	0x5555553e
 800b25c:	3fc55555 	.word	0x3fc55555
 800b260:	3fe00000 	.word	0x3fe00000
 800b264:	000fffff 	.word	0x000fffff
 800b268:	3ff00000 	.word	0x3ff00000
 800b26c:	4090cbff 	.word	0x4090cbff
 800b270:	3f6f3400 	.word	0x3f6f3400

0800b274 <__ieee754_sqrt>:
 800b274:	f8df c158 	ldr.w	ip, [pc, #344]	; 800b3d0 <__ieee754_sqrt+0x15c>
 800b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27c:	ea3c 0c01 	bics.w	ip, ip, r1
 800b280:	4606      	mov	r6, r0
 800b282:	460d      	mov	r5, r1
 800b284:	460c      	mov	r4, r1
 800b286:	460a      	mov	r2, r1
 800b288:	4607      	mov	r7, r0
 800b28a:	4603      	mov	r3, r0
 800b28c:	d10f      	bne.n	800b2ae <__ieee754_sqrt+0x3a>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	f7f5 f921 	bl	80004d8 <__aeabi_dmul>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4630      	mov	r0, r6
 800b29c:	4629      	mov	r1, r5
 800b29e:	f7f4 ff65 	bl	800016c <__adddf3>
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460d      	mov	r5, r1
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ae:	2900      	cmp	r1, #0
 800b2b0:	dc0e      	bgt.n	800b2d0 <__ieee754_sqrt+0x5c>
 800b2b2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b2b6:	ea5c 0707 	orrs.w	r7, ip, r7
 800b2ba:	d0f4      	beq.n	800b2a6 <__ieee754_sqrt+0x32>
 800b2bc:	b141      	cbz	r1, 800b2d0 <__ieee754_sqrt+0x5c>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	f7f4 ff51 	bl	8000168 <__aeabi_dsub>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	f7f5 fa2f 	bl	800072c <__aeabi_ddiv>
 800b2ce:	e7e8      	b.n	800b2a2 <__ieee754_sqrt+0x2e>
 800b2d0:	1521      	asrs	r1, r4, #20
 800b2d2:	d075      	beq.n	800b3c0 <__ieee754_sqrt+0x14c>
 800b2d4:	07cc      	lsls	r4, r1, #31
 800b2d6:	f04f 0400 	mov.w	r4, #0
 800b2da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b2de:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800b2e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b2e6:	bf5e      	ittt	pl
 800b2e8:	0fd9      	lsrpl	r1, r3, #31
 800b2ea:	005b      	lslpl	r3, r3, #1
 800b2ec:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800b2f0:	0fd9      	lsrs	r1, r3, #31
 800b2f2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b2f6:	2516      	movs	r5, #22
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2fe:	107f      	asrs	r7, r7, #1
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	1846      	adds	r6, r0, r1
 800b304:	4296      	cmp	r6, r2
 800b306:	bfde      	ittt	le
 800b308:	1b92      	suble	r2, r2, r6
 800b30a:	1870      	addle	r0, r6, r1
 800b30c:	1864      	addle	r4, r4, r1
 800b30e:	0052      	lsls	r2, r2, #1
 800b310:	3d01      	subs	r5, #1
 800b312:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b316:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b31a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b31e:	d1f0      	bne.n	800b302 <__ieee754_sqrt+0x8e>
 800b320:	4629      	mov	r1, r5
 800b322:	f04f 0e20 	mov.w	lr, #32
 800b326:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b32a:	4282      	cmp	r2, r0
 800b32c:	eb06 0c05 	add.w	ip, r6, r5
 800b330:	dc02      	bgt.n	800b338 <__ieee754_sqrt+0xc4>
 800b332:	d113      	bne.n	800b35c <__ieee754_sqrt+0xe8>
 800b334:	459c      	cmp	ip, r3
 800b336:	d811      	bhi.n	800b35c <__ieee754_sqrt+0xe8>
 800b338:	f1bc 0f00 	cmp.w	ip, #0
 800b33c:	eb0c 0506 	add.w	r5, ip, r6
 800b340:	da43      	bge.n	800b3ca <__ieee754_sqrt+0x156>
 800b342:	2d00      	cmp	r5, #0
 800b344:	db41      	blt.n	800b3ca <__ieee754_sqrt+0x156>
 800b346:	f100 0801 	add.w	r8, r0, #1
 800b34a:	1a12      	subs	r2, r2, r0
 800b34c:	4640      	mov	r0, r8
 800b34e:	459c      	cmp	ip, r3
 800b350:	bf88      	it	hi
 800b352:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b356:	eba3 030c 	sub.w	r3, r3, ip
 800b35a:	4431      	add	r1, r6
 800b35c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b360:	f1be 0e01 	subs.w	lr, lr, #1
 800b364:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800b368:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b36c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b370:	d1db      	bne.n	800b32a <__ieee754_sqrt+0xb6>
 800b372:	4313      	orrs	r3, r2
 800b374:	d006      	beq.n	800b384 <__ieee754_sqrt+0x110>
 800b376:	1c48      	adds	r0, r1, #1
 800b378:	bf0b      	itete	eq
 800b37a:	4671      	moveq	r1, lr
 800b37c:	3101      	addne	r1, #1
 800b37e:	3401      	addeq	r4, #1
 800b380:	f021 0101 	bicne.w	r1, r1, #1
 800b384:	1063      	asrs	r3, r4, #1
 800b386:	0849      	lsrs	r1, r1, #1
 800b388:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b38c:	07e2      	lsls	r2, r4, #31
 800b38e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b392:	bf48      	it	mi
 800b394:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b398:	460e      	mov	r6, r1
 800b39a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b39e:	e782      	b.n	800b2a6 <__ieee754_sqrt+0x32>
 800b3a0:	0ada      	lsrs	r2, r3, #11
 800b3a2:	3815      	subs	r0, #21
 800b3a4:	055b      	lsls	r3, r3, #21
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	d0fa      	beq.n	800b3a0 <__ieee754_sqrt+0x12c>
 800b3aa:	02d5      	lsls	r5, r2, #11
 800b3ac:	d50a      	bpl.n	800b3c4 <__ieee754_sqrt+0x150>
 800b3ae:	f1c1 0420 	rsb	r4, r1, #32
 800b3b2:	fa23 f404 	lsr.w	r4, r3, r4
 800b3b6:	1e4d      	subs	r5, r1, #1
 800b3b8:	408b      	lsls	r3, r1
 800b3ba:	4322      	orrs	r2, r4
 800b3bc:	1b41      	subs	r1, r0, r5
 800b3be:	e789      	b.n	800b2d4 <__ieee754_sqrt+0x60>
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	e7f0      	b.n	800b3a6 <__ieee754_sqrt+0x132>
 800b3c4:	0052      	lsls	r2, r2, #1
 800b3c6:	3101      	adds	r1, #1
 800b3c8:	e7ef      	b.n	800b3aa <__ieee754_sqrt+0x136>
 800b3ca:	4680      	mov	r8, r0
 800b3cc:	e7bd      	b.n	800b34a <__ieee754_sqrt+0xd6>
 800b3ce:	bf00      	nop
 800b3d0:	7ff00000 	.word	0x7ff00000

0800b3d4 <with_errno>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	460d      	mov	r5, r1
 800b3da:	4616      	mov	r6, r2
 800b3dc:	f7fc fa32 	bl	8007844 <__errno>
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	6006      	str	r6, [r0, #0]
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}

0800b3e8 <xflow>:
 800b3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ea:	4615      	mov	r5, r2
 800b3ec:	461c      	mov	r4, r3
 800b3ee:	b180      	cbz	r0, 800b412 <xflow+0x2a>
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b3f6:	e9cd 0100 	strd	r0, r1, [sp]
 800b3fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3fe:	4628      	mov	r0, r5
 800b400:	4621      	mov	r1, r4
 800b402:	f7f5 f869 	bl	80004d8 <__aeabi_dmul>
 800b406:	2222      	movs	r2, #34	; 0x22
 800b408:	b003      	add	sp, #12
 800b40a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b40e:	f7ff bfe1 	b.w	800b3d4 <with_errno>
 800b412:	4610      	mov	r0, r2
 800b414:	4619      	mov	r1, r3
 800b416:	e7ee      	b.n	800b3f6 <xflow+0xe>

0800b418 <__math_uflow>:
 800b418:	2200      	movs	r2, #0
 800b41a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b41e:	f7ff bfe3 	b.w	800b3e8 <xflow>

0800b422 <__math_oflow>:
 800b422:	2200      	movs	r2, #0
 800b424:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b428:	f7ff bfde 	b.w	800b3e8 <xflow>
 800b42c:	0000      	movs	r0, r0
	...

0800b430 <atan>:
 800b430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	4bb6      	ldr	r3, [pc, #728]	; (800b710 <atan+0x2e0>)
 800b436:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b43a:	429e      	cmp	r6, r3
 800b43c:	4604      	mov	r4, r0
 800b43e:	460d      	mov	r5, r1
 800b440:	468b      	mov	fp, r1
 800b442:	dd17      	ble.n	800b474 <atan+0x44>
 800b444:	4bb3      	ldr	r3, [pc, #716]	; (800b714 <atan+0x2e4>)
 800b446:	429e      	cmp	r6, r3
 800b448:	dc01      	bgt.n	800b44e <atan+0x1e>
 800b44a:	d109      	bne.n	800b460 <atan+0x30>
 800b44c:	b140      	cbz	r0, 800b460 <atan+0x30>
 800b44e:	4622      	mov	r2, r4
 800b450:	462b      	mov	r3, r5
 800b452:	4620      	mov	r0, r4
 800b454:	4629      	mov	r1, r5
 800b456:	f7f4 fe89 	bl	800016c <__adddf3>
 800b45a:	4604      	mov	r4, r0
 800b45c:	460d      	mov	r5, r1
 800b45e:	e005      	b.n	800b46c <atan+0x3c>
 800b460:	f1bb 0f00 	cmp.w	fp, #0
 800b464:	4cac      	ldr	r4, [pc, #688]	; (800b718 <atan+0x2e8>)
 800b466:	f300 8121 	bgt.w	800b6ac <atan+0x27c>
 800b46a:	4dac      	ldr	r5, [pc, #688]	; (800b71c <atan+0x2ec>)
 800b46c:	4620      	mov	r0, r4
 800b46e:	4629      	mov	r1, r5
 800b470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b474:	4baa      	ldr	r3, [pc, #680]	; (800b720 <atan+0x2f0>)
 800b476:	429e      	cmp	r6, r3
 800b478:	dc11      	bgt.n	800b49e <atan+0x6e>
 800b47a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b47e:	429e      	cmp	r6, r3
 800b480:	dc0a      	bgt.n	800b498 <atan+0x68>
 800b482:	a38b      	add	r3, pc, #556	; (adr r3, 800b6b0 <atan+0x280>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	f7f4 fe70 	bl	800016c <__adddf3>
 800b48c:	2200      	movs	r2, #0
 800b48e:	4ba5      	ldr	r3, [pc, #660]	; (800b724 <atan+0x2f4>)
 800b490:	f7f5 fab2 	bl	80009f8 <__aeabi_dcmpgt>
 800b494:	2800      	cmp	r0, #0
 800b496:	d1e9      	bne.n	800b46c <atan+0x3c>
 800b498:	f04f 3aff 	mov.w	sl, #4294967295
 800b49c:	e027      	b.n	800b4ee <atan+0xbe>
 800b49e:	f000 f951 	bl	800b744 <fabs>
 800b4a2:	4ba1      	ldr	r3, [pc, #644]	; (800b728 <atan+0x2f8>)
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	429e      	cmp	r6, r3
 800b4a8:	460d      	mov	r5, r1
 800b4aa:	f300 80b8 	bgt.w	800b61e <atan+0x1ee>
 800b4ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b4b2:	429e      	cmp	r6, r3
 800b4b4:	f300 809c 	bgt.w	800b5f0 <atan+0x1c0>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	f7f4 fe56 	bl	800016c <__adddf3>
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4b98      	ldr	r3, [pc, #608]	; (800b724 <atan+0x2f4>)
 800b4c4:	f7f4 fe50 	bl	8000168 <__aeabi_dsub>
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f7f4 fe49 	bl	800016c <__adddf3>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f5 f923 	bl	800072c <__aeabi_ddiv>
 800b4e6:	f04f 0a00 	mov.w	sl, #0
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f7f4 ffef 	bl	80004d8 <__aeabi_dmul>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4680      	mov	r8, r0
 800b500:	4689      	mov	r9, r1
 800b502:	f7f4 ffe9 	bl	80004d8 <__aeabi_dmul>
 800b506:	a36c      	add	r3, pc, #432	; (adr r3, 800b6b8 <atan+0x288>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	4606      	mov	r6, r0
 800b50e:	460f      	mov	r7, r1
 800b510:	f7f4 ffe2 	bl	80004d8 <__aeabi_dmul>
 800b514:	a36a      	add	r3, pc, #424	; (adr r3, 800b6c0 <atan+0x290>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 fe27 	bl	800016c <__adddf3>
 800b51e:	4632      	mov	r2, r6
 800b520:	463b      	mov	r3, r7
 800b522:	f7f4 ffd9 	bl	80004d8 <__aeabi_dmul>
 800b526:	a368      	add	r3, pc, #416	; (adr r3, 800b6c8 <atan+0x298>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f4 fe1e 	bl	800016c <__adddf3>
 800b530:	4632      	mov	r2, r6
 800b532:	463b      	mov	r3, r7
 800b534:	f7f4 ffd0 	bl	80004d8 <__aeabi_dmul>
 800b538:	a365      	add	r3, pc, #404	; (adr r3, 800b6d0 <atan+0x2a0>)
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f7f4 fe15 	bl	800016c <__adddf3>
 800b542:	4632      	mov	r2, r6
 800b544:	463b      	mov	r3, r7
 800b546:	f7f4 ffc7 	bl	80004d8 <__aeabi_dmul>
 800b54a:	a363      	add	r3, pc, #396	; (adr r3, 800b6d8 <atan+0x2a8>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f7f4 fe0c 	bl	800016c <__adddf3>
 800b554:	4632      	mov	r2, r6
 800b556:	463b      	mov	r3, r7
 800b558:	f7f4 ffbe 	bl	80004d8 <__aeabi_dmul>
 800b55c:	a360      	add	r3, pc, #384	; (adr r3, 800b6e0 <atan+0x2b0>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f7f4 fe03 	bl	800016c <__adddf3>
 800b566:	4642      	mov	r2, r8
 800b568:	464b      	mov	r3, r9
 800b56a:	f7f4 ffb5 	bl	80004d8 <__aeabi_dmul>
 800b56e:	a35e      	add	r3, pc, #376	; (adr r3, 800b6e8 <atan+0x2b8>)
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	4680      	mov	r8, r0
 800b576:	4689      	mov	r9, r1
 800b578:	4630      	mov	r0, r6
 800b57a:	4639      	mov	r1, r7
 800b57c:	f7f4 ffac 	bl	80004d8 <__aeabi_dmul>
 800b580:	a35b      	add	r3, pc, #364	; (adr r3, 800b6f0 <atan+0x2c0>)
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f7f4 fdef 	bl	8000168 <__aeabi_dsub>
 800b58a:	4632      	mov	r2, r6
 800b58c:	463b      	mov	r3, r7
 800b58e:	f7f4 ffa3 	bl	80004d8 <__aeabi_dmul>
 800b592:	a359      	add	r3, pc, #356	; (adr r3, 800b6f8 <atan+0x2c8>)
 800b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b598:	f7f4 fde6 	bl	8000168 <__aeabi_dsub>
 800b59c:	4632      	mov	r2, r6
 800b59e:	463b      	mov	r3, r7
 800b5a0:	f7f4 ff9a 	bl	80004d8 <__aeabi_dmul>
 800b5a4:	a356      	add	r3, pc, #344	; (adr r3, 800b700 <atan+0x2d0>)
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	f7f4 fddd 	bl	8000168 <__aeabi_dsub>
 800b5ae:	4632      	mov	r2, r6
 800b5b0:	463b      	mov	r3, r7
 800b5b2:	f7f4 ff91 	bl	80004d8 <__aeabi_dmul>
 800b5b6:	a354      	add	r3, pc, #336	; (adr r3, 800b708 <atan+0x2d8>)
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f7f4 fdd4 	bl	8000168 <__aeabi_dsub>
 800b5c0:	4632      	mov	r2, r6
 800b5c2:	463b      	mov	r3, r7
 800b5c4:	f7f4 ff88 	bl	80004d8 <__aeabi_dmul>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	f7f4 fdcc 	bl	800016c <__adddf3>
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	f7f4 ff7e 	bl	80004d8 <__aeabi_dmul>
 800b5dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	d144      	bne.n	800b670 <atan+0x240>
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7f4 fdbd 	bl	8000168 <__aeabi_dsub>
 800b5ee:	e734      	b.n	800b45a <atan+0x2a>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	4b4c      	ldr	r3, [pc, #304]	; (800b724 <atan+0x2f4>)
 800b5f4:	f7f4 fdb8 	bl	8000168 <__aeabi_dsub>
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	4b48      	ldr	r3, [pc, #288]	; (800b724 <atan+0x2f4>)
 800b604:	f7f4 fdb2 	bl	800016c <__adddf3>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	4630      	mov	r0, r6
 800b60e:	4639      	mov	r1, r7
 800b610:	f7f5 f88c 	bl	800072c <__aeabi_ddiv>
 800b614:	f04f 0a01 	mov.w	sl, #1
 800b618:	4604      	mov	r4, r0
 800b61a:	460d      	mov	r5, r1
 800b61c:	e767      	b.n	800b4ee <atan+0xbe>
 800b61e:	4b43      	ldr	r3, [pc, #268]	; (800b72c <atan+0x2fc>)
 800b620:	429e      	cmp	r6, r3
 800b622:	da1a      	bge.n	800b65a <atan+0x22a>
 800b624:	2200      	movs	r2, #0
 800b626:	4b42      	ldr	r3, [pc, #264]	; (800b730 <atan+0x300>)
 800b628:	f7f4 fd9e 	bl	8000168 <__aeabi_dsub>
 800b62c:	2200      	movs	r2, #0
 800b62e:	4606      	mov	r6, r0
 800b630:	460f      	mov	r7, r1
 800b632:	4620      	mov	r0, r4
 800b634:	4629      	mov	r1, r5
 800b636:	4b3e      	ldr	r3, [pc, #248]	; (800b730 <atan+0x300>)
 800b638:	f7f4 ff4e 	bl	80004d8 <__aeabi_dmul>
 800b63c:	2200      	movs	r2, #0
 800b63e:	4b39      	ldr	r3, [pc, #228]	; (800b724 <atan+0x2f4>)
 800b640:	f7f4 fd94 	bl	800016c <__adddf3>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f5 f86e 	bl	800072c <__aeabi_ddiv>
 800b650:	f04f 0a02 	mov.w	sl, #2
 800b654:	4604      	mov	r4, r0
 800b656:	460d      	mov	r5, r1
 800b658:	e749      	b.n	800b4ee <atan+0xbe>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	2000      	movs	r0, #0
 800b660:	4934      	ldr	r1, [pc, #208]	; (800b734 <atan+0x304>)
 800b662:	f7f5 f863 	bl	800072c <__aeabi_ddiv>
 800b666:	f04f 0a03 	mov.w	sl, #3
 800b66a:	4604      	mov	r4, r0
 800b66c:	460d      	mov	r5, r1
 800b66e:	e73e      	b.n	800b4ee <atan+0xbe>
 800b670:	4b31      	ldr	r3, [pc, #196]	; (800b738 <atan+0x308>)
 800b672:	4e32      	ldr	r6, [pc, #200]	; (800b73c <atan+0x30c>)
 800b674:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b678:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b67c:	e9da 2300 	ldrd	r2, r3, [sl]
 800b680:	f7f4 fd72 	bl	8000168 <__aeabi_dsub>
 800b684:	4622      	mov	r2, r4
 800b686:	462b      	mov	r3, r5
 800b688:	f7f4 fd6e 	bl	8000168 <__aeabi_dsub>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b694:	f7f4 fd68 	bl	8000168 <__aeabi_dsub>
 800b698:	f1bb 0f00 	cmp.w	fp, #0
 800b69c:	4604      	mov	r4, r0
 800b69e:	460d      	mov	r5, r1
 800b6a0:	f6bf aee4 	bge.w	800b46c <atan+0x3c>
 800b6a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6a8:	461d      	mov	r5, r3
 800b6aa:	e6df      	b.n	800b46c <atan+0x3c>
 800b6ac:	4d24      	ldr	r5, [pc, #144]	; (800b740 <atan+0x310>)
 800b6ae:	e6dd      	b.n	800b46c <atan+0x3c>
 800b6b0:	8800759c 	.word	0x8800759c
 800b6b4:	7e37e43c 	.word	0x7e37e43c
 800b6b8:	e322da11 	.word	0xe322da11
 800b6bc:	3f90ad3a 	.word	0x3f90ad3a
 800b6c0:	24760deb 	.word	0x24760deb
 800b6c4:	3fa97b4b 	.word	0x3fa97b4b
 800b6c8:	a0d03d51 	.word	0xa0d03d51
 800b6cc:	3fb10d66 	.word	0x3fb10d66
 800b6d0:	c54c206e 	.word	0xc54c206e
 800b6d4:	3fb745cd 	.word	0x3fb745cd
 800b6d8:	920083ff 	.word	0x920083ff
 800b6dc:	3fc24924 	.word	0x3fc24924
 800b6e0:	5555550d 	.word	0x5555550d
 800b6e4:	3fd55555 	.word	0x3fd55555
 800b6e8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b6ec:	bfa2b444 	.word	0xbfa2b444
 800b6f0:	52defd9a 	.word	0x52defd9a
 800b6f4:	3fadde2d 	.word	0x3fadde2d
 800b6f8:	af749a6d 	.word	0xaf749a6d
 800b6fc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b700:	fe231671 	.word	0xfe231671
 800b704:	3fbc71c6 	.word	0x3fbc71c6
 800b708:	9998ebc4 	.word	0x9998ebc4
 800b70c:	3fc99999 	.word	0x3fc99999
 800b710:	440fffff 	.word	0x440fffff
 800b714:	7ff00000 	.word	0x7ff00000
 800b718:	54442d18 	.word	0x54442d18
 800b71c:	bff921fb 	.word	0xbff921fb
 800b720:	3fdbffff 	.word	0x3fdbffff
 800b724:	3ff00000 	.word	0x3ff00000
 800b728:	3ff2ffff 	.word	0x3ff2ffff
 800b72c:	40038000 	.word	0x40038000
 800b730:	3ff80000 	.word	0x3ff80000
 800b734:	bff00000 	.word	0xbff00000
 800b738:	0800bdc8 	.word	0x0800bdc8
 800b73c:	0800bda8 	.word	0x0800bda8
 800b740:	3ff921fb 	.word	0x3ff921fb

0800b744 <fabs>:
 800b744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b748:	4770      	bx	lr

0800b74a <finite>:
 800b74a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b74e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b752:	0fc0      	lsrs	r0, r0, #31
 800b754:	4770      	bx	lr
	...

0800b758 <scalbn>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	4617      	mov	r7, r2
 800b764:	460b      	mov	r3, r1
 800b766:	b996      	cbnz	r6, 800b78e <scalbn+0x36>
 800b768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b76c:	4303      	orrs	r3, r0
 800b76e:	d039      	beq.n	800b7e4 <scalbn+0x8c>
 800b770:	4b33      	ldr	r3, [pc, #204]	; (800b840 <scalbn+0xe8>)
 800b772:	2200      	movs	r2, #0
 800b774:	f7f4 feb0 	bl	80004d8 <__aeabi_dmul>
 800b778:	4b32      	ldr	r3, [pc, #200]	; (800b844 <scalbn+0xec>)
 800b77a:	4604      	mov	r4, r0
 800b77c:	429f      	cmp	r7, r3
 800b77e:	460d      	mov	r5, r1
 800b780:	da0f      	bge.n	800b7a2 <scalbn+0x4a>
 800b782:	a32b      	add	r3, pc, #172	; (adr r3, 800b830 <scalbn+0xd8>)
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	f7f4 fea6 	bl	80004d8 <__aeabi_dmul>
 800b78c:	e006      	b.n	800b79c <scalbn+0x44>
 800b78e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b792:	4296      	cmp	r6, r2
 800b794:	d10a      	bne.n	800b7ac <scalbn+0x54>
 800b796:	4602      	mov	r2, r0
 800b798:	f7f4 fce8 	bl	800016c <__adddf3>
 800b79c:	4604      	mov	r4, r0
 800b79e:	460d      	mov	r5, r1
 800b7a0:	e020      	b.n	800b7e4 <scalbn+0x8c>
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b7a8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b7ac:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b7b0:	19b9      	adds	r1, r7, r6
 800b7b2:	4291      	cmp	r1, r2
 800b7b4:	dd0e      	ble.n	800b7d4 <scalbn+0x7c>
 800b7b6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b7ba:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b7be:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b7c2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b7c6:	4820      	ldr	r0, [pc, #128]	; (800b848 <scalbn+0xf0>)
 800b7c8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b7cc:	a31a      	add	r3, pc, #104	; (adr r3, 800b838 <scalbn+0xe0>)
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	e7d9      	b.n	800b788 <scalbn+0x30>
 800b7d4:	2900      	cmp	r1, #0
 800b7d6:	dd08      	ble.n	800b7ea <scalbn+0x92>
 800b7d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7e0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b7ee:	da12      	bge.n	800b816 <scalbn+0xbe>
 800b7f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b7f4:	429f      	cmp	r7, r3
 800b7f6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b7fa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800b7fe:	dcdc      	bgt.n	800b7ba <scalbn+0x62>
 800b800:	a30b      	add	r3, pc, #44	; (adr r3, 800b830 <scalbn+0xd8>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b80a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b80e:	480f      	ldr	r0, [pc, #60]	; (800b84c <scalbn+0xf4>)
 800b810:	f041 011f 	orr.w	r1, r1, #31
 800b814:	e7b8      	b.n	800b788 <scalbn+0x30>
 800b816:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b81a:	3136      	adds	r1, #54	; 0x36
 800b81c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b820:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b824:	4620      	mov	r0, r4
 800b826:	4629      	mov	r1, r5
 800b828:	2200      	movs	r2, #0
 800b82a:	4b09      	ldr	r3, [pc, #36]	; (800b850 <scalbn+0xf8>)
 800b82c:	e7ac      	b.n	800b788 <scalbn+0x30>
 800b82e:	bf00      	nop
 800b830:	c2f8f359 	.word	0xc2f8f359
 800b834:	01a56e1f 	.word	0x01a56e1f
 800b838:	8800759c 	.word	0x8800759c
 800b83c:	7e37e43c 	.word	0x7e37e43c
 800b840:	43500000 	.word	0x43500000
 800b844:	ffff3cb0 	.word	0xffff3cb0
 800b848:	8800759c 	.word	0x8800759c
 800b84c:	c2f8f359 	.word	0xc2f8f359
 800b850:	3c900000 	.word	0x3c900000

0800b854 <_init>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	bf00      	nop
 800b858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85a:	bc08      	pop	{r3}
 800b85c:	469e      	mov	lr, r3
 800b85e:	4770      	bx	lr

0800b860 <_fini>:
 800b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b862:	bf00      	nop
 800b864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b866:	bc08      	pop	{r3}
 800b868:	469e      	mov	lr, r3
 800b86a:	4770      	bx	lr
